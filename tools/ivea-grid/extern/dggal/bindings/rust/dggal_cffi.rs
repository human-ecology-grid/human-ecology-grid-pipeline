#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]

/* originally generated by rust-bindgen 0.71.1 */

extern crate ecrt_sys;

// use ecrt_sys::*;
use ecrt_sys::uint64;
use ecrt_sys::bool_;
use ecrt_sys::Instance;
use ecrt_sys::Class;
use ecrt_sys::Method;
use ecrt_sys::Property;
use ecrt_sys::Module;
use ecrt_sys::Angle;
use ecrt_sys::Point;
use ecrt_sys::Pointd;
use ecrt_sys::String;
use ecrt_sys::Array;
use ecrt_sys::Map;
use ecrt_sys::FieldValue;
use ecrt_sys::File;

pub const DGGAL_MODULE_NAME: &[u8; 6] = b"dggal\0";
pub const nullZone: i32 = -1;
pub const wgs84InvFlattening: f64 = 298.257223563;
pub const CRS_registry_SHIFT: u32 = 0;
pub const CRS_registry_MASK: u32 = 1073741823;
pub const CRS_crsID_SHIFT: u32 = 30;
pub const CRS_crsID_MASK: u64 = 4611686017353646080;
pub const CRS_h_SHIFT: u32 = 62;
pub const CRS_h_MASK: u64 = 4611686018427387904;
pub const DGGRSZONE_level_SHIFT: u32 = 59;
pub const DGGRSZONE_level_MASK: i64 = -576460752303423488;
pub const DGGRSZONE_row_SHIFT: u32 = 30;
pub const DGGRSZONE_row_MASK: u64 = 576460751229681664;
pub const DGGRSZONE_col_SHIFT: u32 = 0;
pub const DGGRSZONE_col_MASK: u32 = 1073741823;
pub const GGGZONE_level_SHIFT: u32 = 59;
pub const GGGZONE_level_MASK: i64 = -576460752303423488;
pub const GGGZONE_row_SHIFT: u32 = 30;
pub const GGGZONE_row_MASK: u64 = 576460751229681664;
pub const GGGZONE_col_SHIFT: u32 = 0;
pub const GGGZONE_col_MASK: u32 = 1073741823;
pub const I3HZONE_levelI9R_SHIFT: u32 = 58;
pub const I3HZONE_levelI9R_MASK: u64 = 8935141660703064064;
pub const I3HZONE_rootRhombus_SHIFT: u32 = 54;
pub const I3HZONE_rootRhombus_MASK: u64 = 270215977642229760;
pub const I3HZONE_rhombusIX_SHIFT: u32 = 3;
pub const I3HZONE_rhombusIX_MASK: u64 = 18014398509481976;
pub const I3HZONE_subHex_SHIFT: u32 = 0;
pub const I3HZONE_subHex_MASK: u32 = 7;
pub const I9RZONE_level_SHIFT: u32 = 59;
pub const I9RZONE_level_MASK: i64 = -576460752303423488;
pub const I9RZONE_row_SHIFT: u32 = 30;
pub const I9RZONE_row_MASK: u64 = 576460751229681664;
pub const I9RZONE_col_SHIFT: u32 = 0;
pub const I9RZONE_col_MASK: u32 = 1073741823;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoPoint {
    pub lat: Angle,
    pub lon: Angle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GeoPoint"][::std::mem::size_of::<GeoPoint>() - 16usize];
    ["Alignment of GeoPoint"][::std::mem::align_of::<GeoPoint>() - 8usize];
    ["Offset of field: GeoPoint::lat"][::std::mem::offset_of!(GeoPoint, lat) - 0usize];
    ["Offset of field: GeoPoint::lon"][::std::mem::offset_of!(GeoPoint, lon) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector3D {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vector3D"][::std::mem::size_of::<Vector3D>() - 24usize];
    ["Alignment of Vector3D"][::std::mem::align_of::<Vector3D>() - 8usize];
    ["Offset of field: Vector3D::x"][::std::mem::offset_of!(Vector3D, x) - 0usize];
    ["Offset of field: Vector3D::y"][::std::mem::offset_of!(Vector3D, y) - 8usize];
    ["Offset of field: Vector3D::z"][::std::mem::offset_of!(Vector3D, z) - 16usize];
};
pub type CRS = uint64;
pub type DGGRS = Instance;
pub type DGGRSZone = uint64;
pub type DGGSJSON = Instance;
pub type DGGSJSONShape = Instance;
pub type JSONSchema = Instance;
pub type JSONSchemaType = ::std::os::raw::c_int;
pub const JSONSchemaType_JSONSchemaType_unset: JSONSchemaType = 0;
pub const JSONSchemaType_JSONSchemaType_array: JSONSchemaType = 1;
pub const JSONSchemaType_JSONSchemaType_boolean: JSONSchemaType = 2;
pub const JSONSchemaType_JSONSchemaType_integer: JSONSchemaType = 3;
pub const JSONSchemaType_JSONSchemaType_null: JSONSchemaType = 4;
pub const JSONSchemaType_JSONSchemaType_number: JSONSchemaType = 5;
pub const JSONSchemaType_JSONSchemaType_object: JSONSchemaType = 6;
pub const JSONSchemaType_JSONSchemaType_string: JSONSchemaType = 7;
pub type RhombicIcosahedral3H = DGGRS;
pub type RhombicIcosahedral9R = DGGRS;
pub type BCTA3H = RhombicIcosahedral3H;
pub type CRSRegistry = ::std::os::raw::c_int;
pub const CRSRegistry_CRSRegistry_epsg: CRSRegistry = 0;
pub const CRSRegistry_CRSRegistry_ogc: CRSRegistry = 1;
pub type DGGSJSONDepth = Instance;
pub type DGGSJSONGrid = Instance;
pub type GGGZone = uint64;
pub type GNOSISGlobalGrid = DGGRS;
pub type GPP3H = RhombicIcosahedral3H;
pub type I3HZone = uint64;
pub type I9RZone = uint64;
pub type ISEA3H = RhombicIcosahedral3H;
pub type ISEA9R = RhombicIcosahedral9R;
pub type IVEA3H = RhombicIcosahedral3H;
pub type IVEA9R = RhombicIcosahedral9R;
pub type template_Array_JSONSchema = Array;
pub type template_Map_String_JSONSchema = Map;
pub type template_Array_String = Array;
pub type template_Array_double = Array;
pub type template_Map_String_int = Map;
pub type template_Array_DGGSJSONDepth = Array;
pub type template_Map_String_template_Array_DGGSJSONDepth = Map;
pub type template_Array_int = Array;
pub type template_Array_DGGRSZone = Array;
pub type template_Array_GeoPoint = Array;
pub type template_Array_Pointd = Array;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRSExtent {
    pub crs: CRS,
    pub tl: Pointd,
    pub br: Pointd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CRSExtent"][::std::mem::size_of::<CRSExtent>() - 40usize];
    ["Alignment of CRSExtent"][::std::mem::align_of::<CRSExtent>() - 8usize];
    ["Offset of field: CRSExtent::crs"][::std::mem::offset_of!(CRSExtent, crs) - 0usize];
    ["Offset of field: CRSExtent::tl"][::std::mem::offset_of!(CRSExtent, tl) - 8usize];
    ["Offset of field: CRSExtent::br"][::std::mem::offset_of!(CRSExtent, br) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut DGGRS_areZonesNeighbors: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, a: DGGRSZone, b: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_areZonesSiblings: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, a: DGGRSZone, b: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_compactZones_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_compactZones: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_countSubZones_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_countSubZones: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_countZoneEdges_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_countZoneEdges: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_countZones_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_countZones: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_doZonesOverlap: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, a: DGGRSZone, b: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_doesZoneContain: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, hayStack: DGGRSZone, needle: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_get64KDepth:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DGGRS) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getFirstSubZone_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getFirstSubZone: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getIndexMaxDepth_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getIndexMaxDepth: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getLevelFromMetersPerSubZone: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            physicalMetersPerSubZone: f64,
            relativeDepth: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getLevelFromPixelsAndExtent: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            extent: *const GeoExtent,
            pixels: *const Point,
            relativeDepth: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getLevelFromRefZoneArea: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, metersSquared: f64) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getLevelFromScaleDenominator: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            scaleDenominator: f64,
            relativeDepth: ::std::os::raw::c_int,
            mmPerPixel: f64,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMaxChildren_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getMaxChildren: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMaxDGGRSZoneLevel_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getMaxDGGRSZoneLevel: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMaxDepth:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DGGRS) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMaxNeighbors_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getMaxNeighbors: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMaxParents_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getMaxParents: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getMetersPerSubZoneFromLevel: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            parentLevel: ::std::os::raw::c_int,
            relativeDepth: ::std::os::raw::c_int,
        ) -> f64,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getRefZoneArea: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, level: ::std::os::raw::c_int) -> f64,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getRefinementRatio_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getRefinementRatio: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getScaleDenominatorFromLevel: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            parentLevel: ::std::os::raw::c_int,
            relativeDepth: ::std::os::raw::c_int,
            mmPerPixel: f64,
        ) -> f64,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getSubZoneAtIndex_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getSubZoneAtIndex: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getSubZoneCRSCentroids_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getSubZoneCRSCentroids: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getSubZoneIndex_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getSubZoneIndex: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getSubZoneWGS84Centroids_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getSubZoneWGS84Centroids: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getSubZones_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getSubZones: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneArea_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneArea: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneCRSCentroid_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneCRSCentroid: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneCRSExtent_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneCRSExtent: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneCRSVertices_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneCRSVertices: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneCentroidChild_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneCentroidChild: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneCentroidParent_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneCentroidParent: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneChildren_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneChildren: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneFromCRSCentroid_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneFromCRSCentroid: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneFromTextID_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneFromTextID: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneFromWGS84Centroid_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneFromWGS84Centroid: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneLevel_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneLevel: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneNeighbors_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneNeighbors: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneParents_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneParents: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneRefinedCRSVertices_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneRefinedCRSVertices: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneRefinedWGS84Vertices_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneRefinedWGS84Vertices: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneTextID_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneTextID: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneWGS84Centroid_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneWGS84Centroid: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneWGS84Extent_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneWGS84Extent: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_getZoneWGS84Vertices_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_getZoneWGS84Vertices: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneAncestorOf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            ancestor: DGGRSZone,
            descendant: DGGRSZone,
            maxDepth: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneCentroidChild_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_isZoneCentroidChild: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneContainedIn: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, needle: DGGRSZone, hayStack: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneDescendantOf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DGGRS,
            descendant: DGGRSZone,
            ancestor: DGGRSZone,
            maxDepth: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneImmediateChildOf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, child: DGGRSZone, parent: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_isZoneImmediateParentOf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, parent: DGGRSZone, child: DGGRSZone) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_listZones_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DGGRS_listZones: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DGGRS_zoneHasSubZone: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: DGGRS, hayStack: DGGRSZone, needle: DGGRSZone) -> bool_,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_DGGSJSON {
    pub dggrs: String,
    pub zoneId: String,
    pub depths: Array,
    pub representedValue: String,
    pub schema: JSONSchema,
    pub dimensions: Array,
    pub values: Map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_DGGSJSON"][::std::mem::size_of::<class_members_DGGSJSON>() - 56usize];
    ["Alignment of class_members_DGGSJSON"]
        [::std::mem::align_of::<class_members_DGGSJSON>() - 8usize];
    ["Offset of field: class_members_DGGSJSON::dggrs"]
        [::std::mem::offset_of!(class_members_DGGSJSON, dggrs) - 0usize];
    ["Offset of field: class_members_DGGSJSON::zoneId"]
        [::std::mem::offset_of!(class_members_DGGSJSON, zoneId) - 8usize];
    ["Offset of field: class_members_DGGSJSON::depths"]
        [::std::mem::offset_of!(class_members_DGGSJSON, depths) - 16usize];
    ["Offset of field: class_members_DGGSJSON::representedValue"]
        [::std::mem::offset_of!(class_members_DGGSJSON, representedValue) - 24usize];
    ["Offset of field: class_members_DGGSJSON::schema"]
        [::std::mem::offset_of!(class_members_DGGSJSON, schema) - 32usize];
    ["Offset of field: class_members_DGGSJSON::dimensions"]
        [::std::mem::offset_of!(class_members_DGGSJSON, dimensions) - 40usize];
    ["Offset of field: class_members_DGGSJSON::values"]
        [::std::mem::offset_of!(class_members_DGGSJSON, values) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_DGGSJSONDepth {
    pub depth: ::std::os::raw::c_int,
    pub shape: DGGSJSONShape,
    pub data: Array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_DGGSJSONDepth"]
        [::std::mem::size_of::<class_members_DGGSJSONDepth>() - 24usize];
    ["Alignment of class_members_DGGSJSONDepth"]
        [::std::mem::align_of::<class_members_DGGSJSONDepth>() - 8usize];
    ["Offset of field: class_members_DGGSJSONDepth::depth"]
        [::std::mem::offset_of!(class_members_DGGSJSONDepth, depth) - 0usize];
    ["Offset of field: class_members_DGGSJSONDepth::shape"]
        [::std::mem::offset_of!(class_members_DGGSJSONDepth, shape) - 8usize];
    ["Offset of field: class_members_DGGSJSONDepth::data"]
        [::std::mem::offset_of!(class_members_DGGSJSONDepth, data) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_members_DGGSJSONGrid {
    pub cellsCount: ::std::os::raw::c_int,
    pub resolution: f64,
    pub coordinates: Array,
    pub boundsCoordinates: Array,
    pub relativeBounds: Array,
    pub firstCoordinate: FieldValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_DGGSJSONGrid"]
        [::std::mem::size_of::<class_members_DGGSJSONGrid>() - 56usize];
    ["Alignment of class_members_DGGSJSONGrid"]
        [::std::mem::align_of::<class_members_DGGSJSONGrid>() - 8usize];
    ["Offset of field: class_members_DGGSJSONGrid::cellsCount"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, cellsCount) - 0usize];
    ["Offset of field: class_members_DGGSJSONGrid::resolution"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, resolution) - 8usize];
    ["Offset of field: class_members_DGGSJSONGrid::coordinates"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, coordinates) - 16usize];
    ["Offset of field: class_members_DGGSJSONGrid::boundsCoordinates"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, boundsCoordinates) - 24usize];
    ["Offset of field: class_members_DGGSJSONGrid::relativeBounds"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, relativeBounds) - 32usize];
    ["Offset of field: class_members_DGGSJSONGrid::firstCoordinate"]
        [::std::mem::offset_of!(class_members_DGGSJSONGrid, firstCoordinate) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_DGGSJSONShape {
    pub count: ::std::os::raw::c_int,
    pub subZones: ::std::os::raw::c_int,
    pub dimensions: Map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_DGGSJSONShape"]
        [::std::mem::size_of::<class_members_DGGSJSONShape>() - 16usize];
    ["Alignment of class_members_DGGSJSONShape"]
        [::std::mem::align_of::<class_members_DGGSJSONShape>() - 8usize];
    ["Offset of field: class_members_DGGSJSONShape::count"]
        [::std::mem::offset_of!(class_members_DGGSJSONShape, count) - 0usize];
    ["Offset of field: class_members_DGGSJSONShape::subZones"]
        [::std::mem::offset_of!(class_members_DGGSJSONShape, subZones) - 4usize];
    ["Offset of field: class_members_DGGSJSONShape::dimensions"]
        [::std::mem::offset_of!(class_members_DGGSJSONShape, dimensions) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoExtent {
    pub ll: GeoPoint,
    pub ur: GeoPoint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GeoExtent"][::std::mem::size_of::<GeoExtent>() - 32usize];
    ["Alignment of GeoExtent"][::std::mem::align_of::<GeoExtent>() - 8usize];
    ["Offset of field: GeoExtent::ll"][::std::mem::offset_of!(GeoExtent, ll) - 0usize];
    ["Offset of field: GeoExtent::ur"][::std::mem::offset_of!(GeoExtent, ur) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut GeoExtent_clear:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut GeoExtent)>;
}
/*unsafe*/ extern "C" {
    pub static mut GeoExtent_intersects: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut GeoExtent, b: *const GeoExtent) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GeoExtent_geodeticArea: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GeoExtent_get_geodeticArea:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: *const GeoExtent) -> f64>;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_members_JSONSchema {
    pub schema: String,
    pub id: String,
    pub title: String,
    pub comment: String,
    pub description: String,
    pub Default: FieldValue,
    pub readOnly: bool_,
    pub writeOnly: bool_,
    pub examples: Array,
    pub multipleOf: Array,
    pub type_: JSONSchemaType,
    pub Enum: Array,
    pub format: String,
    pub contentMediaType: String,
    pub maximum: f64,
    pub exclusiveMaximum: f64,
    pub minimum: f64,
    pub exclusiveMinimum: f64,
    pub pattern: String,
    pub items: JSONSchema,
    pub maxItems: ::std::os::raw::c_int,
    pub minItems: ::std::os::raw::c_int,
    pub uniqueItems: bool_,
    pub contains: String,
    pub maxProperties: ::std::os::raw::c_int,
    pub minProperties: ::std::os::raw::c_int,
    pub required: Array,
    pub additionalProperties: JSONSchema,
    pub definitions: Map,
    pub properties: Map,
    pub patternProperties: Map,
    pub dependencies: Map,
    pub propertyNames: String,
    pub contentEncoding: String,
    pub If: JSONSchema,
    pub Then: JSONSchema,
    pub Else: JSONSchema,
    pub allOf: Array,
    pub anyOf: Array,
    pub oneOf: Array,
    pub Not: JSONSchema,
    pub xogcrole: String,
    pub xogcpropertySeq: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_JSONSchema"]
        [::std::mem::size_of::<class_members_JSONSchema>() - 328usize];
    ["Alignment of class_members_JSONSchema"]
        [::std::mem::align_of::<class_members_JSONSchema>() - 8usize];
    ["Offset of field: class_members_JSONSchema::schema"]
        [::std::mem::offset_of!(class_members_JSONSchema, schema) - 0usize];
    ["Offset of field: class_members_JSONSchema::id"]
        [::std::mem::offset_of!(class_members_JSONSchema, id) - 8usize];
    ["Offset of field: class_members_JSONSchema::title"]
        [::std::mem::offset_of!(class_members_JSONSchema, title) - 16usize];
    ["Offset of field: class_members_JSONSchema::comment"]
        [::std::mem::offset_of!(class_members_JSONSchema, comment) - 24usize];
    ["Offset of field: class_members_JSONSchema::description"]
        [::std::mem::offset_of!(class_members_JSONSchema, description) - 32usize];
    ["Offset of field: class_members_JSONSchema::Default"]
        [::std::mem::offset_of!(class_members_JSONSchema, Default) - 40usize];
    ["Offset of field: class_members_JSONSchema::readOnly"]
        [::std::mem::offset_of!(class_members_JSONSchema, readOnly) - 56usize];
    ["Offset of field: class_members_JSONSchema::writeOnly"]
        [::std::mem::offset_of!(class_members_JSONSchema, writeOnly) - 60usize];
    ["Offset of field: class_members_JSONSchema::examples"]
        [::std::mem::offset_of!(class_members_JSONSchema, examples) - 64usize];
    ["Offset of field: class_members_JSONSchema::multipleOf"]
        [::std::mem::offset_of!(class_members_JSONSchema, multipleOf) - 72usize];
    ["Offset of field: class_members_JSONSchema::type_"]
        [::std::mem::offset_of!(class_members_JSONSchema, type_) - 80usize];
    ["Offset of field: class_members_JSONSchema::Enum"]
        [::std::mem::offset_of!(class_members_JSONSchema, Enum) - 88usize];
    ["Offset of field: class_members_JSONSchema::format"]
        [::std::mem::offset_of!(class_members_JSONSchema, format) - 96usize];
    ["Offset of field: class_members_JSONSchema::contentMediaType"]
        [::std::mem::offset_of!(class_members_JSONSchema, contentMediaType) - 104usize];
    ["Offset of field: class_members_JSONSchema::maximum"]
        [::std::mem::offset_of!(class_members_JSONSchema, maximum) - 112usize];
    ["Offset of field: class_members_JSONSchema::exclusiveMaximum"]
        [::std::mem::offset_of!(class_members_JSONSchema, exclusiveMaximum) - 120usize];
    ["Offset of field: class_members_JSONSchema::minimum"]
        [::std::mem::offset_of!(class_members_JSONSchema, minimum) - 128usize];
    ["Offset of field: class_members_JSONSchema::exclusiveMinimum"]
        [::std::mem::offset_of!(class_members_JSONSchema, exclusiveMinimum) - 136usize];
    ["Offset of field: class_members_JSONSchema::pattern"]
        [::std::mem::offset_of!(class_members_JSONSchema, pattern) - 144usize];
    ["Offset of field: class_members_JSONSchema::items"]
        [::std::mem::offset_of!(class_members_JSONSchema, items) - 152usize];
    ["Offset of field: class_members_JSONSchema::maxItems"]
        [::std::mem::offset_of!(class_members_JSONSchema, maxItems) - 160usize];
    ["Offset of field: class_members_JSONSchema::minItems"]
        [::std::mem::offset_of!(class_members_JSONSchema, minItems) - 164usize];
    ["Offset of field: class_members_JSONSchema::uniqueItems"]
        [::std::mem::offset_of!(class_members_JSONSchema, uniqueItems) - 168usize];
    ["Offset of field: class_members_JSONSchema::contains"]
        [::std::mem::offset_of!(class_members_JSONSchema, contains) - 176usize];
    ["Offset of field: class_members_JSONSchema::maxProperties"]
        [::std::mem::offset_of!(class_members_JSONSchema, maxProperties) - 184usize];
    ["Offset of field: class_members_JSONSchema::minProperties"]
        [::std::mem::offset_of!(class_members_JSONSchema, minProperties) - 188usize];
    ["Offset of field: class_members_JSONSchema::required"]
        [::std::mem::offset_of!(class_members_JSONSchema, required) - 192usize];
    ["Offset of field: class_members_JSONSchema::additionalProperties"]
        [::std::mem::offset_of!(class_members_JSONSchema, additionalProperties) - 200usize];
    ["Offset of field: class_members_JSONSchema::definitions"]
        [::std::mem::offset_of!(class_members_JSONSchema, definitions) - 208usize];
    ["Offset of field: class_members_JSONSchema::properties"]
        [::std::mem::offset_of!(class_members_JSONSchema, properties) - 216usize];
    ["Offset of field: class_members_JSONSchema::patternProperties"]
        [::std::mem::offset_of!(class_members_JSONSchema, patternProperties) - 224usize];
    ["Offset of field: class_members_JSONSchema::dependencies"]
        [::std::mem::offset_of!(class_members_JSONSchema, dependencies) - 232usize];
    ["Offset of field: class_members_JSONSchema::propertyNames"]
        [::std::mem::offset_of!(class_members_JSONSchema, propertyNames) - 240usize];
    ["Offset of field: class_members_JSONSchema::contentEncoding"]
        [::std::mem::offset_of!(class_members_JSONSchema, contentEncoding) - 248usize];
    ["Offset of field: class_members_JSONSchema::If"]
        [::std::mem::offset_of!(class_members_JSONSchema, If) - 256usize];
    ["Offset of field: class_members_JSONSchema::Then"]
        [::std::mem::offset_of!(class_members_JSONSchema, Then) - 264usize];
    ["Offset of field: class_members_JSONSchema::Else"]
        [::std::mem::offset_of!(class_members_JSONSchema, Else) - 272usize];
    ["Offset of field: class_members_JSONSchema::allOf"]
        [::std::mem::offset_of!(class_members_JSONSchema, allOf) - 280usize];
    ["Offset of field: class_members_JSONSchema::anyOf"]
        [::std::mem::offset_of!(class_members_JSONSchema, anyOf) - 288usize];
    ["Offset of field: class_members_JSONSchema::oneOf"]
        [::std::mem::offset_of!(class_members_JSONSchema, oneOf) - 296usize];
    ["Offset of field: class_members_JSONSchema::Not"]
        [::std::mem::offset_of!(class_members_JSONSchema, Not) - 304usize];
    ["Offset of field: class_members_JSONSchema::xogcrole"]
        [::std::mem::offset_of!(class_members_JSONSchema, xogcrole) - 312usize];
    ["Offset of field: class_members_JSONSchema::xogcpropertySeq"]
        [::std::mem::offset_of!(class_members_JSONSchema, xogcpropertySeq) - 320usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_maximum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_maximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_maximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_exclusiveMaximum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_exclusiveMaximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_exclusiveMaximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_minimum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_minimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_minimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_exclusiveMinimum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_exclusiveMinimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_exclusiveMinimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_maxItems: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_maxItems:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_maxItems:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_minItems: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_minItems:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_minItems:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_maxProperties: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_maxProperties:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_maxProperties:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_minProperties: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_get_minProperties:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_minProperties:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_xogcpropertySeq: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_xogcpropertySeq:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONSchema_Default: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONSchema_isSet_Default:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONSchema) -> bool_>;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Plane {
    pub __bindgen_anon_1: Plane__bindgen_ty_1,
    pub d: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Plane__bindgen_ty_1 {
    pub __bindgen_anon_1: Plane__bindgen_ty_1__bindgen_ty_1,
    pub normal: Vector3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Plane__bindgen_ty_1__bindgen_ty_1 {
    pub a: f64,
    pub b: f64,
    pub c: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Plane__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<Plane__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of Plane__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<Plane__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: Plane__bindgen_ty_1__bindgen_ty_1::a"]
        [::std::mem::offset_of!(Plane__bindgen_ty_1__bindgen_ty_1, a) - 0usize];
    ["Offset of field: Plane__bindgen_ty_1__bindgen_ty_1::b"]
        [::std::mem::offset_of!(Plane__bindgen_ty_1__bindgen_ty_1, b) - 8usize];
    ["Offset of field: Plane__bindgen_ty_1__bindgen_ty_1::c"]
        [::std::mem::offset_of!(Plane__bindgen_ty_1__bindgen_ty_1, c) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Plane__bindgen_ty_1"][::std::mem::size_of::<Plane__bindgen_ty_1>() - 24usize];
    ["Alignment of Plane__bindgen_ty_1"][::std::mem::align_of::<Plane__bindgen_ty_1>() - 8usize];
    ["Offset of field: Plane__bindgen_ty_1::normal"]
        [::std::mem::offset_of!(Plane__bindgen_ty_1, normal) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Plane"][::std::mem::size_of::<Plane>() - 32usize];
    ["Alignment of Plane"][::std::mem::align_of::<Plane>() - 8usize];
    ["Offset of field: Plane::d"][::std::mem::offset_of!(Plane, d) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut Plane_fromPoints: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Plane,
            v1: *const Vector3D,
            v2: *const Vector3D,
            v3: *const Vector3D,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Vector3D_crossProduct: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Vector3D,
            vector1: *const Vector3D,
            vector2: *const Vector3D,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Vector3D_dotProduct: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut Vector3D, vector2: *const Vector3D) -> f64,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Vector3D_normalize:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Vector3D, source: *const Vector3D)>;
}
/*unsafe*/ extern "C" {
    pub static mut Vector3D_subtract: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Vector3D,
            vector1: *const Vector3D,
            vector2: *const Vector3D,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_Vector3D_length: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Vector3D_get_length:
        ::std::option::Option</*unsafe*/ extern "C" fn(v: *const Vector3D) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut fnptr_readDGGSJSON: ::std::option::Option</*unsafe*/ extern "C" fn(f: File) -> DGGSJSON>;
}
/*unsafe*/ extern "C" {
    pub static mut class_BCTA3H: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CRS: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CRSExtent: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CRSRegistry: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGRS: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGRSZone: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGSJSON: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGSJSONDepth: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGSJSONGrid: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DGGSJSONShape: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GGGZone: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GNOSISGlobalGrid: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GPP3H: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GeoExtent: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GeoPoint: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_I3HZone: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_I9RZone: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ISEA3H: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ISEA9R: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_IVEA3H: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_IVEA9R: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONSchema: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONSchemaType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Plane: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_RhombicIcosahedral3H: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_RhombicIcosahedral9R: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Vector3D: *mut Class;
}
/*unsafe*/ extern "C" {
    pub fn dggal_init(fromModule: Module) -> Module;
}
