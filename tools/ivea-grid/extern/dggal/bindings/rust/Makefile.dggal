.PHONY: all objdir cleantarget clean realclean distclean

ifneq ($(V),1)
.SILENT:
endif

MODULE := dggal

# CORE VARIABLES

VERSION := 0.0.1
CONFIG := release
ifndef COMPILER
COMPILER := default
endif

TARGET_TYPE = sharedlib

# INCLUDES

DGGAL_ABSPATH := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))../../

ifndef EC_SDK_SRC
EC_SDK_SRC := $(DGGAL_ABSPATH)../eC
endif

_CF_DIR = $(EC_SDK_SRC)/
include $(_CF_DIR)crossplatform.mk
include $(_CF_DIR)default.cf

# POST-INCLUDES VARIABLES

OBJ = obj/$(PLATFORM)$(COMPILER_SUFFIX)

TARGET = $(OBJ)/lib$(MODULE).rlib

SOURCES = $(MODULE).rs

LIBS +=

OFLAGS =

OFLAGS += \
	-L obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX) \
	-L $(EC_SDK_SRC)/bindings/rust \
	-L $(EC_SDK_SRC)/obj/$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib

PRJ_CFLAGS += $(if $(DEBUG), -g, -O2 -ffast-math) -w

RUSTFLAGS =

ifdef C_BINDINGS_SYMBOLS_PREFIX_ENABLE
PRJ_CFLAGS += -DECPRFX=eC_
endif

SOURCES = $(_DEP_SOURCES) $(MODULE).rs

all: objdir $(TARGET);

# OBJECT RULES


# TARGETS

objdir:
	$(call mkdir,$(OBJ))

$(SYMBOLS): | objdir
$(OBJECTS): | objdir

$(TARGET): $(SOURCES) $(OBJECTS) | objdir
	rustc --crate-type lib $(RUSTFLAGS) $(MODULE).rs $(OFLAGS) $(LIBS) -o $(TARGET)
	$(call mkdir,$(DGGAL_ABSPATH)obj/$(PLATFORM)/lib)
	$(call cp,$(TARGET),$(DGGAL_ABSPATH)obj/$(PLATFORM)/lib)

cleantarget:
	$(call rm,$(TARGET))

clean: cleantarget
	$(call rm,_OBJECTS)

realclean: cleantarget
	$(call rmr,$(OBJ))

distclean:
	$(_MAKE) -f $(_CF_DIR)Cleanfile distclean distclean_all_subdirs
