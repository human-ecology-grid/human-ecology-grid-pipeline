/* A Bison parser, made by GNU Bison 2.7.12-4996.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.12-4996"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     FLOAT16 = 296,
     LONG = 297,
     SIGNED = 298,
     UNSIGNED = 299,
     FLOAT = 300,
     DOUBLE = 301,
     CONST = 302,
     VOLATILE = 303,
     VOID = 304,
     VALIST = 305,
     STRUCT = 306,
     UNION = 307,
     ENUM = 308,
     ELLIPSIS = 309,
     CASE = 310,
     DEFAULT = 311,
     IF = 312,
     SWITCH = 313,
     WHILE = 314,
     DO = 315,
     FOR = 316,
     GOTO = 317,
     CONTINUE = 318,
     BREAK = 319,
     RETURN = 320,
     IFX = 321,
     ELSE = 322,
     CLASS = 323,
     THISCLASS = 324,
     PROPERTY = 325,
     SETPROP = 326,
     GETPROP = 327,
     NEWOP = 328,
     RENEW = 329,
     DELETE = 330,
     EXT_DECL = 331,
     EXT_STORAGE = 332,
     IMPORT = 333,
     DEFINE = 334,
     VIRTUAL = 335,
     ATTRIB = 336,
     PUBLIC = 337,
     PRIVATE = 338,
     TYPED_OBJECT = 339,
     ANY_OBJECT = 340,
     _INCREF = 341,
     EXTENSION = 342,
     ASM = 343,
     TYPEOF = 344,
     WATCH = 345,
     STOPWATCHING = 346,
     FIREWATCHERS = 347,
     WATCHABLE = 348,
     CLASS_DESIGNER = 349,
     CLASS_NO_EXPANSION = 350,
     CLASS_FIXED = 351,
     ISPROPSET = 352,
     CLASS_DEFAULT_PROPERTY = 353,
     PROPERTY_CATEGORY = 354,
     CLASS_DATA = 355,
     CLASS_PROPERTY = 356,
     SUBCLASS = 357,
     NAMESPACE = 358,
     NEW0OP = 359,
     RENEW0 = 360,
     VAARG = 361,
     DBTABLE = 362,
     DBFIELD = 363,
     DBINDEX = 364,
     DATABASE_OPEN = 365,
     ALIGNOF = 366,
     ATTRIB_DEP = 367,
     __ATTRIB = 368,
     BOOL = 369,
     _BOOL = 370,
     _COMPLEX = 371,
     _IMAGINARY = 372,
     RESTRICT = 373,
     THREAD = 374,
     WIDE_STRING_LITERAL = 375,
     BUILTIN_OFFSETOF = 376,
     PRAGMA = 377,
     STATIC_ASSERT = 378,
     _ALIGNAS = 379
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 315 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 356 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  319
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   44051

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  150
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1338
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2242

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   379

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   144,     2,     2,   138,   146,   141,     2,
     128,   129,   125,   142,   133,   143,   136,   145,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   137,   131,
     126,   132,   127,   149,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   139,     2,   140,   147,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   135,   148,   134,   130,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1306,  1308,  1312,
    1316,  1320,  1324,  1328,  1332,  1334,  1338,  1342,  1346,  1350,
    1352,  1356,  1360,  1364,  1368,  1371,  1373,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1406,  1410,  1414,  1418,  1422,
    1426,  1430,  1434,  1438,  1440,  1444,  1448,  1452,  1456,  1458,
    1462,  1466,  1470,  1474,  1476,  1480,  1484,  1488,  1492,  1494,
    1498,  1502,  1504,  1508,  1512,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1604,  1610,  1612,  1616,  1620,  1624,  1628,  1632,  1636,  1640,
    1644,  1646,  1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,
    1664,  1666,  1668,  1672,  1676,  1679,  1681,  1685,  1689,  1691,
    1693,  1696,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1730,  1733,  1736,  1739,  1742,  1748,  1755,  1762,  1765,  1771,
    1773,  1775,  1777,  1782,  1784,  1788,  1792,  1796,  1800,  1804,
    1808,  1810,  1814,  1818,  1822,  1826,  1828,  1832,  1836,  1840,
    1844,  1846,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
    1879,  1883,  1887,  1891,  1895,  1899,  1903,  1907,  1911,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1987,  1993,  1999,  2005,  2011,  2016,  2021,  2026,  2031,  2037,
    2043,  2049,  2055,  2060,  2065,  2070,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2117,  2123,  2127,  2131,  2134,  2137,  2139,
    2143,  2147,  2151,  2155,  2157,  2160,  2164,  2168,  2171,  2174,
    2177,  2179,  2182,  2186,  2190,  2192,  2194,  2196,  2198,  2200,
    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,
    2222,  2224,  2228,  2232,  2235,  2240,  2245,  2247,  2251,  2254,
    2256,  2259,  2262,  2265,  2270,  2275,  2279,  2283,  2288,  2294,
    2299,  2306,  2313,  2318,  2324,  2329,  2336,  2343,  2349,  2355,
    2358,  2361,  2364,  2370,  2374,  2380,  2387,  2393,  2401,  2409,
    2418,  2427,  2435,  2443,  2447,  2451,  2457,  2463,  2467,  2472,
    2476,  2482,  2488,  2495,  2503,  2510,  2515,  2517,  2519,  2521,
    2523,  2525,  2527,  2529,  2531,  2533,  2536,  2538,  2540,  2542,
    2544,  2546,  2548,  2550,  2552,  2554,  2556,  2558,  2560,  2562,
    2564,  2566,  2568,  2570,  2572,  2574,  2579,  2584,  2589,  2591,
    2593,  2595,  2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,
    2613,  2615,  2617,  2619,  2621,  2623,  2625,  2627,  2629,  2631,
    2633,  2635,  2637,  2639,  2641,  2643,  2645,  2647,  2649,  2654,
    2659,  2664,  2666,  2668,  2671,  2674,  2678,  2684,  2687,  2691,
    2697,  2703,  2709,  2711,  2715,  2718,  2721,  2725,  2729,  2732,
    2736,  2740,  2745,  2749,  2753,  2757,  2761,  2765,  2769,  2774,
    2779,  2784,  2786,  2788,  2793,  2797,  2800,  2804,  2808,  2812,
    2816,  2820,  2824,  2828,  2832,  2836,  2840,  2844,  2848,  2850,
    2852,  2854,  2857,  2859,  2862,  2864,  2867,  2869,  2872,  2874,
    2877,  2879,  2882,  2884,  2887,  2889,  2892,  2894,  2897,  2899,
    2902,  2904,  2907,  2909,  2912,  2914,  2917,  2919,  2922,  2924,
    2927,  2929,  2932,  2934,  2937,  2939,  2942,  2944,  2947,  2949,
    2952,  2954,  2957,  2959,  2962,  2964,  2967,  2969,  2972,  2974,
    2977,  2979,  2982,  2984,  2986,  2988,  2991,  2993,  2996,  2998,
    3001,  3003,  3006,  3011,  3017,  3019,  3021,  3023,  3026,  3028,
    3031,  3033,  3036,  3038,  3041,  3046,  3052,  3054,  3057,  3059,
    3062,  3064,  3067,  3069,  3072,  3074,  3077,  3079,  3082,  3087,
    3093,  3095,  3098,  3100,  3103,  3105,  3108,  3110,  3113,  3115,
    3118,  3120,  3123,  3128,  3134,  3138,  3142,  3144,  3148,  3152,
    3156,  3160,  3162,  3164,  3166,  3171,  3176,  3181,  3185,  3190,
    3195,  3200,  3204,  3206,  3210,  3215,  3219,  3224,  3229,  3234,
    3239,  3243,  3246,  3250,  3254,  3258,  3262,  3265,  3268,  3271,
    3275,  3280,  3282,  3284,  3287,  3291,  3295,  3299,  3303,  3306,
    3309,  3312,  3316,  3321,  3323,  3325,  3327,  3329,  3332,  3335,
    3337,  3339,  3344,  3349,  3351,  3353,  3355,  3357,  3359,  3361,
    3363,  3365,  3367,  3372,  3374,  3377,  3381,  3388,  3394,  3396,
    3399,  3403,  3408,  3411,  3415,  3419,  3423,  3427,  3432,  3437,
    3442,  3445,  3449,  3453,  3457,  3462,  3467,  3471,  3476,  3479,
    3483,  3487,  3491,  3496,  3501,  3503,  3506,  3509,  3513,  3515,
    3517,  3520,  3523,  3527,  3529,  3531,  3534,  3537,  3541,  3543,
    3546,  3550,  3553,  3556,  3558,  3561,  3565,  3568,  3570,  3573,
    3577,  3581,  3583,  3586,  3590,  3594,  3596,  3599,  3603,  3607,
    3609,  3612,  3616,  3620,  3622,  3625,  3629,  3633,  3635,  3639,
    3644,  3648,  3653,  3655,  3660,  3663,  3669,  3673,  3675,  3677,
    3679,  3681,  3683,  3685,  3689,  3693,  3696,  3699,  3701,  3703,
    3707,  3710,  3714,  3716,  3720,  3724,  3728,  3732,  3736,  3740,
    3744,  3748,  3750,  3753,  3757,  3761,  3763,  3766,  3768,  3771,
    3774,  3777,  3780,  3784,  3786,  3788,  3792,  3796,  3798,  3802,
    3807,  3811,  3816,  3820,  3824,  3829,  3833,  3838,  3840,  3844,
    3848,  3853,  3857,  3861,  3865,  3870,  3872,  3876,  3880,  3884,
    3888,  3892,  3894,  3898,  3901,  3903,  3905,  3907,  3909,  3911,
    3914,  3916,  3918,  3920,  3922,  3925,  3928,  3931,  3933,  3935,
    3937,  3939,  3941,  3944,  3946,  3948,  3953,  3961,  3963,  3967,
    3968,  3975,  3984,  3995,  4008,  4017,  4028,  4039,  4045,  4053,
    4063,  4075,  4083,  4093,  4103,  4107,  4112,  4117,  4121,  4125,
    4129,  4134,  4139,  4143,  4147,  4151,  4156,  4161,  4165,  4168,
    4172,  4175,  4179,  4184,  4189,  4193,  4197,  4199,  4201,  4203,
    4205,  4207,  4210,  4214,  4217,  4220,  4225,  4232,  4234,  4237,
    4241,  4245,  4248,  4254,  4261,  4264,  4267,  4270,  4273,  4276,
    4279,  4281,  4284,  4287,  4291,  4293,  4296,  4298,  4301,  4304,
    4306,  4309,  4312,  4315,  4318,  4321,  4324,  4326,  4328,  4331,
    4334,  4336,  4338,  4341,  4344,  4346,  4349,  4352,  4354,  4357,
    4359,  4362,  4365,  4371,  4377,  4385,  4393,  4399,  4405,  4409,
    4412,  4418,  4423,  4428,  4436,  4443,  4450,  4456,  4464,  4471,
    4476,  4484,  4494,  4498,  4503,  4508,  4514,  4520,  4527,  4535,
    4542,  4549,  4555,  4561,  4566,  4570,  4573,  4575,  4578,  4583,
    4587,  4593,  4598,  4602,  4605,  4608,  4611,  4615,  4619,  4623,
    4627,  4630,  4633,  4635,  4637,  4642,  4646,  4651,  4655,  4659,
    4662,  4667,  4671,  4676,  4680,  4684,  4687,  4689,  4692,  4694,
    4696,  4699,  4701,  4704,  4708,  4712,  4714,  4717,  4720,  4723,
    4727,  4732,  4737,  4740,  4743,  4746,  4749,  4751,  4754,  4756,
    4761,  4768,  4770,  4773,  4775,  4778,  4781,  4783,  4786,  4788,
    4791,  4794,  4797,  4800,  4802,  4805,  4808,  4812,  4814,  4816,
    4817,  4824,  4831,  4837,  4842,  4844,  4847,  4850,  4852,  4856,
    4860,  4865,  4867,  4869,  4872,  4875,  4882,  4889,  4896
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     398,     0,    -1,   222,   125,    -1,   222,   126,    -1,   155,
      -1,   222,   222,    -1,    28,    -1,    28,    -1,   153,    -1,
     153,   126,   216,   127,    -1,   153,   126,   216,    11,    -1,
     305,   341,    -1,   339,    -1,   305,   128,   129,    -1,   130,
     305,   128,   129,    -1,    80,   305,   341,    -1,    80,   339,
      -1,   305,   342,    -1,   340,    -1,    80,   305,   342,    -1,
      80,   340,    -1,   156,   382,    -1,   159,   382,    -1,   159,
     131,    -1,   157,   382,    -1,   158,   382,    -1,   156,   131,
      -1,   156,   330,   131,    -1,   156,   383,    -1,   160,    -1,
     159,   383,    -1,   161,    -1,   161,   131,    -1,   304,   341,
      -1,   304,   343,    -1,   304,   342,    -1,   164,   382,    -1,
     164,   383,    -1,   165,    -1,   164,    -1,   230,   132,   347,
      -1,   347,    -1,   230,   132,   348,    -1,   230,   132,     1,
      -1,   348,    -1,   168,    -1,   170,   133,   168,    -1,   171,
     133,   168,    -1,   169,    -1,   170,   133,   169,    -1,   171,
     133,   169,    -1,   170,   133,     1,    -1,   171,   133,     1,
      -1,   133,    -1,   170,   131,    -1,   171,   131,    -1,   172,
      -1,   166,    -1,   175,   172,    -1,   175,   166,    -1,   173,
     172,    -1,   173,   166,    -1,   175,   131,    -1,   173,   131,
      -1,   131,    -1,   173,    -1,   170,    -1,   173,   170,    -1,
     175,   170,    -1,   167,    -1,   174,   167,    -1,   175,   167,
      -1,   173,   167,    -1,   173,   171,    -1,   171,    -1,   170,
       1,    -1,   177,   134,    -1,   177,     1,   134,    -1,   304,
     222,   135,   175,    -1,   304,   222,   135,   174,     1,    -1,
     304,   222,   135,   174,    -1,   304,   222,   135,    -1,   304,
     222,   135,     1,    -1,   179,   134,    -1,   179,     1,   134,
      -1,   305,   222,   135,   175,    -1,   305,   222,   135,   174,
       1,    -1,   305,   222,   135,   174,    -1,   305,   222,   135,
      -1,   305,   222,   135,     1,    -1,   306,   222,   135,   174,
     134,    -1,   306,   222,   135,   175,   134,    -1,   306,   222,
     135,   134,    -1,   182,   134,    -1,   182,     1,   134,    -1,
     155,   135,   174,    -1,   222,   135,   174,    -1,   155,   135,
     175,    -1,   155,   135,    -1,   155,   135,   174,     1,    -1,
     155,   135,     1,    -1,   222,   135,   175,    -1,   222,   135,
      -1,   222,   135,   174,     1,    -1,   222,   135,     1,    -1,
     184,   134,    -1,   184,     1,   134,    -1,   135,   175,    -1,
     135,   174,     1,    -1,   135,     1,    -1,   135,    -1,   135,
     174,    -1,   230,   132,   347,    -1,   230,   132,   348,    -1,
     230,   132,     1,    -1,   230,     1,    -1,   185,    -1,   187,
     133,   185,    -1,   188,   133,   185,    -1,   186,    -1,   187,
     133,   186,    -1,   188,   133,   186,    -1,   187,     1,    -1,
      70,   310,   222,   135,    -1,    70,   310,   335,   222,   135,
      -1,    70,   310,   135,    -1,    70,   310,   335,   135,    -1,
      70,     1,   135,    -1,   189,    -1,   190,    71,   382,    -1,
     190,    72,   382,    -1,   190,    97,   382,    -1,   190,    93,
      -1,   190,    99,   224,    -1,   190,   134,    -1,   101,   310,
     222,   135,    -1,   101,   310,   335,   222,   135,    -1,   101,
     310,   135,    -1,   101,   310,   335,   135,    -1,   101,     1,
     135,    -1,   192,    -1,   193,    71,   382,    -1,   193,    72,
     382,    -1,   193,   134,    -1,   222,    -1,   195,   222,    -1,
     195,   382,    -1,    75,   382,    -1,   196,    -1,   197,   196,
      -1,    90,   128,   195,   129,   382,    -1,    90,   128,   249,
     129,   135,   197,   134,    -1,   249,   136,    90,   128,   249,
     129,   135,   197,   134,    -1,    91,   128,   249,   133,   195,
     129,    -1,   249,   136,    91,   128,   249,   133,   195,   129,
      -1,    91,   128,   249,   129,    -1,   249,   136,    91,   128,
     249,   129,    -1,    92,    -1,    92,   195,    -1,   230,   136,
      92,    -1,   249,   136,    92,   195,    -1,   203,   131,    -1,
     187,   131,    -1,   162,    -1,   191,    -1,   370,   162,    -1,
     370,   191,    -1,   194,    -1,    93,    -1,    95,    -1,    96,
      -1,   101,   128,   222,   129,   132,   347,   131,    -1,   131,
      -1,   370,   137,    -1,   370,   128,   222,   129,    -1,   163,
      -1,   305,    -1,   305,   292,    -1,   370,   305,   292,    -1,
     370,   305,    -1,   370,   181,    -1,   370,   178,    -1,   100,
     305,   292,    -1,   198,    -1,    94,   222,    -1,    94,   155,
      -1,    98,   222,    -1,   181,    -1,   178,    -1,   187,    -1,
     179,     1,    -1,   182,     1,    -1,   370,   163,    -1,   370,
     179,     1,    -1,   370,   182,     1,    -1,   188,    -1,   202,
      -1,   204,   202,    -1,   205,   202,    -1,   203,    -1,   204,
       1,    -1,   205,     1,    -1,   204,   203,    -1,   205,   203,
      -1,   305,    -1,   305,   335,    -1,   305,    -1,   305,   335,
      -1,    68,   222,    -1,    68,   222,   132,   207,    -1,    68,
     222,   137,   206,    -1,    68,   222,   137,   206,   132,   207,
      -1,    68,   154,    -1,    68,   154,   132,   207,    -1,    68,
     154,   137,   206,    -1,    68,   154,   137,   206,   132,   207,
      -1,   222,    -1,   222,    -1,   222,   132,   209,    -1,   239,
      -1,   305,   222,   132,   211,    -1,   305,   335,   222,   132,
     211,    -1,   208,    -1,   210,    -1,   212,    -1,   213,    -1,
     214,   133,   213,    -1,   211,    -1,   209,    -1,   207,    -1,
     222,   132,   211,    -1,   222,   132,   209,    -1,   222,   132,
     207,    -1,   215,    -1,   216,   133,   215,    -1,    68,    -1,
     217,   222,    -1,   217,   153,    -1,   222,   217,   222,    -1,
     222,   217,   153,    -1,   217,   222,   126,   214,   127,    -1,
     217,   153,   126,   214,   127,    -1,   222,   217,   222,   126,
     214,   127,    -1,   222,   217,   153,   126,   214,   127,    -1,
     221,   134,    -1,   220,   131,    -1,   218,   135,   134,    -1,
     220,   135,   134,    -1,   217,   222,   131,    -1,   217,   152,
     131,    -1,   218,   137,   309,    -1,   218,   135,   205,    -1,
     220,   135,   205,    -1,   218,   135,   204,    -1,   220,   135,
     204,    -1,   218,   135,     1,    -1,   220,   135,     1,    -1,
       3,    -1,   226,    -1,   128,   251,   129,    -1,   393,    -1,
     138,   393,    -1,   138,   393,   136,   393,    -1,     4,    -1,
     222,    -1,   181,    -1,    87,   128,   382,   129,    -1,    87,
     128,   251,   129,    -1,    87,   128,   354,   129,   344,    -1,
      87,   128,   354,   129,   128,   354,   129,   344,    -1,   225,
     222,    -1,   225,    -1,   224,    -1,   120,    -1,   128,   129,
      -1,    73,   312,   336,   139,   271,   140,    -1,    73,   312,
     336,   139,   272,   140,    -1,    73,   312,   139,   271,   140,
      -1,    73,   312,   139,   272,   140,    -1,   104,   312,   336,
     139,   271,   140,    -1,   104,   312,   336,   139,   272,   140,
      -1,   104,   312,   139,   271,   140,    -1,   104,   312,   139,
     272,   140,    -1,    74,   271,   311,   336,   139,   271,   140,
      -1,    74,   271,   311,   336,   139,   272,   140,    -1,    74,
     271,   311,   139,   271,   140,    -1,    74,   271,   311,   139,
     272,   140,    -1,   105,   271,   311,   336,   139,   271,   140,
      -1,   105,   271,   311,   336,   139,   272,   140,    -1,   105,
     271,   311,   139,   271,   140,    -1,   105,   271,   311,   139,
     272,   140,    -1,    68,   128,   304,   129,    -1,    68,   128,
     304,   335,   129,    -1,    68,   128,   222,   129,    -1,   106,
     128,   249,   133,   354,   129,    -1,   100,   128,   222,   129,
      -1,   405,    -1,   406,    -1,   407,    -1,   408,    -1,   139,
     231,   140,    -1,   139,   140,    -1,   183,    -1,   184,     1,
      -1,   128,   251,    -1,   128,   269,    -1,   223,    -1,   230,
     139,   251,   140,    -1,   230,   139,   269,   140,    -1,   230,
     128,   129,    -1,   230,   128,   231,   129,    -1,   230,   128,
     232,   129,    -1,   230,   136,   222,    -1,   230,     7,   222,
      -1,   230,     8,    -1,   230,     9,    -1,   253,   139,   251,
     140,    -1,   253,   139,   269,   140,    -1,   253,   128,   129,
      -1,   253,   128,   231,   129,    -1,   253,   136,   222,    -1,
     253,     7,   222,    -1,   253,     8,    -1,   253,     9,    -1,
     249,    -1,   227,    -1,   231,   133,   249,    -1,   231,   133,
     227,    -1,   268,    -1,   228,    -1,   231,   133,   268,    -1,
     231,   133,   228,    -1,   231,   133,    -1,     8,   234,    -1,
       9,   234,    -1,   235,   236,    -1,   235,   227,    -1,     6,
     234,    -1,     6,   128,   355,   129,    -1,     6,   128,    68,
     152,   129,    -1,     6,   128,    68,   151,   129,    -1,   111,
     234,    -1,   111,   128,   355,   129,    -1,   121,   128,   355,
     133,   222,   129,    -1,   233,    -1,   230,    -1,   141,    -1,
     125,    -1,   142,    -1,   143,    -1,   130,    -1,   144,    -1,
      75,    -1,    86,    -1,   234,    -1,   128,   354,   129,   345,
      -1,   128,   354,   129,   236,    -1,   236,    -1,   237,   125,
     236,    -1,   237,   145,   236,    -1,   237,   146,   236,    -1,
     257,   125,   236,    -1,   257,   145,   236,    -1,   257,   146,
     236,    -1,   237,    -1,   238,   142,   237,    -1,   238,   143,
     237,    -1,   258,   142,   237,    -1,   258,   143,   237,    -1,
     238,    -1,   239,    10,   238,    -1,   239,    11,   238,    -1,
     259,    10,   238,    -1,   259,    11,   238,    -1,   241,   126,
      -1,   239,    -1,   240,   239,    -1,   241,   127,   239,    -1,
     241,    12,   239,    -1,   241,    13,   239,    -1,   260,   126,
     239,    -1,   260,   127,   239,    -1,   260,    12,   239,    -1,
     260,    13,   239,    -1,   241,    -1,   242,    14,   241,    -1,
     242,    15,   241,    -1,   261,    14,   241,    -1,   261,    15,
     241,    -1,   242,    14,   227,    -1,   242,    15,   227,    -1,
     261,    14,   227,    -1,   261,    15,   227,    -1,   242,    -1,
     243,   141,   242,    -1,   262,   141,   242,    -1,   243,   141,
     227,    -1,   262,   141,   227,    -1,   243,    -1,   244,   147,
     243,    -1,   263,   147,   243,    -1,   244,   147,   227,    -1,
     263,   147,   227,    -1,   244,    -1,   245,   148,   244,    -1,
     264,   148,   244,    -1,   245,   148,   227,    -1,   264,   148,
     227,    -1,   245,    -1,   246,    16,   245,    -1,   265,    16,
     245,    -1,   246,    -1,   247,    17,   246,    -1,   266,    17,
     246,    -1,   247,    -1,   247,   149,   251,   137,   248,    -1,
     247,   149,   269,   137,   248,    -1,   266,   149,   251,   137,
     248,    -1,   266,   149,   269,   137,   248,    -1,   247,   149,
     252,   137,   248,    -1,   247,   149,   270,   137,   248,    -1,
     266,   149,   252,   137,   248,    -1,   266,   149,   270,   137,
     248,    -1,   247,   149,   251,   137,   227,    -1,   247,   149,
     269,   137,   227,    -1,   266,   149,   251,   137,   227,    -1,
     266,   149,   269,   137,   227,    -1,   247,   149,   252,   137,
     227,    -1,   247,   149,   270,   137,   227,    -1,   266,   149,
     252,   137,   227,    -1,   266,   149,   270,   137,   227,    -1,
     248,    -1,   234,   250,   249,    -1,   255,   250,   249,    -1,
     248,   250,   249,    -1,   267,   250,   249,    -1,   234,   250,
     227,    -1,   255,   250,   227,    -1,   248,   250,   227,    -1,
     267,   250,   227,    -1,   132,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      25,    -1,    26,    -1,    27,    -1,   249,    -1,   251,   133,
     249,    -1,   269,   133,   249,    -1,   269,   129,    -1,   227,
      -1,   251,   133,   227,    -1,   269,   133,   227,    -1,   229,
      -1,     1,    -1,   230,     1,    -1,   182,     1,    -1,   230,
       7,     1,    -1,   253,     7,     1,    -1,   230,   128,   231,
      -1,   230,   128,   232,    -1,   230,   136,     1,    -1,   253,
     128,   232,    -1,   253,   136,     1,    -1,     8,   255,    -1,
       9,   255,    -1,   235,   256,    -1,   235,   228,    -1,     6,
     255,    -1,     6,   128,   355,   129,     1,    -1,     6,   128,
      68,   152,   129,     1,    -1,     6,   128,    68,   151,   129,
       1,    -1,   111,   255,    -1,   111,   128,   355,   129,     1,
      -1,   254,    -1,   253,    -1,   255,    -1,   128,   354,   129,
     256,    -1,   256,    -1,   237,   125,   256,    -1,   237,   145,
     256,    -1,   237,   146,   256,    -1,   257,   125,   256,    -1,
     257,   145,   256,    -1,   257,   146,   256,    -1,   257,    -1,
     238,   142,   257,    -1,   238,   143,   257,    -1,   258,   142,
     257,    -1,   258,   143,   257,    -1,   258,    -1,   239,    10,
     258,    -1,   239,    11,   258,    -1,   259,    10,   258,    -1,
     259,    11,   258,    -1,   259,    -1,   240,   259,    -1,   241,
     127,   259,    -1,   241,    12,   259,    -1,   241,    13,   259,
      -1,   260,   126,   259,    -1,   260,   127,   259,    -1,   260,
      12,   259,    -1,   260,    13,   259,    -1,   260,    -1,   242,
      14,   260,    -1,   242,    15,   260,    -1,   261,    14,   260,
      -1,   261,    15,   260,    -1,   242,    14,   228,    -1,   242,
      15,   228,    -1,   261,    14,   228,    -1,   261,    15,   228,
      -1,   261,    -1,   243,   141,   261,    -1,   262,   141,   261,
      -1,   243,   141,   228,    -1,   262,   141,   228,    -1,   262,
      -1,   244,   147,   262,    -1,   263,   147,   262,    -1,   244,
     147,   228,    -1,   263,   147,   228,    -1,   263,    -1,   245,
     148,   263,    -1,   264,   148,   263,    -1,   245,   148,   228,
      -1,   264,   148,   228,    -1,   264,    -1,   246,    16,   264,
      -1,   265,    16,   264,    -1,   265,    -1,   247,    17,   265,
      -1,   266,    17,   265,    -1,   266,    -1,   247,   149,   251,
     137,   266,    -1,   247,   149,   269,   137,   266,    -1,   266,
     149,   251,   137,   266,    -1,   266,   149,   269,   137,   266,
      -1,   247,   149,   251,   137,    -1,   247,   149,   269,   137,
      -1,   266,   149,   251,   137,    -1,   266,   149,   269,   137,
      -1,   247,   149,   252,   137,   266,    -1,   247,   149,   270,
     137,   266,    -1,   266,   149,   252,   137,   266,    -1,   266,
     149,   270,   137,   266,    -1,   247,   149,   252,   137,    -1,
     247,   149,   270,   137,    -1,   266,   149,   252,   137,    -1,
     266,   149,   270,   137,    -1,   247,   149,   251,   137,   228,
      -1,   247,   149,   269,   137,   228,    -1,   266,   149,   251,
     137,   228,    -1,   266,   149,   269,   137,   228,    -1,   247,
     149,   252,   137,   228,    -1,   247,   149,   270,   137,   228,
      -1,   266,   149,   252,   137,   228,    -1,   266,   149,   270,
     137,   228,    -1,   247,   149,   137,    -1,   266,   149,   137,
      -1,   247,   149,    -1,   266,   149,    -1,   267,    -1,   234,
     250,   268,    -1,   255,   250,   268,    -1,   234,   250,   228,
      -1,   255,   250,   228,    -1,   268,    -1,   249,     1,    -1,
     251,   133,   268,    -1,   269,   133,   268,    -1,   251,   251,
      -1,   269,   251,    -1,   251,   269,    -1,   228,    -1,   227,
       1,    -1,   251,   133,   228,    -1,   269,   133,   228,    -1,
     248,    -1,   267,    -1,    29,    -1,    30,    -1,    31,    -1,
     119,    -1,    32,    -1,    33,    -1,   118,    -1,    29,    -1,
      30,    -1,    31,    -1,   119,    -1,    32,    -1,    33,    -1,
     118,    -1,   222,    -1,   222,   132,   271,    -1,   222,   132,
     272,    -1,   222,   331,    -1,   222,   331,   132,   271,    -1,
     222,   331,   132,   272,    -1,   275,    -1,   276,   133,   275,
      -1,   276,   133,    -1,    53,    -1,   277,   222,    -1,   277,
     155,    -1,   280,   134,    -1,   277,   222,   135,   134,    -1,
     277,   155,   135,   134,    -1,   277,   135,   276,    -1,   277,
     135,     1,    -1,   277,   222,   135,   276,    -1,   277,   222,
     135,   276,     1,    -1,   277,   222,   135,     1,    -1,   277,
     222,   135,   276,   131,   204,    -1,   277,   222,   135,   276,
     131,   205,    -1,   277,   155,   135,   276,    -1,   277,   155,
     135,   276,     1,    -1,   277,   155,   135,     1,    -1,   277,
     155,   135,   276,   131,   204,    -1,   277,   155,   135,   276,
     131,   205,    -1,   277,   222,   135,   276,   131,    -1,   277,
     155,   135,   276,   131,    -1,   277,   222,    -1,   277,   155,
      -1,   283,   134,    -1,   281,   137,   309,   135,   134,    -1,
     281,   135,   134,    -1,   281,   137,   309,   135,   276,    -1,
     281,   137,   309,   135,   276,     1,    -1,   281,   137,   309,
     135,     1,    -1,   281,   137,   309,   135,   276,   131,   204,
      -1,   281,   137,   309,   135,   276,   131,   205,    -1,   281,
     137,   309,   135,   276,     1,   131,   204,    -1,   281,   137,
     309,   135,   276,     1,   131,   205,    -1,   281,   137,   309,
     135,     1,   131,   204,    -1,   281,   137,   309,   135,     1,
     131,   205,    -1,   277,   135,   276,    -1,   277,   135,     1,
      -1,   277,   137,   309,   135,   276,    -1,   277,   137,   309,
     135,     1,    -1,   281,   135,   276,    -1,   281,   135,   276,
       1,    -1,   281,   135,     1,    -1,   281,   135,   276,   131,
     204,    -1,   281,   135,   276,   131,   205,    -1,   281,   137,
     309,   135,   276,   131,    -1,   281,   137,   309,   135,   276,
       1,   131,    -1,   281,   137,   309,   135,     1,   131,    -1,
     281,   135,   276,   131,    -1,   282,    -1,   299,    -1,   283,
      -1,   300,    -1,   325,    -1,    47,    -1,    48,    -1,   286,
      -1,   287,    -1,   288,   287,    -1,    49,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,
      40,    -1,    41,    -1,    50,    -1,    42,    -1,    45,    -1,
      46,    -1,    43,    -1,    44,    -1,    87,    -1,   296,    -1,
     278,    -1,   152,    -1,    89,   128,   249,   129,    -1,   102,
     128,   152,   129,    -1,   102,   128,   222,   129,    -1,    69,
      -1,    84,    -1,    85,    -1,   115,    -1,   114,    -1,   116,
      -1,   117,    -1,    49,    -1,    34,    -1,    35,    -1,    36,
      -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,    41,
      -1,    50,    -1,    42,    -1,    45,    -1,    46,    -1,    43,
      -1,    44,    -1,    87,    -1,   296,    -1,   278,    -1,   155,
      -1,   115,    -1,   114,    -1,   116,    -1,   117,    -1,    89,
     128,   249,   129,    -1,   102,   128,   152,   129,    -1,   102,
     128,   222,   129,    -1,    69,    -1,   343,    -1,   343,   330,
      -1,   137,   271,    -1,   343,   137,   271,    -1,   343,   137,
     271,   137,   271,    -1,   137,   272,    -1,   343,   137,   272,
      -1,   343,   137,   271,   137,   272,    -1,   343,   137,   272,
     137,   272,    -1,   343,   137,   272,   137,   271,    -1,   291,
      -1,   292,   133,   291,    -1,   301,   222,    -1,   301,   153,
      -1,   301,   325,   222,    -1,   301,   325,   153,    -1,   295,
     134,    -1,   293,   135,   134,    -1,   301,   135,   134,    -1,
     301,   325,   135,   134,    -1,   293,   135,   204,    -1,   293,
     135,   205,    -1,   293,   135,     1,    -1,   301,   135,   204,
      -1,   301,   135,   205,    -1,   301,   135,     1,    -1,   301,
     325,   135,   204,    -1,   301,   325,   135,   205,    -1,   301,
     325,   135,     1,    -1,   293,    -1,   293,    -1,   293,   126,
     214,   127,    -1,   297,   137,   309,    -1,   300,   134,    -1,
     298,   135,   134,    -1,   297,   135,   134,    -1,   301,   135,
     134,    -1,   298,   135,   204,    -1,   298,   135,   205,    -1,
     298,   135,     1,    -1,   297,   135,   204,    -1,   297,   135,
     205,    -1,   297,   135,     1,    -1,   301,   135,   204,    -1,
     301,   135,   205,    -1,   301,   135,     1,    -1,    51,    -1,
      52,    -1,   287,    -1,   302,   287,    -1,   289,    -1,   302,
     289,    -1,   279,    -1,   302,   279,    -1,   294,    -1,   302,
     294,    -1,   287,    -1,   303,   287,    -1,   289,    -1,   303,
     289,    -1,   151,    -1,   303,   151,    -1,   279,    -1,   303,
     279,    -1,   294,    -1,   303,   294,    -1,   273,    -1,   304,
     273,    -1,   287,    -1,   304,   287,    -1,   290,    -1,   304,
     290,    -1,   279,    -1,   304,   279,    -1,   294,    -1,   304,
     294,    -1,   273,    -1,   305,   273,    -1,   287,    -1,   305,
     287,    -1,   289,    -1,   305,   289,    -1,   151,    -1,   305,
     151,    -1,   294,    -1,   305,   294,    -1,   279,    -1,   305,
     279,    -1,   274,    -1,   306,   274,    -1,   287,    -1,   306,
     287,    -1,   289,    -1,   306,   289,    -1,   151,    -1,   306,
     151,    -1,   284,    -1,   306,   284,    -1,   285,    -1,   306,
     285,    -1,    83,    -1,    82,    -1,   273,    -1,   308,   273,
      -1,   287,    -1,   308,   287,    -1,   290,    -1,   308,   290,
      -1,   222,    -1,   308,   222,    -1,   222,   126,   216,   127,
      -1,   308,   222,   126,   216,   127,    -1,   308,    -1,   301,
      -1,   273,    -1,   310,   273,    -1,   287,    -1,   310,   287,
      -1,   290,    -1,   310,   290,    -1,   222,    -1,   310,   222,
      -1,   222,   126,   216,   127,    -1,   310,   222,   126,   216,
     127,    -1,   273,    -1,   311,   273,    -1,   287,    -1,   311,
     287,    -1,   290,    -1,   311,   290,    -1,   294,    -1,   311,
     294,    -1,   279,    -1,   311,   279,    -1,   222,    -1,   311,
     222,    -1,   222,   126,   216,   127,    -1,   311,   222,   126,
     216,   127,    -1,   273,    -1,   312,   273,    -1,   287,    -1,
     312,   287,    -1,   290,    -1,   312,   290,    -1,   294,    -1,
     312,   294,    -1,   279,    -1,   312,   279,    -1,   222,    -1,
     312,   222,    -1,   222,   126,   216,   127,    -1,   312,   222,
     126,   216,   127,    -1,   314,   133,     1,    -1,   313,   133,
       1,    -1,   222,    -1,   314,   133,   222,    -1,   313,   133,
     222,    -1,   358,   133,   222,    -1,   359,   133,   222,    -1,
     316,    -1,   153,    -1,    37,    -1,   153,   139,   271,   140,
      -1,   153,   139,   272,   140,    -1,   153,   139,   152,   140,
      -1,   153,   139,   140,    -1,   315,   139,   271,   140,    -1,
     315,   139,   272,   140,    -1,   315,   139,   152,   140,    -1,
     315,   139,   140,    -1,   222,    -1,   128,   337,   129,    -1,
     128,   325,   337,   129,    -1,   128,   338,   129,    -1,   128,
     325,   338,   129,    -1,   316,   139,   271,   140,    -1,   316,
     139,   272,   140,    -1,   316,   139,   152,   140,    -1,   316,
     139,   140,    -1,   316,   128,    -1,   317,   360,   129,    -1,
     317,   361,   129,    -1,   317,   314,   129,    -1,   317,   313,
     129,    -1,   317,   129,    -1,   317,   313,    -1,   317,     1,
      -1,   317,   358,   128,    -1,   317,   305,   222,   128,    -1,
     318,    -1,   316,    -1,   315,   128,    -1,   321,   360,   129,
      -1,   321,   361,   129,    -1,   321,   314,   129,    -1,   321,
     313,   129,    -1,   321,   129,    -1,   321,   313,    -1,   321,
       1,    -1,   321,   358,   128,    -1,   321,   305,   222,   128,
      -1,   322,    -1,   315,    -1,    76,    -1,    77,    -1,   325,
      77,    -1,   325,    76,    -1,   330,    -1,   331,    -1,    88,
     128,   393,   129,    -1,   124,   128,   271,   129,    -1,    81,
      -1,   112,    -1,   113,    -1,     3,    -1,    28,    -1,    77,
      -1,    76,    -1,    47,    -1,   327,    -1,   327,   128,   251,
     129,    -1,   328,    -1,   329,   328,    -1,   329,   133,   328,
      -1,   326,   128,   128,   329,   129,   129,    -1,   326,   128,
     128,   129,   129,    -1,   330,    -1,   331,   330,    -1,   128,
     335,   129,    -1,   128,   325,   335,   129,    -1,   139,   140,
      -1,   139,   271,   140,    -1,   139,   272,   140,    -1,   139,
     152,   140,    -1,   332,   139,   140,    -1,   332,   139,   271,
     140,    -1,   332,   139,   152,   140,    -1,   332,   139,   272,
     140,    -1,   128,   129,    -1,   128,   360,   129,    -1,   128,
     361,   129,    -1,   332,   128,   129,    -1,   332,   128,   360,
     129,    -1,   332,   128,   361,   129,    -1,   128,   336,   129,
      -1,   128,   325,   336,   129,    -1,   128,   129,    -1,   128,
     360,   129,    -1,   128,   361,   129,    -1,   333,   128,   129,
      -1,   333,   128,   360,   129,    -1,   333,   128,   361,   129,
      -1,   125,    -1,   125,   288,    -1,   125,   334,    -1,   125,
     288,   334,    -1,   334,    -1,   332,    -1,   334,   332,    -1,
     325,   334,    -1,   325,   334,   332,    -1,   334,    -1,   333,
      -1,   334,   333,    -1,   325,   334,    -1,   325,   334,   333,
      -1,   320,    -1,   334,   320,    -1,   325,   334,   320,    -1,
     337,   325,    -1,   343,   325,    -1,   324,    -1,   334,   324,
      -1,   325,   334,   324,    -1,   338,   325,    -1,   318,    -1,
     334,   318,    -1,   325,   334,   318,    -1,   334,   325,   318,
      -1,   319,    -1,   334,   319,    -1,   325,   334,   319,    -1,
     334,   325,   319,    -1,   322,    -1,   334,   322,    -1,   325,
     334,   322,    -1,   334,   325,   322,    -1,   323,    -1,   334,
     323,    -1,   325,   334,   323,    -1,   334,   325,   323,    -1,
     315,    -1,   334,   315,    -1,   325,   334,   315,    -1,   334,
     325,   315,    -1,   249,    -1,   135,   349,   134,    -1,   135,
     349,   133,   134,    -1,   135,   349,   134,    -1,   135,   349,
     133,   134,    -1,   268,    -1,   135,   349,   134,     1,    -1,
     135,   349,    -1,   135,   349,   133,   134,     1,    -1,   135,
     349,   133,    -1,   248,    -1,   227,    -1,   267,    -1,   228,
      -1,   344,    -1,   346,    -1,   349,   133,   344,    -1,   349,
     133,   346,    -1,   349,   344,    -1,   349,   346,    -1,   337,
      -1,   338,    -1,   337,   132,   344,    -1,   337,     1,    -1,
     337,   132,   346,    -1,   350,    -1,   352,   133,   350,    -1,
      37,   133,   350,    -1,    38,   133,   350,    -1,    39,   133,
     350,    -1,    40,   133,   350,    -1,    41,   133,   350,    -1,
     153,   133,   350,    -1,   353,   133,   350,    -1,   351,    -1,
     350,     1,    -1,   352,   133,   351,    -1,   353,   133,   351,
      -1,   302,    -1,   302,   335,    -1,   303,    -1,   303,   335,
      -1,   305,   338,    -1,   305,   335,    -1,   305,   141,    -1,
     305,   141,   338,    -1,   305,    -1,    68,    -1,   305,   338,
       1,    -1,   305,   335,     1,    -1,   356,    -1,   358,   133,
     356,    -1,   358,     1,   133,   356,    -1,   359,   133,   356,
      -1,   359,     1,   133,   356,    -1,     1,   133,   356,    -1,
     314,   133,   356,    -1,   314,     1,   133,   356,    -1,   313,
     133,   356,    -1,   313,     1,   133,   356,    -1,   357,    -1,
     358,   133,   357,    -1,   359,   133,   357,    -1,   359,     1,
     133,   357,    -1,     1,   133,   357,    -1,   314,   133,   357,
      -1,   313,   133,   357,    -1,   313,     1,   133,   357,    -1,
     358,    -1,   358,   133,    54,    -1,   359,   133,    54,    -1,
     314,   133,    54,    -1,   313,   133,    54,    -1,     1,   133,
      54,    -1,   359,    -1,   358,   133,     1,    -1,   359,     1,
      -1,   367,    -1,   330,    -1,   382,    -1,   131,    -1,   137,
      -1,   251,   131,    -1,   385,    -1,   387,    -1,   389,    -1,
     366,    -1,   201,   131,    -1,   200,   131,    -1,   199,   131,
      -1,   368,    -1,   388,    -1,   383,    -1,   386,    -1,   390,
      -1,   389,     1,    -1,   269,    -1,   393,    -1,   393,   128,
     249,   129,    -1,   139,   222,   140,   393,   128,   249,   129,
      -1,   364,    -1,   365,   133,   364,    -1,    -1,    88,   287,
     128,   393,   129,   131,    -1,    88,   287,   128,   393,   137,
     365,   129,   131,    -1,    88,   287,   128,   393,   137,   365,
     137,   365,   129,   131,    -1,    88,   287,   128,   393,   137,
     365,   137,   365,   137,   365,   129,   131,    -1,    88,   287,
     128,   393,     3,   365,   129,   131,    -1,    88,   287,   128,
     393,     3,   365,   137,   365,   129,   131,    -1,    88,   287,
     128,   393,   137,   365,     3,   365,   129,   131,    -1,    88,
     128,   393,   129,   131,    -1,    88,   128,   393,   137,   365,
     129,   131,    -1,    88,   128,   393,   137,   365,   137,   365,
     129,   131,    -1,    88,   128,   393,   137,   365,   137,   365,
     137,   365,   129,   131,    -1,    88,   128,   393,     3,   365,
     129,   131,    -1,    88,   128,   393,     3,   365,   137,   365,
     129,   131,    -1,    88,   128,   393,   137,   365,     3,   365,
     129,   131,    -1,   222,   137,   362,    -1,    55,   271,   137,
     362,    -1,    55,   272,   137,   362,    -1,    55,   137,   362,
      -1,    56,   137,   362,    -1,   222,   137,   371,    -1,    55,
     271,   137,   371,    -1,    55,   272,   137,   371,    -1,    55,
     137,   371,    -1,    56,   137,   371,    -1,   222,   137,   363,
      -1,    55,   271,   137,   363,    -1,    55,   272,   137,   363,
      -1,    55,   137,   363,    -1,    55,   137,    -1,    56,   137,
     363,    -1,    56,   137,    -1,   222,   137,   374,    -1,    55,
     271,   137,   374,    -1,    55,   272,   137,   374,    -1,    55,
     137,   374,    -1,    56,   137,   374,    -1,    82,    -1,    83,
      -1,    56,    -1,    82,    -1,    83,    -1,   304,   131,    -1,
     304,   352,   131,    -1,   176,   131,    -1,   374,   131,    -1,
     123,   128,   251,   129,    -1,   123,   128,   251,   133,   393,
     129,    -1,   122,    -1,   306,   131,    -1,   306,   352,   131,
      -1,   307,   352,   131,    -1,   180,   131,    -1,    79,   222,
     132,   248,   131,    -1,    31,    79,   222,   132,   248,   131,
      -1,   306,     1,    -1,   304,     1,    -1,   374,     1,    -1,
     177,     1,    -1,   176,     1,    -1,   304,   353,    -1,   371,
      -1,   375,   371,    -1,   376,   371,    -1,   375,     1,   131,
      -1,   374,    -1,   375,   374,    -1,   362,    -1,   377,   362,
      -1,   378,   362,    -1,   363,    -1,   377,   363,    -1,   378,
     363,    -1,   377,   371,    -1,   378,   371,    -1,   377,   374,
      -1,   378,   374,    -1,   377,    -1,   375,    -1,   375,   377,
      -1,   376,   377,    -1,   378,    -1,   376,    -1,   375,   378,
      -1,   376,   378,    -1,   135,    -1,   383,   134,    -1,   381,
     380,    -1,   381,    -1,   381,   379,    -1,   131,    -1,   251,
     131,    -1,   269,   131,    -1,    57,   128,   251,   129,   362,
      -1,    57,   128,   269,   129,   362,    -1,    57,   128,   251,
     129,   362,    67,   362,    -1,    57,   128,   269,   129,   362,
      67,   362,    -1,    58,   128,   251,   129,   362,    -1,    58,
     128,   269,   129,   362,    -1,    57,   128,   269,    -1,   385,
       1,    -1,    59,   128,   251,   129,   362,    -1,    59,   128,
     269,   362,    -1,    59,   128,   129,   362,    -1,    60,   362,
      59,   128,   251,   129,   131,    -1,    60,   362,    59,   128,
     269,   131,    -1,    61,   128,   384,   384,   129,   362,    -1,
      61,   128,   384,   129,   362,    -1,    61,   128,   384,   384,
     251,   129,   362,    -1,    61,   128,   384,   384,   269,   362,
      -1,    61,   128,   129,   362,    -1,    61,   128,   222,   137,
     251,   129,   362,    -1,    61,   128,   222,   137,   251,   131,
     251,   129,   362,    -1,    61,   128,     1,    -1,    61,   128,
     269,     1,    -1,    61,   128,   384,     1,    -1,    61,   128,
     384,   269,     1,    -1,    61,   128,   384,   384,   269,    -1,
      61,   128,   384,   384,   129,   363,    -1,    61,   128,   384,
     384,   251,   129,   363,    -1,    61,   128,   384,   384,   269,
     363,    -1,    60,   362,    59,   128,   251,   129,    -1,    60,
     362,    59,   128,   251,    -1,    60,   362,    59,   128,   269,
      -1,    60,   362,    59,   128,    -1,    60,   362,    59,    -1,
      60,   362,    -1,    60,    -1,    59,     1,    -1,    59,   128,
     129,     1,    -1,    59,   128,   269,    -1,    59,   128,   251,
     129,   363,    -1,    59,   128,   269,   363,    -1,    62,   222,
     131,    -1,    63,   131,    -1,    64,   131,    -1,    65,   131,
      -1,    65,   251,   131,    -1,    65,   269,   131,    -1,    65,
     227,   131,    -1,    65,   228,   131,    -1,    65,   269,    -1,
      65,   228,    -1,    65,    -1,    62,    -1,   306,   339,   375,
     382,    -1,   306,   339,   382,    -1,   306,   341,   375,   382,
      -1,   306,   341,   382,    -1,   339,   375,   382,    -1,   339,
     382,    -1,   306,   339,   375,   383,    -1,   306,   339,   383,
      -1,   306,   341,   375,   383,    -1,   306,   341,   383,    -1,
     339,   375,   383,    -1,   339,   383,    -1,     5,    -1,   393,
       5,    -1,   391,    -1,   219,    -1,   306,   219,    -1,   372,
      -1,    78,   393,    -1,    78,    31,   393,    -1,    78,   222,
     393,    -1,   131,    -1,   369,   391,    -1,   369,   219,    -1,
     369,   372,    -1,   369,    78,   393,    -1,   369,    78,    31,
     393,    -1,   369,    78,   222,   393,    -1,   369,   137,    -1,
      31,   137,    -1,   103,   222,    -1,   103,   155,    -1,   399,
      -1,   369,   399,    -1,   122,    -1,   123,   128,   251,   129,
      -1,   123,   128,   251,   133,   393,   129,    -1,   221,    -1,
     306,   221,    -1,   392,    -1,   369,   221,    -1,   369,   392,
      -1,   373,    -1,   369,   373,    -1,   395,    -1,   397,   395,
      -1,   396,   395,    -1,   397,     1,    -1,   396,     1,    -1,
     394,    -1,   397,   394,    -1,   396,   219,    -1,   396,   369,
     219,    -1,   397,    -1,   396,    -1,    -1,   107,   393,   222,
     135,   404,   134,    -1,   107,   393,   155,   135,   404,   134,
      -1,   107,   393,   135,   404,   134,    -1,   305,   222,   393,
     131,    -1,   222,    -1,   127,   222,    -1,   126,   222,    -1,
     401,    -1,   402,   133,   401,    -1,   109,   402,   131,    -1,
     109,   402,   222,   131,    -1,   400,    -1,   403,    -1,   404,
     400,    -1,   404,   403,    -1,   110,   128,   249,   133,   249,
     129,    -1,   108,   128,   393,   133,   222,   129,    -1,   109,
     128,   393,   133,   222,   129,    -1,   107,   128,   393,   129,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   288,   288,   307,   346,   347,   427,   431,   434,   435,
     436,   475,   477,   482,   487,   492,   494,   499,   501,   506,
     508,   513,   515,   517,   519,   521,   525,   529,   542,   544,
     546,   548,   550,   556,   558,   563,   568,   573,   575,   577,
     582,   583,   587,   588,   599,   603,   604,   606,   611,   612,
     614,   617,   629,   640,   659,   661,   666,   667,   668,   669,
     670,   671,   672,   673,   686,   690,   691,   692,   693,   697,
     698,   699,   700,   701,   702,   703,   707,   709,   714,   716,
     718,   720,   722,   752,   754,   759,   761,   763,   765,   767,
     796,   798,   800,   805,   807,   812,   814,   818,   820,   822,
     824,   829,   832,   835,   838,   903,   905,   910,   912,   914,
     916,   918,   949,   953,   954,   955,   959,   960,   961,   965,
     966,   967,   968,   972,   975,   978,   981,   984,   989,   990,
     992,   994,   996,   998,  1003,  1007,  1010,  1013,  1016,  1019,
    1024,  1025,  1027,  1032,  1036,  1038,  1043,  1045,  1050,  1052,
    1057,  1062,  1064,  1069,  1071,  1073,  1075,  1080,  1082,  1084,
    1086,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
    1100,  1101,  1103,  1104,  1106,  1110,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1128,  1129,  1133,  1134,  1135,  1139,  1143,  1144,  1145,  1149,
    1150,  1151,  1152,  1153,  1157,  1158,  1170,  1171,  1175,  1176,
    1177,  1178,  1179,  1180,  1181,  1182,  1186,  1190,  1191,  1195,
    1203,  1204,  1208,  1209,  1210,  1214,  1215,  1219,  1220,  1221,
    1222,  1223,  1224,  1264,  1265,  1269,  1277,  1278,  1286,  1287,
    1289,  1290,  1299,  1300,  1304,  1311,  1318,  1324,  1331,  1337,
    1346,  1353,  1359,  1365,  1371,  1377,  1383,  1394,  1399,  1400,
    1405,  1406,  1407,  1411,  1415,  1416,  1417,  1418,  1419,  1420,
    1421,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,
    1464,  1465,  1469,  1473,  1477,  1478,  1482,  1484,  1485,  1486,
    1487,  1488,  1489,  1490,  1491,  1492,  1494,  1495,  1496,  1497,
    1498,  1499,  1500,  1501,  1528,  1529,  1530,  1531,  1535,  1536,
    1537,  1538,  1539,  1543,  1544,  1545,  1546,  1548,  1549,  1550,
    1551,  1554,  1555,  1557,  1561,  1562,  1571,  1572,  1573,  1574,
    1575,  1576,  1577,  1578,  1582,  1583,  1584,  1588,  1589,  1590,
    1591,  1592,  1593,  1594,  1598,  1599,  1600,  1601,  1602,  1606,
    1607,  1608,  1609,  1610,  1614,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,  1629,  1630,  1634,  1635,  1636,  1637,  1638,  1640,
    1641,  1642,  1643,  1647,  1648,  1649,  1651,  1652,  1656,  1657,
    1658,  1660,  1661,  1665,  1666,  1667,  1669,  1670,  1674,  1675,
    1676,  1680,  1681,  1682,  1686,  1687,  1688,  1689,  1690,  1692,
    1693,  1694,  1695,  1697,  1698,  1699,  1700,  1702,  1703,  1704,
    1705,  1709,  1710,  1711,  1712,  1713,  1715,  1716,  1717,  1718,
    1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    1732,  1736,  1737,  1738,  1739,  1743,  1744,  1745,  1749,  1750,
    1751,  1752,  1754,  1755,  1757,  1758,  1763,  1765,  1770,  1798,
    1799,  1800,  1801,  1803,  1804,  1805,  1806,  1808,  1809,  1813,
    1814,  1823,  1824,  1828,  1829,  1830,  1831,  1832,  1833,  1834,
    1838,  1839,  1843,  1847,  1851,  1858,  1859,  1860,  1861,  1862,
    1866,  1867,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1920,
    1921,  1922,  1923,  1924,  1931,  1932,  1933,  1934,  1938,  1939,
    1940,  1942,  1943,  1947,  1948,  1949,  1951,  1952,  1956,  1957,
    1958,  1960,  1961,  1965,  1966,  1967,  1971,  1972,  1973,  1977,
    1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1987,  1988,
    1989,  1990,  1991,  1992,  1993,  1994,  1996,  1997,  1998,  1999,
    2001,  2002,  2003,  2004,  2006,  2014,  2018,  2023,  2030,  2031,
    2035,  2040,  2041,  2045,  2046,  2047,  2048,  2054,  2055,  2056,
    2060,  2061,  2062,  2063,  2067,  2069,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,  2083,  2084,  2085,  2086,  2087,  2088,  2089,
    2093,  2094,  2095,  2096,  2097,  2098,  2102,  2103,  2104,  2108,
    2112,  2113,  2117,  2118,  2119,  2125,  2126,  2128,  2129,  2130,
    2131,  2132,  2134,  2135,  2136,  2137,  2138,  2140,  2141,  2164,
    2165,  2169,  2170,  2171,  2175,  2176,  2177,  2178,  2179,  2180,
    2181,  2182,  2183,  2185,  2186,  2188,  2189,  2191,  2192,  2193,
    2194,  2195,  2197,  2198,  2199,  2200,  2204,  2205,  2209,  2210,
    2214,  2218,  2219,  2220,  2225,  2226,  2230,  2231,  2232,  2233,
    2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,
    2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
    2254,  2255,  2256,  2257,  2258,  2262,  2263,  2264,  2265,  2266,
    2267,  2268,  2269,  2270,  2271,  2272,  2273,  2274,  2275,  2276,
    2277,  2278,  2279,  2280,  2281,  2282,  2283,  2284,  2285,  2286,
    2287,  2288,  2294,  2296,  2298,  2300,  2302,  2304,  2306,  2308,
    2310,  2312,  2317,  2318,  2322,  2328,  2334,  2341,  2351,  2352,
    2353,  2354,  2358,  2359,  2360,  2362,  2363,  2364,  2366,  2367,
    2368,  2372,  2376,  2384,  2393,  2402,  2403,  2405,  2406,  2410,
    2417,  2424,  2427,  2443,  2457,  2460,  2462,  2464,  2469,  2470,
    2474,  2475,  2476,  2477,  2478,  2479,  2480,  2481,  2485,  2486,
    2487,  2488,  2489,  2490,  2491,  2492,  2493,  2494,  2498,  2499,
    2500,  2501,  2502,  2503,  2504,  2505,  2506,  2507,  2511,  2512,
    2513,  2514,  2515,  2516,  2517,  2518,  2519,  2520,  2521,  2522,
    2526,  2527,  2528,  2529,  2530,  2531,  2532,  2533,  2534,  2535,
    2539,  2540,  2544,  2545,  2546,  2547,  2548,  2549,  2550,  2551,
    2552,  2554,  2556,  2564,  2574,  2575,  2579,  2580,  2581,  2582,
    2583,  2584,  2585,  2586,  2587,  2595,  2604,  2605,  2606,  2607,
    2608,  2609,  2610,  2611,  2612,  2613,  2614,  2615,  2616,  2624,
    2633,  2634,  2635,  2636,  2637,  2638,  2639,  2640,  2641,  2642,
    2643,  2644,  2645,  2653,  2662,  2663,  2667,  2668,  2669,  2670,
    2671,  2675,  2676,  2683,  2685,  2694,  2703,  2712,  2721,  2722,
    2723,  2724,  2728,  2729,  2730,  2731,  2732,  2733,  2734,  2735,
    2736,  2740,  2744,  2745,  2746,  2747,  2748,  2753,  2762,  2771,
    2780,  2794,  2795,  2800,  2804,  2805,  2806,  2807,  2808,  2813,
    2822,  2831,  2840,  2854,  2855,  2904,  2905,  2907,  2918,  2929,
    2930,  2931,  2940,  2954,  2955,  2956,  2961,  2962,  2963,  2964,
    2965,  2969,  2970,  2974,  2975,  2976,  2980,  2981,  2985,  2986,
    2990,  2991,  2992,  2993,  2994,  2995,  2996,  2997,  2998,  2999,
    3000,  3001,  3002,  3003,  3004,  3005,  3009,  3010,  3011,  3012,
    3013,  3014,  3015,  3016,  3020,  3021,  3022,  3023,  3027,  3028,
    3029,  3030,  3031,  3035,  3036,  3037,  3038,  3039,  3043,  3044,
    3046,  3048,  3050,  3055,  3056,  3058,  3060,  3065,  3066,  3067,
    3068,  3072,  3073,  3074,  3075,  3079,  3080,  3081,  3082,  3086,
    3087,  3088,  3089,  3093,  3094,  3095,  3096,  3100,  3101,  3102,
    3119,  3120,  3137,  3138,  3139,  3140,  3153,  3170,  3171,  3176,
    3177,  3181,  3182,  3183,  3184,  3187,  3188,  3192,  3193,  3194,
    3198,  3202,  3206,  3207,  3208,  3209,  3210,  3211,  3212,  3213,
    3222,  3231,  3232,  3233,  3234,  3238,  3239,  3243,  3244,  3249,
    3250,  3251,  3252,  3253,  3254,  3273,  3274,  3278,  3279,  3280,
    3281,  3282,  3283,  3285,  3286,  3287,  3288,  3292,  3293,  3294,
    3295,  3296,  3298,  3299,  3300,  3304,  3305,  3306,  3307,  3308,
    3309,  3313,  3314,  3315,  3320,  3321,  3322,  3323,  3324,  3325,
    3326,  3327,  3328,  3329,  3330,  3331,  3332,  3336,  3337,  3338,
    3339,  3340,  3341,  3342,  3346,  3347,  3348,  3352,  3353,  3354,
    3358,  3359,  3360,  3361,  3363,  3364,  3365,  3367,  3368,  3369,
    3370,  3372,  3373,  3374,  3378,  3379,  3380,  3381,  3382,  3384,
    3385,  3386,  3387,  3388,  3392,  3393,  3394,  3395,  3396,  3397,
    3398,  3400,  3401,  3402,  3403,  3404,  3408,  3409,  3410,  3414,
    3415,  3419,  3420,  3421,  3422,  3423,  3424,  3425,  3429,  3430,
    3431,  3433,  3434,  3435,  3439,  3443,  3444,  3446,  3447,  3448,
    3452,  3453,  3454,  3455,  3459,  3460,  3464,  3465,  3466,  3470,
    3471,  3472,  3473,  3474,  3475,  3476,  3480,  3481,  3482,  3483,
    3487,  3488,  3489,  3490,  3494,  3498,  3502,  3504,  3507,  3513,
    3514,  3515,  3519,  3520,  3521,  3522,  3523,  3524,  3528,  3529,
    3533,  3534,  3535,  3537,  3538,  3540,  3541,  3542,  3543,  3544,
    3546,  3547,  3551,  3552,  3553,  3554,  3558,  3559,  3560,  3561,
    3563,  3564,  3565,  3566,  3567,  3568,  3569,  3572,  3576,  3577,
    3581,  3582,  3586,  3587,  3588,  3589,  3590,  3591,  3592,  3593,
    3597,  3598,  3599,  3600,  3606,  3607,  3609,  3610,  3613,  3614,
    3617,  3618,  3619,  3620,  3621,  3622,  3626,  3627,  3639,  3640,
    3643,  3646,  3648,  3649,  3650,  3660,  3662,  3663,  3665,  3666,
    3667,  3668,  3678,  3679,  3680,  3681,  3682,  3683,  3684,  3685,
    3686,  3690,  3691,  3700,  3702,  3703,  3705,  3707,  3711,  3712,
    3713,  3714,  3715,  3719,  3720,  3721,  3723,  3728,  3729,  3730,
    3734,  3735,  3736,  3740,  3744,  3745,  3746,  3750,  3751,  3755,
    3756,  3760,  3761,  3762,  3763,  3767,  3771,  3775,  3779
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "FLOAT16", "LONG",
  "SIGNED", "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID",
  "VALIST", "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF",
  "SWITCH", "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN",
  "IFX", "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP",
  "NEWOP", "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT",
  "DEFINE", "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT",
  "ANY_OBJECT", "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH",
  "STOPWATCHING", "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER",
  "CLASS_NO_EXPANSION", "CLASS_FIXED", "ISPROPSET",
  "CLASS_DEFAULT_PROPERTY", "PROPERTY_CATEGORY", "CLASS_DATA",
  "CLASS_PROPERTY", "SUBCLASS", "NAMESPACE", "NEW0OP", "RENEW0", "VAARG",
  "DBTABLE", "DBFIELD", "DBINDEX", "DATABASE_OPEN", "ALIGNOF",
  "ATTRIB_DEP", "__ATTRIB", "BOOL", "_BOOL", "_COMPLEX", "_IMAGINARY",
  "RESTRICT", "THREAD", "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF",
  "PRAGMA", "STATIC_ASSERT", "_ALIGNAS", "'*'", "'<'", "'>'", "'('", "')'",
  "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'", "'['",
  "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'", "'?'",
  "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    42,    60,    62,    40,    41,
     126,    59,    61,    44,   125,   123,    46,    58,    36,    91,
      93,    38,    43,    45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   150,   151,   151,   152,   152,   153,   154,   155,   155,
     155,   156,   156,   157,   158,   159,   159,   160,   160,   161,
     161,   162,   162,   162,   162,   162,   162,   162,   163,   163,
     163,   163,   163,   164,   164,   165,   166,   167,   167,   167,
     168,   168,   169,   169,   169,   170,   170,   170,   171,   171,
     171,   171,   171,   171,   172,   172,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   174,   174,   174,   174,   175,
     175,   175,   175,   175,   175,   175,   176,   176,   177,   177,
     177,   177,   177,   178,   178,   179,   179,   179,   179,   179,
     180,   180,   180,   181,   181,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   183,   183,   184,   184,   184,
     184,   184,   185,   186,   186,   186,   187,   187,   187,   188,
     188,   188,   188,   189,   189,   189,   189,   189,   190,   190,
     190,   190,   190,   190,   191,   192,   192,   192,   192,   192,
     193,   193,   193,   194,   195,   195,   196,   196,   197,   197,
     198,   199,   199,   200,   200,   200,   200,   201,   201,   201,
     201,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   204,   204,   204,   205,
     205,   205,   205,   205,   206,   206,   207,   207,   208,   208,
     208,   208,   208,   208,   208,   208,   209,   210,   210,   211,
     212,   212,   213,   213,   213,   214,   214,   215,   215,   215,
     215,   215,   215,   216,   216,   217,   218,   218,   218,   218,
     218,   218,   218,   218,   219,   219,   219,   219,   219,   219,
     220,   221,   221,   221,   221,   221,   221,   222,   223,   223,
     224,   224,   224,   225,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   227,   228,   229,   229,   230,   230,   230,   230,
     230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   230,   231,   231,   231,   231,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   233,   233,
     233,   233,   233,   233,   234,   234,   235,   235,   235,   235,
     235,   235,   235,   235,   236,   236,   236,   237,   237,   237,
     237,   237,   237,   237,   238,   238,   238,   238,   238,   239,
     239,   239,   239,   239,   240,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   243,   243,   243,   243,   243,   244,   244,
     244,   244,   244,   245,   245,   245,   245,   245,   246,   246,
     246,   247,   247,   247,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   249,   249,   249,   249,   249,   249,   249,   249,   249,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     250,   251,   251,   251,   251,   252,   252,   252,   253,   253,
     253,   253,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   254,   254,   254,   254,   254,   255,
     255,   256,   256,   257,   257,   257,   257,   257,   257,   257,
     258,   258,   258,   258,   258,   259,   259,   259,   259,   259,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   262,   262,
     262,   262,   262,   263,   263,   263,   263,   263,   264,   264,
     264,   264,   264,   265,   265,   265,   266,   266,   266,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   269,   269,   269,   269,   269,   269,   269,
     270,   270,   270,   270,   271,   272,   273,   273,   273,   273,
     273,   273,   273,   274,   274,   274,   274,   274,   274,   274,
     275,   275,   275,   275,   275,   275,   276,   276,   276,   277,
     278,   278,   279,   279,   279,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   281,
     281,   282,   282,   282,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   283,   284,   284,   285,   285,
     286,   287,   287,   287,   288,   288,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   290,   290,   290,   290,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     290,   290,   291,   291,   291,   291,   291,   291,   291,   291,
     291,   291,   292,   292,   293,   293,   293,   293,   294,   294,
     294,   294,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   296,   297,   297,   298,   299,   299,   299,   299,   300,
     300,   300,   300,   300,   300,   300,   300,   300,   301,   301,
     302,   302,   302,   302,   302,   302,   302,   302,   303,   303,
     303,   303,   303,   303,   303,   303,   303,   303,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
     306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     307,   307,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   309,   309,   310,   310,   310,   310,
     310,   310,   310,   310,   310,   310,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
     312,   312,   312,   312,   313,   313,   314,   314,   314,   314,
     314,   315,   315,   315,   315,   315,   315,   315,   315,   315,
     315,   315,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   317,   318,   318,   318,   318,   318,   319,   319,   319,
     319,   320,   320,   321,   322,   322,   322,   322,   322,   323,
     323,   323,   323,   324,   324,   325,   325,   325,   325,   325,
     325,   325,   325,   326,   326,   326,   327,   327,   327,   327,
     327,   328,   328,   329,   329,   329,   330,   330,   331,   331,
     332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
     332,   332,   332,   332,   332,   332,   333,   333,   333,   333,
     333,   333,   333,   333,   334,   334,   334,   334,   335,   335,
     335,   335,   335,   336,   336,   336,   336,   336,   337,   337,
     337,   337,   337,   338,   338,   338,   338,   339,   339,   339,
     339,   340,   340,   340,   340,   341,   341,   341,   341,   342,
     342,   342,   342,   343,   343,   343,   343,   344,   344,   344,
     345,   345,   346,   346,   346,   346,   346,   347,   347,   348,
     348,   349,   349,   349,   349,   349,   349,   350,   350,   350,
     351,   351,   352,   352,   352,   352,   352,   352,   352,   352,
     352,   353,   353,   353,   353,   354,   354,   355,   355,   356,
     356,   356,   356,   356,   356,   357,   357,   358,   358,   358,
     358,   358,   358,   358,   358,   358,   358,   359,   359,   359,
     359,   359,   359,   359,   359,   360,   360,   360,   360,   360,
     360,   361,   361,   361,   362,   362,   362,   362,   362,   362,
     362,   362,   362,   362,   362,   362,   362,   363,   363,   363,
     363,   363,   363,   363,   364,   364,   364,   365,   365,   365,
     366,   366,   366,   366,   366,   366,   366,   366,   366,   366,
     366,   366,   366,   366,   367,   367,   367,   367,   367,   367,
     367,   367,   367,   367,   368,   368,   368,   368,   368,   368,
     368,   368,   368,   368,   368,   368,   369,   369,   369,   370,
     370,   371,   371,   371,   371,   371,   371,   371,   372,   372,
     372,   372,   372,   372,   373,   374,   374,   374,   374,   374,
     375,   375,   375,   375,   376,   376,   377,   377,   377,   378,
     378,   378,   378,   378,   378,   378,   379,   379,   379,   379,
     380,   380,   380,   380,   381,   382,   383,   383,   383,   384,
     384,   384,   385,   385,   385,   385,   385,   385,   386,   386,
     387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
     387,   387,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   389,   389,   389,   389,   389,   389,   389,   389,
     390,   390,   390,   390,   391,   391,   391,   391,   391,   391,
     392,   392,   392,   392,   392,   392,   393,   393,   394,   394,
     394,   394,   394,   394,   394,   394,   394,   394,   394,   394,
     394,   394,   394,   394,   394,   394,   394,   394,   394,   394,
     394,   395,   395,   395,   395,   395,   395,   395,   396,   396,
     396,   396,   396,   397,   397,   397,   397,   398,   398,   398,
     399,   399,   399,   400,   401,   401,   401,   402,   402,   403,
     403,   404,   404,   404,   404,   405,   406,   407,   408
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     5,     5,     3,     4,     3,
       5,     5,     6,     7,     6,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     2,     2,     3,     5,     2,     3,     5,
       5,     5,     1,     3,     2,     2,     3,     3,     2,     3,
       3,     4,     3,     3,     3,     3,     3,     3,     4,     4,
       4,     1,     1,     4,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     3,     3,     1,     3,     3,     3,
       3,     1,     1,     1,     4,     4,     4,     3,     4,     4,
       4,     3,     1,     3,     4,     3,     4,     4,     4,     4,
       3,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     1,     1,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     2,     3,     6,     5,     1,     2,
       3,     4,     2,     3,     3,     3,     3,     4,     4,     4,
       2,     3,     3,     3,     4,     4,     3,     4,     2,     3,
       3,     3,     4,     4,     1,     2,     2,     3,     1,     1,
       2,     2,     3,     1,     1,     2,     2,     3,     1,     2,
       3,     2,     2,     1,     2,     3,     2,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     3,     4,
       3,     4,     1,     4,     2,     5,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     2,     2,     1,     1,     3,
       2,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     2,     3,     3,     1,     2,     1,     2,     2,
       2,     2,     3,     1,     1,     3,     3,     1,     3,     4,
       3,     4,     3,     3,     4,     3,     4,     1,     3,     3,
       4,     3,     3,     3,     4,     1,     3,     3,     3,     3,
       3,     1,     3,     2,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     1,     2,     1,     1,     4,     7,     1,     3,     0,
       6,     8,    10,    12,     8,    10,    10,     5,     7,     9,
      11,     7,     9,     9,     3,     4,     4,     3,     3,     3,
       4,     4,     3,     3,     3,     4,     4,     3,     2,     3,
       2,     3,     4,     4,     3,     3,     1,     1,     1,     1,
       1,     2,     3,     2,     2,     4,     6,     1,     2,     3,
       3,     2,     5,     6,     2,     2,     2,     2,     2,     2,
       1,     2,     2,     3,     1,     2,     1,     2,     2,     1,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     2,     2,     1,     2,     2,     1,     2,     1,
       2,     2,     5,     5,     7,     7,     5,     5,     3,     2,
       5,     4,     4,     7,     6,     6,     5,     7,     6,     4,
       7,     9,     3,     4,     4,     5,     5,     6,     7,     6,
       6,     5,     5,     4,     3,     2,     1,     2,     4,     3,
       5,     4,     3,     2,     2,     2,     3,     3,     3,     3,
       2,     2,     1,     1,     4,     3,     4,     3,     3,     2,
       4,     3,     4,     3,     3,     2,     1,     2,     1,     1,
       2,     1,     2,     3,     3,     1,     2,     2,     2,     3,
       4,     4,     2,     2,     2,     2,     1,     2,     1,     4,
       6,     1,     2,     1,     2,     2,     1,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     1,     1,     0,
       6,     6,     5,     4,     1,     2,     2,     1,     3,     3,
       4,     1,     1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1319,   257,     6,   593,   594,   595,   597,   598,   667,   668,
     669,   670,   671,   672,   673,   674,   676,   679,   680,   677,
     678,   661,   662,   666,   675,   768,   769,   609,  1158,   235,
     688,   925,   926,     0,     0,   933,  1156,  1157,   689,   690,
     681,     0,     0,     0,     0,     0,   934,   935,   692,   691,
     693,   694,   599,   596,  1298,     0,     0,   974,     0,  1285,
     816,   684,     8,     4,     0,     0,     0,  1279,     0,  1301,
     892,   810,     0,   683,     0,   656,   658,   818,   820,   663,
     812,   814,   751,   682,     0,     0,   657,   659,     0,     0,
       0,     0,     0,   997,   660,     0,   929,   930,     0,     0,
       0,  1281,  1306,  1278,  1303,  1313,  1308,     0,     0,     0,
    1296,     0,  1293,  1276,     0,     0,  1282,     0,     0,     0,
       0,  1295,  1294,     0,     0,     0,   664,   975,   660,   976,
     883,   882,   892,   924,   881,   911,   988,     0,   923,   993,
       0,     0,     0,     0,     0,     0,  1171,     0,   237,   236,
       0,     0,   245,     0,   244,     2,     3,     0,     5,     0,
       0,   611,   610,     0,     0,   631,     0,     0,     0,     0,
     755,     0,   735,   734,     0,  1174,   595,   670,   671,   672,
     673,   674,  1168,   817,     8,  1280,  1302,   892,   811,   819,
     821,   813,   815,   997,  1005,   660,     0,     0,  1038,     0,
       0,     0,  1051,     0,     0,   883,     0,     0,     0,     0,
     882,     0,     0,   901,     0,     0,   586,   587,   588,   590,
     591,  1064,   592,   589,   906,   804,   876,   798,     0,   808,
       0,   800,   802,   751,   806,     0,     0,  1063,     0,     0,
    1067,  1077,     0,     0,     0,     0,   928,   927,     0,     0,
     949,   998,     0,   696,   697,   698,   699,   700,   701,   702,
     703,   705,   708,   709,   706,   707,   695,   704,   721,   710,
       0,     0,   715,   714,   716,   717,  1167,     0,  1204,   713,
       0,     0,   788,   712,   794,   790,   792,   796,   711,     0,
    1180,     0,     0,     0,     0,  1269,  1275,   595,     0,  1292,
    1287,  1304,     0,  1288,  1307,  1286,  1305,  1297,  1312,  1315,
       0,     0,     0,     0,     0,  1310,  1311,  1314,  1309,     1,
       0,  1283,  1284,  1277,     0,     0,   459,   263,     0,     0,
       0,     0,     0,     0,   352,   353,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   273,     0,   347,     0,
     350,     0,     0,   346,   348,   349,   351,     0,   265,     0,
     264,   306,   272,   271,   258,   458,     0,   344,   354,     0,
     357,   364,   369,   375,     0,   384,   393,   398,   403,   408,
     411,   414,   431,     0,   480,   479,   481,   483,   490,   495,
     500,   509,   518,   523,   528,   533,   536,   539,     0,   260,
     296,   297,   298,   299,     0,     0,     0,     0,     0,   354,
       0,     0,   481,   568,   573,     0,   354,   414,   584,   481,
       0,     0,   665,   977,     0,   913,     0,   918,     0,     0,
       0,     0,   928,   927,     0,     0,     0,   924,   989,   994,
       0,   893,   991,   895,   996,   992,   681,     4,   229,   228,
     227,   233,     0,   264,   219,     0,   206,   249,     0,     0,
     248,   255,     0,     0,  1159,  1160,     0,   168,     0,   169,
     170,     0,     0,     0,     0,     0,   172,   246,     0,     0,
       0,     0,    29,    31,   163,   175,   188,     0,   187,     0,
     116,   119,     0,   195,   128,     0,   164,   140,     0,   167,
     183,   196,   199,     0,     0,   264,     0,     0,   176,     0,
    1001,   660,     0,    12,    18,     0,   823,   822,   830,   824,
       0,   826,   828,   751,   835,   834,   250,   256,   247,     0,
       0,   239,   238,   644,   600,   606,   643,     0,   649,   633,
       0,     0,     0,   222,   223,   224,   225,     0,   217,     0,
     764,   757,     0,     0,   754,   761,   756,     0,     0,   767,
     758,     0,     0,   737,   736,     0,     0,     0,     0,     0,
       0,     0,     0,   998,  1006,     0,  1040,     0,     0,  1265,
    1271,     0,  1267,  1273,  1052,  1169,     0,     0,     0,  1170,
     900,     0,   264,   585,     0,     0,     0,     0,   611,   610,
     612,     0,   738,     0,     0,   670,     0,     0,  1061,   805,
       8,   892,   799,   809,   801,   803,   807,   924,   881,   660,
     979,   978,     0,     0,     0,   905,     0,     0,   904,     0,
       0,     0,  1093,     0,   902,   903,   999,     0,  1000,     0,
       0,     0,  1178,  1163,  1177,    76,  1175,   699,   700,   701,
     702,   703,  1161,   892,   789,   795,   791,   793,   797,   660,
       0,  1179,  1176,  1164,     0,  1181,     0,  1268,  1274,  1182,
       0,     0,     0,     0,     0,     0,     0,     0,  1263,     0,
       0,     0,   710,     0,     0,     0,   157,  1097,  1098,   713,
       0,     0,     0,   264,     0,     0,     0,     0,  1095,  1186,
    1189,  1103,  1094,  1107,     0,     0,     0,     0,  1208,  1206,
    1096,  1109,     0,  1110,  1101,  1108,     0,  1111,  1205,     0,
       0,  1289,   892,     0,     0,     0,  1302,     0,   881,  1005,
     660,     0,     0,     0,     0,  1275,  1316,     0,     0,     0,
     931,     0,   337,   473,     0,   333,   469,   334,   470,     0,
     870,   860,   868,   862,   864,   866,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   341,   477,
       0,   274,     0,     0,   774,   770,   772,   776,  1055,     0,
     261,     0,   301,   302,     0,   325,     0,   324,     0,   461,
      93,     0,   270,   460,     0,   314,   315,     0,     0,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     440,     0,     0,   336,   472,   335,   471,     0,     0,     0,
       0,     0,     0,     0,   376,   501,     0,     0,   374,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   685,
       0,   322,   323,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   686,   687,     0,
       0,     0,  1331,  1332,     0,     0,     0,     0,   574,  1299,
       0,     0,     0,     0,   454,     0,     0,     0,     0,   932,
     887,     0,     0,     0,   891,     0,     0,     0,   917,   916,
     914,   915,   924,   989,   994,   894,   896,  1016,    10,     9,
       0,     0,     0,   660,   978,   207,     0,     0,   264,   206,
       0,     0,   842,   836,   838,   840,     0,     0,     0,    16,
      20,     0,   185,   184,   186,     0,     0,     0,     0,   347,
       0,   264,     0,    26,     0,    21,    28,    24,     0,    25,
      23,    22,    30,    32,   190,    83,   191,   122,   162,     0,
       0,     0,     0,   132,     0,     0,   134,     0,     0,   143,
     161,   200,   197,   202,   201,   198,   203,   115,     0,     0,
       0,   892,   732,   177,  1013,     0,  1009,   660,     0,    11,
      17,   722,   908,  1063,     0,     0,     0,  1002,     0,     0,
     173,   165,   192,   181,     0,   180,     0,   166,   892,   179,
       0,   611,   610,   831,   825,   827,   829,     0,     0,     0,
     948,   603,   608,     0,   648,     0,     0,     7,   212,   208,
     753,     0,     0,     0,     0,  1037,  1044,  1045,  1046,  1047,
    1048,  1049,    64,    53,    92,    39,    38,    57,    69,    45,
      48,     0,    74,    56,     0,     0,     0,  1028,  1030,     0,
    1027,  1029,     0,    41,    44,   924,   999,   990,  1007,   995,
    1016,  1008,     0,  1017,  1022,  1039,  1041,  1264,  1270,  1266,
    1272,  1043,  1053,  1050,  1054,   899,   897,   898,  1090,  1072,
    1081,   616,   615,     0,     0,   459,   739,     0,     0,   459,
     740,     0,     0,     0,   960,   892,     0,     0,   660,   978,
       0,     0,     0,   952,     0,     0,     0,     0,     0,  1062,
     981,     0,     0,   980,  1066,  1065,     0,   875,  1089,   878,
    1075,  1083,     0,   874,  1088,   877,  1073,  1082,     0,  1092,
    1086,   879,  1068,  1078,     0,  1087,   880,  1070,  1079,   936,
     937,   940,   939,   938,     0,   941,   943,     0,     0,     0,
       0,     0,    77,     0,  1162,  1183,     0,     0,     0,     0,
       0,     0,  1247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,  1095,  1245,  1100,  1102,     0,     0,
    1253,  1254,  1255,     0,  1261,     0,     0,     0,     0,     0,
       0,   158,   144,  1106,  1105,  1104,     0,     0,     0,  1099,
       0,   459,     0,     0,     0,     0,  1187,  1190,  1192,     0,
    1188,  1191,  1193,     0,  1219,  1112,  1290,  1291,   237,   236,
       0,     0,     0,  1006,     0,     0,  1271,     0,  1273,  1274,
       0,  1172,     0,   782,   264,   784,   778,   780,   786,  1057,
       0,     0,     0,     0,     0,     0,   871,   861,   869,   863,
     865,   867,   660,   984,   983,     0,   856,   846,   854,   848,
     850,   852,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,   775,
     771,   773,   777,  1056,     0,     0,   459,     0,     0,     0,
     105,     0,   300,   459,     0,     0,    94,   459,     0,     0,
     462,   313,   309,   329,   464,   465,   328,   466,   312,     0,
       0,   436,   432,   303,   358,   484,   359,   485,   360,   486,
     365,   491,   366,   492,   370,   496,   371,   497,   378,   503,
     379,   504,   377,   502,   389,   514,   385,   510,   390,   515,
     386,   511,   396,   521,   394,   519,   401,   526,   399,   524,
     406,   531,   404,   529,   409,   534,   412,   537,   564,     0,
     580,     0,     0,     0,     0,   438,   434,   463,   321,   318,
       0,   467,   468,   320,     0,     0,   437,   433,   361,   487,
     362,   488,   363,   489,   367,   493,   368,   494,   372,   498,
     373,   499,   382,   507,   383,   508,   380,   505,   381,   506,
     391,   516,   387,   512,   392,   517,   388,   513,   397,   522,
     395,   520,   402,   527,   400,   525,   407,   532,   405,   530,
     410,   535,   413,   538,   565,     0,     0,     0,     0,   439,
     435,     0,     0,  1324,  1327,     0,     0,  1322,  1333,  1334,
       0,     0,   571,   569,   452,   575,   260,   572,   570,   453,
     576,     0,     0,     0,     0,     0,     0,     0,     0,   886,
     884,   885,   890,   888,   889,   234,   232,   231,   230,   264,
     660,   981,   241,     0,   207,   240,   127,     0,   125,   843,
     837,   839,   841,     0,   660,     0,    15,    19,     0,   182,
    1013,   660,     0,   139,     0,   137,   843,     0,   264,   660,
       0,    27,    84,   117,   120,   118,   121,   129,   130,   131,
     133,   141,   142,   114,   112,   113,    13,   724,   727,     0,
       0,   920,  1063,     0,     0,     0,  1014,  1010,     0,     0,
     723,   892,   909,  1003,  1004,   892,   193,   194,   178,     0,
       0,     0,     0,   601,   602,     0,   607,   646,   645,     0,
       0,   636,   632,     0,     0,     0,     0,     0,   226,   218,
     216,     0,     0,     0,    36,    37,    75,    54,     0,    55,
       0,    63,    61,    72,    67,    73,    60,    90,    39,    70,
      62,    91,    59,    71,    68,     0,    58,     0,   699,    33,
      35,    34,  1031,  1032,     0,   624,   614,     0,   619,   613,
       0,   459,   741,     0,     0,     0,   978,     0,   950,   961,
     962,   955,   953,   954,     0,   982,   963,     0,     0,   956,
       0,     0,     0,  1076,  1084,  1063,  1074,  1069,  1071,  1080,
     947,     0,     0,     0,   944,   718,   719,   720,  1165,     0,
     459,     0,     0,  1137,  1147,  1142,     0,     0,     0,  1138,
    1149,  1143,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1244,  1232,     0,  1209,   264,     0,     0,     0,
    1252,  1258,  1259,  1256,  1257,     0,     0,     0,     0,   145,
    1134,  1144,  1139,     0,   159,     0,     0,     0,     0,  1007,
    1270,  1272,  1173,     0,     0,   783,   785,   779,   781,   787,
    1058,     0,   293,   291,     0,     0,   968,   660,     0,     0,
       0,     0,     0,     0,   986,     0,   985,     0,     0,     0,
     857,   847,   855,   849,   851,   853,     0,   267,     0,   266,
     295,     0,     0,     0,     0,     0,     0,  1338,     0,     0,
       0,     0,     0,     0,   356,   482,   355,   262,   108,   106,
     327,   326,    99,   103,   310,     0,   311,   307,   308,   581,
       0,     0,     0,     0,     0,     0,   319,   316,   317,     0,
       0,     0,     0,  1326,  1325,  1329,     0,     0,     0,  1321,
    1320,  1300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   978,   218,     0,     0,   123,   126,     0,     0,     0,
       0,     0,  1014,     0,   135,   138,     0,    14,   459,     0,
       0,   733,     0,   892,   921,  1015,  1011,  1012,   725,   728,
     910,   174,   832,     0,   243,   242,   604,   605,     0,   635,
       0,   213,   214,   204,   209,   210,   220,     0,     0,    51,
      46,    49,    52,    47,    50,    37,    43,    40,    42,     0,
       0,  1035,  1036,   623,     0,   618,     0,   981,   980,   951,
     964,   965,   958,   957,   959,  1060,  1059,     0,   946,   945,
     260,    79,  1135,  1145,  1140,     0,  1136,  1146,  1141,     0,
       0,     0,     0,     0,  1248,  1222,     0,     0,  1221,  1251,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1229,     0,  1210,  1233,  1211,  1234,     0,     0,     0,
    1119,   931,  1119,     0,     0,   155,     0,     0,     0,   160,
       0,     0,   474,   292,   872,     0,   983,     0,   966,   969,
     970,   277,   278,     0,   987,   971,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   331,   330,   456,   582,   423,   556,   415,   540,   427,
     560,   419,   548,   457,   583,   424,   557,   416,   541,   428,
     561,   420,   549,   425,   558,   417,   542,   429,   562,   421,
     550,   426,   559,   418,   543,   430,   563,   422,   551,  1328,
    1330,  1323,   844,     0,   124,   150,  1015,     0,   136,    86,
     922,     0,     0,   833,     0,     0,     0,     0,     0,     0,
     205,     0,   221,     0,     0,  1033,  1034,  1023,     0,     0,
       0,     0,   942,  1166,  1212,  1213,  1216,  1217,  1220,  1250,
       0,     0,     0,     0,     0,     0,     0,  1226,  1235,     0,
       0,     0,     0,  1117,     0,  1114,  1127,     0,  1119,     0,
    1119,     0,     0,     0,     0,   476,   475,   985,   967,   873,
     972,   973,   275,   276,   858,   285,   286,     0,     0,     0,
       0,   279,   280,   289,   290,     0,     0,   294,  1336,  1337,
    1335,   343,     0,  1020,   845,     0,   726,   729,   731,   730,
       0,     0,   215,   211,     0,  1018,  1025,     0,     0,     0,
       0,     0,     0,     0,  1240,  1224,     0,     0,  1225,  1237,
       0,  1228,  1239,     0,     0,     0,  1119,     0,  1119,     0,
    1119,     0,  1120,     0,     0,     0,   148,     0,   153,     0,
     156,     0,   859,   283,   284,     0,   287,   288,  1021,   171,
    1019,  1214,  1215,     0,     0,  1223,  1230,     0,  1227,  1238,
       0,  1131,  1118,     0,     0,     0,  1128,     0,     0,  1119,
    1119,     0,  1119,   147,   146,   151,   149,     0,     0,     0,
     356,   482,   269,     0,     0,     0,  1115,     0,     0,  1119,
    1124,     0,     0,  1121,     0,     0,   154,     0,  1231,     0,
    1132,  1133,  1129,     0,     0,     0,     0,  1119,   152,     0,
    1018,     0,     0,  1125,  1126,  1122,     0,  1019,  1116,  1130,
       0,  1123
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   225,    61,    62,  1028,   357,   478,   479,   480,   481,
     482,   483,   484,   485,  1045,  1046,  1047,  1048,  1049,  1050,
    1051,  1052,  1053,  1054,  1055,  1056,   280,   281,   486,   487,
      64,   358,   359,   783,   812,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,  2155,  2156,  2157,   500,   690,
     691,   692,   501,   502,   503,   504,  1852,   448,   543,   449,
     544,   450,   545,   546,   917,   451,   452,    65,    66,    67,
      68,    69,   360,   361,   362,   363,   364,  1057,  1058,   365,
     366,   786,  1315,   367,   409,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   410,
     866,   696,  1372,   384,   385,   412,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   413,   414,   415,
    1374,   421,   595,   227,    71,   535,   536,   228,    73,   229,
     230,    74,    75,    76,    77,    78,    79,   231,   127,   232,
     286,   982,   983,   233,   234,   235,    83,    84,    85,    86,
      87,   236,   778,  1249,   289,   508,    89,    90,   525,   526,
     927,  1272,   756,  1106,  1107,   133,    91,   509,    93,   510,
     136,   137,   138,   986,   139,   128,    95,  1155,  1156,  1157,
      96,    97,   620,  1263,   512,   622,  1265,   142,   198,   513,
     514,   200,   990,   144,  1602,  1766,  1603,  1063,  1064,  1604,
     201,   202,   203,   204,   779,  1250,   240,   241,   242,   243,
     244,   245,   699,   700,  2073,  2074,   701,   702,   703,   100,
     515,   290,   101,   102,   291,   292,   293,   706,   707,   708,
     709,   294,   710,   948,  1689,  1186,   713,   714,   715,  1187,
     717,   103,   104,   399,   105,   106,   107,   108,   109,   110,
     872,  1444,  1445,   873,   874,   400,   401,   402,   403
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1798
static const int yypact[] =
{
   40511, -1798, -1798, -1798, -1798,    54, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,   141,    80, -1798, -1798, -1798, -1798, -1798,
   -1798,   -54,    -6,   173,   155,   346, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798,   233,   240,  3172,  4281, -1798,
   -1798, -1798,   254, -1798,   283,   155,   787, -1798,    46,   420,
     769, -1798,   110, -1798,  1008, -1798,   447, -1798, -1798, -1798,
   -1798, -1798,   504, -1798,  1150,   386, -1798,   466,  2157, 40095,
    3735,   804, 40820, -1798,   325,   482, -1798,   720,  2434, 43712,
   11373, -1798, -1798, -1798, -1798, -1798, -1798, 40616, 39669,   618,
   -1798,    80, -1798, -1798,   346,   346,   658,   543,   346, 31335,
     155, -1798, -1798,   353, 31335, 31335, -1798,  3172,   362, -1798,
   -1798,   545, -1798,   837,   935, -1798, -1798, 40922, -1798, -1798,
    4507,  3330,  2934,  3157,  2389, 24408, -1798,   604,   257,   368,
   32483, 43217, -1798, 32615, -1798, -1798, -1798,   155, -1798,  1343,
   43217,  1366,  1379,   126, 43217, -1798, 42926, 32747, 43217, 32879,
   -1798, 33011, -1798, -1798,   988, -1798, -1798,    23,   559,   638,
     647,   654, -1798, -1798,   861, -1798,   420,   261, -1798, -1798,
   -1798, -1798, -1798,  1980,  2800,   325,  3330,  2736,  2389, 43712,
   43712,   212, -1798,  1347,   657,   671,   559,   638,   647,   654,
     746,   325,  1391, -1798, 29551,   681, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798,   747, -1798,   158, -1798,
     617, -1798, -1798,   696, -1798,   700,  2803, 10381,   298,   369,
   -1798, -1798,   378,   403,   724,   734, -1798, -1798,   293,   750,
   -1798, -1798,   574, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
     801,   806, -1798, -1798, -1798, -1798, -1798,   823, -1798, -1798,
      66,    84, -1798, -1798, -1798, -1798, -1798, -1798, -1798, 40303,
   -1798, 17899,  7087, 43927, 18044, -1798,   834,   901,   733, -1798,
   -1798,   420, 40199, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
     447,   466, 41432, 43712, 41737, -1798, -1798, -1798, -1798, -1798,
     857,   658,   658, -1798, 31335,   360, -1798, -1798, 31396, 31483,
   31483,   875, 43411, 31335, -1798, -1798,   918,   942, 43411, 31335,
     954,   979,   997,  1065,  1072, 31544, -1798,  1105, -1798, 24664,
   -1798,   346, 26749, -1798, -1798, -1798, -1798,   892, -1798,   129,
    1005, -1798, -1798,    80, -1798, -1798, 13133, -1798,  2380, 29612,
   -1798,  1012,  1066,  1529, 31335,   965,  1584,  1014,  1116,  1104,
    1244,    85,  2380,  1126,   435, -1798,  2380, -1798,  1036,  1466,
    1610,  1027,  1608,  1127,  1133,  1125,  1284,   109,  2380,   658,
   -1798, -1798, -1798, -1798,  1181,   319, 43023,  1172,  1180,  2380,
   13294, 26836,  2380,  2380, -1798, 26923, -1798,   148, -1798, -1798,
     204,  1228, -1798, -1798, 29699, -1798, 29760, -1798,   411,   427,
    1260,  1265,  1146,  1193,  3330,  3275,  3458,   837, -1798, -1798,
    1188, -1798,   362, -1798,   362,   362,   918,   892, -1798, -1798,
   -1798, -1798,   708,   788,  1529,  1610, 37867, -1798, 24536, 42926,
   -1798,   800, 42635, 41838, -1798, -1798,  1277, -1798,   155, -1798,
   -1798,    80, 42040, 41636,  6511, 43314, -1798, -1798,  1286,  1274,
    1274,   730, -1798,  1324, -1798, -1798, -1798,   175,   964,   179,
   -1798, -1798, 31815,  1337, -1798,  1289, -1798, -1798,   754, -1798,
   -1798, -1798,  1357, 31955, 32087,   742,   940,   435, 38907, 41024,
   -1798,   325,  2434, -1798, -1798, 38790, -1798, -1798,  1365, -1798,
     155, -1798, -1798, -1798,  2452, 43411, -1798,   800, -1798, 32219,
   32351,  1402,  1405, -1798,  1196, -1798,  1403,  1423, -1798, -1798,
    3513,  1437,   366, -1798, -1798, -1798, -1798,  1006,   643, 37867,
    1178, -1798, 33143, 33275, -1798,  1178, -1798, 33407, 33539,  1178,
   -1798, 33671, 33803, -1798, -1798,  4281,  4281,  4281,  4281,  4281,
    4281, 22536,   947,  1980,  2800,  1188, -1798, 29847,  7087, -1798,
     834,  7087, -1798,   834, -1798, -1798,  4281,  4281,   947, -1798,
   -1798,  1436,   349, -1798,  1460,  1464, 42732,  1522,  1456,  1477,
   -1798, 33935, -1798, 34067,   561, -1798, 11954, 29934,  4281, -1798,
    1318,   747, -1798, -1798, -1798, -1798, -1798,   837,  1476,   325,
    1003,    78,   208,  1302,  1484, -1798, 42344,  1492, -1798, 42441,
    1506, 42538,  1511, 42829, -1798, -1798, -1798,  1308, -1798, 31335,
     155, 31335, -1798, -1798,  1513, -1798, -1798,    23,   559,   638,
     647,   654, -1798,  1524, -1798, -1798, -1798, -1798, -1798,   325,
    1396,   657, -1798, -1798,  1534, -1798, 18189, -1798,   834, -1798,
     142, 29995,  1531,  1538,  1544,   146, 18334,  1551,    80,  1540,
    1545, 18479,   918,  3398,  1555,  1559,    80, -1798, -1798,   892,
    1547,  1561,  1562,  1410, 16444, 16594, 27010, 16739, 40407, -1798,
   -1798, -1798, -1798, -1798, 18624, 18769, 18914, 19059, -1798, -1798,
   -1798,   834, 19204, -1798, -1798, -1798, 19349, -1798, -1798,   346,
     346,   658,   827,   155,  1411,  1564, -1798,   837,   804, -1798,
     325,  3330, 43712, 43712,  7087, -1798, -1798, 41534, 31335,  1563,
   -1798, 24808, -1798, -1798, 30082, -1798, -1798, -1798, -1798, 43411,
    1569, -1798, -1798, -1798, -1798, -1798, 38218, 43411, 24952,    80,
   38335, 43411, 31335,   346,   346,   346, 31335, 24664, -1798, -1798,
   43503, -1798, 13444, 13594, -1798, -1798, -1798, -1798, 38675,  1571,
     105, 22680, -1798, -1798,   214, -1798,   280, -1798, 22824,  1570,
   -1798, 22968, -1798, -1798,  1548, -1798, -1798, 27071,  1554, 31335,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, 29612,   223, -1798, -1798, -1798, -1798, 31335, 31335, 31335,
   31335, 31335, 31335, 31335,  1529,  1610, 31335, 31335, -1798, 31335,
   29612, 29612, 29612, 29612, 29612, 31335, 31335, 13744, 29612, -1798,
    1560, -1798, -1798, 27158,  1567, 31335, 29612, 31335, 31335, 31335,
   31335, 31335, 31335, 31335, 31335, 31335, 31335, 31335, 29612, 29612,
   29612, 29612, 29612, 31335, 31335, 13894, 29612, -1798, -1798,   530,
     747, 43314, -1798, -1798, 39774, 43023, 43023, 29612, -1798, -1798,
   31335, 14044, 14194, 29612, -1798, 31335, 14344, 29612, 29612, -1798,
   -1798,  1556,  1557,  1566, -1798,  1572,  1575,  1580, -1798, -1798,
   -1798, -1798,   837, -1798, -1798, -1798, -1798,  1583, -1798, -1798,
   24408, 24408, 37750,   325,  1020, -1798,   774,  1057,  1113, 37867,
    1078,  1576,  1597, -1798, -1798, -1798,  2452, 37984, 41939, -1798,
   -1798,    80, -1798, -1798, -1798, 39024,  1589,    80, 38101,  3068,
   25080,  1550, 42141, -1798,  1594, -1798,   834, -1798,   834, -1798,
   -1798, -1798,   834, -1798,  1592, -1798,  1163, -1798, -1798,  2386,
    2386,  1274,  1274, -1798,  1274,   228, -1798,  1274,  1274, -1798,
   -1798,   810, -1798,  1357,   810, -1798,  1357,   899, 30169,  3074,
   31335,   952, -1798,  1596,   837, 41126, -1798,   325,  3330, -1798,
   -1798,   973,   681, 10381, 31675,   354,   293, -1798,   574,  4281,
   -1798, -1798, -1798, -1798,   250, -1798,   269, -1798,   742, 38907,
   24408, -1798, -1798,  1601, -1798, -1798, -1798, 42926, 42926, 31335,
   -1798,  1209,    80,  1568, -1798, 34199,   151, -1798,   595,   768,
   -1798, 42926,    80,   722,    80,  1633, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798,  1274, -1798, -1798, -1798, -1798,
   -1798, 10920,  1442, -1798, 23112, 43820, 23256, -1798, -1798, 12524,
   -1798, -1798, 42242, -1798, -1798,   837,  1980, -1798,  2800, -1798,
     837, -1798, 29847, -1798, -1798, -1798, -1798, -1798,   834, -1798,
     834, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798,  1403,   258,   323,  1598, -1798, 34331, 34463,  1600,
   -1798, 34595, 34727, 34859, -1798,   713,   363,   381,  1700,  2296,
    1573,  1602,  1607, -1798,  1590,  1603,  1609,   325,   947,  2389,
      78, 41228, 30256,  1003, -1798, -1798, 43120, -1798, -1798,   747,
   -1798, -1798, 43120, -1798, -1798,   747, -1798, -1798, 43120, -1798,
   -1798,   747, -1798, -1798, 43120, -1798,   747, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798,  1612,  1619, -1798,  1330,  1622,  1623,
     356, 27245, -1798, 23400, -1798, -1798, 19494,  1611,  1616, 19639,
   31335, 31335, -1798, 30317, 30404,  1617,  1627,  1635, 25458,  1636,
      80, 27332,  3480,  1447, -1798,  1642, -1798, -1798, 12187,  1638,
   -1798, -1798, -1798,  1639,  1640, 27419, 16884,   346,  1650, 31335,
   31335,    80, -1798, -1798, -1798, -1798, 22248,   714,  1429, -1798,
   31335,  1534, 19784, 19929, 20074, 20219, -1798, -1798, -1798, 20364,
   -1798, -1798, -1798, 20509, -1798, -1798,   658,   658,  1641,  1653,
   37499, 37630,   947, -1798,  1188,  7087, -1798,  7087, -1798, -1798,
    1649, -1798,   817, -1798,   742, -1798, -1798, -1798, -1798, 38675,
    1654,  1660, 43600, 24408, 40718, 31335,  1664, -1798, -1798, -1798,
   -1798, -1798,   325,  1663,  1667,  1658,  1666, -1798, -1798, -1798,
   -1798, -1798, 38452, 27480,  1669,  1670,  1671, 31335,  1665, 38569,
    1673,   461,    51,   107,  1676,  1674,  1678, -1798,    80, -1798,
   -1798, -1798, -1798, -1798, 30465,   346,   282, 39134, 23544,  1668,
   -1798, 29612, -1798,   285, 39241, 23688, -1798,   307, 39348, 23832,
   -1798, -1798, -1798, -1798,   966,  1687, -1798, -1798, -1798, 27567,
    5251, -1798, -1798,  1668, -1798, -1798, -1798, -1798, -1798, -1798,
    1012,  1036,  1012,  1036,  1066,  1466,  1066,  1466,  1529,  1610,
    1529,  1610,  1529,  1610, -1798, -1798,   965,  1027, -1798, -1798,
     965,  1027, -1798, -1798,  1584,  1608, -1798, -1798,  1014,  1127,
   -1798, -1798,  1116,  1133,  1104,  1125,  1244,  1284, -1798,    65,
   -1798, 27628,  1680,  8595,  1683, -1798, -1798, -1798, -1798, -1798,
    1035, -1798, -1798, -1798, 27715,  8980, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798,  1012,  1036,  1012,  1036,  1066,  1466,
    1066,  1466,  1529,  1610,  1529,  1610,  1529,  1610,  1529,  1610,
   -1798, -1798,   965,  1027, -1798, -1798,   965,  1027, -1798, -1798,
    1584,  1608, -1798, -1798,  1014,  1127, -1798, -1798,  1116,  1133,
    1104,  1125,  1244,  1284, -1798, 27776,  1685,  9216,  1686, -1798,
   -1798,    80,    80, -1798, -1798,   414,  1131, -1798, -1798, -1798,
   39881, 39988, -1798, -1798, -1798, -1798,   464, -1798, -1798, -1798,
   -1798, 27863,  1689, 25890,  1690, 27924,  1692, 25939,  1693, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,   886,
    2522,  1020, -1798, 24408,    80, -1798, -1798, 24408, -1798,   311,
   -1798, -1798, -1798,   382,   325,  3330, -1798, -1798,   473,  1596,
    1583,   325,  3330, -1798,  1702, -1798,   459,   387,  2842,  4507,
    1703, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,  2982, -1798, -1798, -1798, -1798, -1798, 23976,
    2540,   681, 10381, 22104,   614,   947,   837, -1798,  1188, 31335,
   -1798,   955, -1798, -1798, -1798,  1707,  1592,  1570,  1596,  1108,
   24408,  1151,  1171, -1798, -1798, 31335, -1798, -1798,  1403, 34991,
   35123,  1706, -1798,  4239, 43314, 43314, 43314, 43314, -1798, -1798,
   -1798, 31335,  1708, 30552, -1798,   834, -1798, -1798, 30639, -1798,
   30726, -1798, -1798, -1798,  1454,  1442, -1798, -1798,  1274, -1798,
   -1798, -1798, -1798, -1798,  1454,  1442, -1798, 30813, 11022, -1798,
   -1798, -1798, -1798, -1798, 20654, -1798, -1798,   172, -1798, -1798,
     242,  1715, -1798, 35255, 35387,   325,  2296,  1722, -1798, -1798,
   -1798, -1798, -1798, -1798,   947,  1003, -1798,  1723,  1725, -1798,
    1717,  1718,  1719, -1798, -1798, 10381, -1798, -1798, -1798, -1798,
   -1798, 31335,  1726,  1174, -1798, -1798, -1798, -1798, -1798, 31335,
     317, 39455, 24120, -1798, -1798, -1798, 20799, 22248, 22248, -1798,
   -1798, -1798, 20944, 28011, 17029, 28098, 28185, 25602, 28272, 17174,
   22392,  1727,  1728, 22392, 31335, 30900,  1807, 28359,  1640, 26083,
     346, 22392,  1740, 12760, 25458, -1798,  1451, 28446, 26132, 28507,
   -1798, -1798, -1798, -1798, -1798,    75,   346,  1741,  1050, -1798,
   -1798, -1798, -1798, 21089, -1798,  1743,  1745,    80, 42926, -1798,
   -1798, -1798, -1798,  1749,  1751, -1798, -1798, -1798, -1798, -1798,
   -1798, 14494, -1798, -1798,  1756,  1220, -1798,  3547,  1757,  1758,
    1759,  1729,  1750, 24408,  1667, 41330,  1663, 31335, 24408, 31335,
    1765, -1798, -1798, -1798, -1798, -1798,  1754, -1798, 30987, -1798,
   -1798,  1767,  1769, 31335, 31335,  1760, 43503, -1798,    80,    80,
   31335, 14644,    80, 29847, -1798, -1798, -1798,   658, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, 14794, -1798, -1798, -1798, -1798,
   29612, 14944, 15094, 29612, 15244, 15394, -1798, -1798, -1798, 15544,
   15694, 15844, 15994, -1798, -1798, -1798,   530,  1764,   474, -1798,
   -1798, -1798, 29612, 29612, 29612, 29612, 29612, 29612, 29612, 29612,
     325,  1020,  1885,  1270, 24408, -1798, -1798,  1762,   947,  1188,
    1274,   947,  1583,  1766, -1798, -1798,  1777, -1798,   333, 39562,
   24264, -1798,   325,   987, -1798,   837, -1798, -1798,  1779,  1780,
   -1798, -1798, -1798,  1275, -1798, -1798, -1798, -1798, 35519,  1783,
   35651, -1798,  1786, 37867, -1798,  1787, -1798, 31335, 29847,  3201,
   -1798, -1798,  3201, -1798, -1798, -1798,  3201, -1798, -1798, 21234,
   21379, -1798, -1798, -1798, 35783, -1798, 35915,    78,  1003, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798,  2389, 28594, -1798, -1798,
     611, -1798, -1798, -1798, -1798, 21524, -1798, -1798, -1798, 21669,
   25458, 25170, 25458, 25170, 12973, -1798, 25746, 17319, -1798, -1798,
   22392, 22392, 28681, 25458, 28768, 25314,  1792, 26276, 28855,   190,
   21814, -1798, 31335, -1798, 12973, -1798, 12760, 25458, 26325, 31074,
      71,  1790,    71,   196,  1788, -1798,    80, 31335, 31335,    80,
   16144, 16294, -1798, -1798, -1798,   325,  1667,  1796, -1798, -1798,
   -1798, -1798, -1798,  1305,  1663, -1798,  1800,  1801,  1791,  1793,
    1307,  1806,  1808, 24408, 31335, 24664, -1798, -1798, -1798,  1809,
    1810,  1811,  1812, 31335,  1803,  1818,  1824,  1825, -1798,  1835,
    5769, -1798, -1798, -1798, -1798, -1798, -1798, -1798,   204, -1798,
   -1798, -1798,   204, -1798, -1798, -1798, -1798, -1798,   204, -1798,
   -1798, -1798,   204, -1798, -1798, -1798,   204, -1798, -1798, -1798,
     204, -1798, -1798, -1798,   204, -1798, -1798, -1798,   204, -1798,
   -1798, -1798, -1798,  1331, -1798, -1798,  1583, 29612, -1798, -1798,
   -1798, 31335, 31335, -1798, 36047, 36179, 36311, 36443, 36575, 43314,
   -1798, 43314, -1798,  9816, 21959, -1798, -1798, -1798, 36707, 36839,
   36971, 37103, -1798, -1798,  1873,  1874, -1798, -1798, -1798, -1798,
   25458, 31335, 31161,  1790, 17464, 17609, 26469, -1798, 12973, 25746,
   28942, 17754,    80, -1798,  1091,   455, -1798,    90,    71,  1836,
      71,   633,   540,  1837,  1114, -1798, -1798,  1663, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798,  1341,  1828,  1829,
    1842, -1798, -1798, -1798, -1798,  1832,  1833, -1798, -1798, -1798,
   -1798, -1798, 29029, -1798, -1798,  1843, -1798, -1798, -1798, -1798,
   37235, 37367, -1798, -1798, 29116, -1798, -1798, 25458, 25458, 29203,
   26518, 25458, 29290, 25314,  1844, -1798, 25458, 31335, -1798, -1798,
   25746, -1798, -1798,  1838,  1852,    71,    71, 31335,    71,  1857,
      71,  1258, -1798,   113,  1274,   392, -1798,   651, -1798,  1854,
   -1798,    80, -1798, -1798, -1798, 31248, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,  1844, 25458, -1798, -1798, 29377, -1798, -1798,
     346, -1798, -1798,  1239,  1863,  1291, -1798,  1319,  1862,    71,
      71,  1882,    71, -1798, -1798, -1798, -1798,   633,   570, 29847,
   -1798, -1798, -1798, 25458,   573,  1883, -1798,  1884,  1886,    71,
   -1798,  1314,  1361, -1798,  1336,   659, -1798, 26662, -1798, 31335,
   -1798, -1798, -1798,  1382,  1887,  1888,  1889,    71, -1798, 29464,
   -1798,  1895,  1897, -1798, -1798, -1798,  1384, -1798, -1798, -1798,
    1898, -1798
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1798,   347,   -16, 10077, -1798,  2129, -1798, -1798, -1798, -1798,
   -1798, -1798,  1501,  1516,  -930, -1798, -1033, -1017,    14,    25,
   -1030,  -994,  -970, -1798,  -740,  -734, -1798, -1798,  1518,  1525,
   -1798,  4378,  4608, -1798,   203,   673,   677, -1798, -1798, -1798,
   -1798,  1528, -1798, -1798, -1798,  -669, -1797,  -153, -1798, -1798,
   -1798, -1798,   924,  1049,  -108,   -66,   478,  -812, -1798,  -884,
   -1798,  -901, -1798,  1015,  -159,  1137, -1009,   -45,  1747,    32,
    1752,   -58,     0, -1798,  1088, -1798, -1798,  5294,  7066, -1798,
    5612,  -466,  1212, -1798,  3887, -1798,  -175,   239,   548,   508,
   -1798,   641,   -86,   -85,   -52,   -82,    20,   153,  7902,  3361,
     957,  6153,   118,  1755, -1798,  5224,  -138,   560,   644,   862,
     675,   160,   191,   140,   194,   207,   195,  2852,  1279,  8092,
     263,  1468,  2115, 10596,   -77,  1040,  -133,  2639, 11180,  8803,
   -1798, -1798, -1798,   -92,   -73,   -49, -1798,  7253, -1798,   655,
    3123,   533,  -326,  4175,  9615, -1798, 11382, -1798, -1798, -1798,
     -43,  4796, -1798, -1798,  1892,  7227,   -32, -1798, -1798,   628,
    1593,  1304,  1732,   -87,   -84,  5757, 10005,  3946,  5724,  -480,
    -127,  -276,    42,  -915,   -62,  3362, -1798, -1798, -1137, -1798,
     669,  1533,  -619, -1253,  7888,  -199,  -741,   726,  1179,    28,
    1614,  -198,  -832,  -486,  -531, -1798,  -568,  -972,  -965, -1734,
    1276,  1042,     1,  1789,  -755,   278,  -441,  -426,  -505, -1798,
     -60,   -55, 10148,   136,   -61, -1757, -1798, -1798, -1798,  1973,
   -1798,  1814,  1983,   -65,  2088,  -105,  1794,   938,   941, -1798,
   -1798, -1798,   -81,   117, -1634,   -39, -1798, -1798, -1798,   -17,
   -1798,  1985,   -48,    64,  1978,  1543, -1798, -1798, -1798,  1987,
    -838,   294, -1798,  -803,   780, -1798, -1798, -1798, -1798
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1319
static const yytype_int16 yytable[] =
{
      70,  1549,  1123,  1274,   995,   238,  1524,   547,   239,  1076,
    1478,  1736,   188,  1525,   438,   310,   189,  1201,   295,  1278,
    1644,  1582,   991,  1592,  1584,   157,  1594,  1477,    99,  1980,
     540,   186,   997,   115,   117,   304,  1448,  1583,  1589,  1593,
     190,  1297,   301,  1918,   122,   529,  1075,  1298,  1304,   147,
     428,  1308,   306,   429,  1305,  1929,   323,  1309,   132,   552,
    1585,   557,  1595,   561,   311,   149,  1779,   642,   302,   438,
     158,  1449,   162,  1537,   118,   312,   113,   430,  1930,   439,
     323,     1,   431,     1,  1586,   644,  1596,   530,   173,   187,
     132,   212,   226,  2148,   578,   581,  1497,   116,   132,  1476,
      70,   553,   836,   558,   404,   562,     2,    70,    70,   123,
     323,   320,   323,     1,   733,   130,  2190,   199,   579,   582,
     405,   185,   119,   408,  2043,  1588,   864,   538,    99,     1,
     789,   194,   300,   111,   439,   313,    99,   226,     2,   309,
     132,   132,   157,   662,     1,   453,   113,  1172,  1569,   158,
     505,   518,  1561,   505,     1,  1089,   565,   532,     1,   534,
     518,     1,  -883,   534,   518,   836,   548,   505,   518,   505,
    1090,   505,   114,  1873,   564,  2077,   954,   152,   321,   322,
     956,   153,   325,     2,  1758,  1130,     2,   158,  1136,   704,
    1142,   112,  1147,  1930,   815,   323,   132,   643,   591,  2078,
    1131,   323,  -455,  1137,  1931,  1143,   606,  1148,   734,  1124,
    2072,   667,  1932,   584,   592,  1299,   296,   607,   645,  2149,
     310,   864,   310,  2145,  1323,   188,   158,  2150,   599,   189,
    1600,   816,   985,   113,   837,   188,   173,   611,   574,   189,
    1759,  1295,  2191,  1875,  1725,   159,  2145,   160,   132,   304,
    2192,  1546,   132,   190,   726,   712,   301,   915,   865,  1605,
     539,     1,  1498,   790,     1,  1592,   306,   723,  1594,   311,
    1547,   311,  1592,   663,  1173,  1594,  1592,   716,   417,  1594,
    1589,  1593,   737,  -109,  2062,  1562,  -100,  1589,  1593,   653,
     660,  1589,  1593,   597,   693,  1123,     1,   887,   720,   624,
     920,   120,   722,  1874,  1595,  1022,  -622,   903,  -104,   955,
     989,  1595,    70,   790,    70,  1595,   580,   583,   -82,  2063,
     420,  2151,     1,  2153,  1608,  2079,     1,  1932,  1596,    29,
     199,  1314,   750,  2080,   -89,  1596, -1060, -1060,   750,  1596,
     732, -1060,   313, -1042,   194, -1042,   736,    60,  1300,   592,
    1034,   113,     1,   888,   729,   630,     1,  1300,   323,     1,
    2196,   124,   721,   792,   624,   323,   351,  1588,   125,     1,
     627,     1,   904,  1876,  1588,  1022,  -617,  1380,  1588,   630,
     145,     2,   627,   458,   955,     1,   155,   156,    -8,  2183,
       1,  2185,  1606,  2187,  1027,     1,   571,   945,   947,   949,
     951,   246,   247,   790,   632,   158,   870,  1110,   891,   668,
     895,   711,   624,  1301,   146,   780,  -109,     1,  2196,  -100,
    1302,    58,   994,  1651,   592,   239,   592,   625,   627,  1652,
     735,   626,  2211,  2212,   132,  2214,   183,  1814,   246,   247,
     132,  -104,   840,   841,   842,  1067,  1815,    60,   868,   991,
      57,   -82,  2223,   158,    60,    60,   870,  1609,   918,   548,
     323,  1067,   922,   611,  1092,  2217,   323,   -89,   933,   323,
    2236,   934,   870,   922,   941,   870,     1,   417,  1813,   323,
    1534,  1954,  1542, -1085,   791,  1647,   417,   631,   406,   740,
    1123,   929,   417,  1097,   459,  1101,   626,  1077,   628,   460,
    1079,  1625,   629,   505,   505,   158,  1889, -1085,   981,   226,
    1069,   631,   132,  1728,   629,  1008,  1543,  1816,  1544,   420,
    1012,   169,  1825,   991,   173,  1013,  1069,   278,   420,   505,
     505,  1746, -1091,     1,   420,  1098,   633,  1102,  1755,   733,
     898,  1843,  1029,     1,   626,  1795,  1111,  1796,   158,  1033,
     729,  1112,   505,   505,   154,   784,   899,   505,   505,   439,
     629,   505,   505,   843,     1,   132,   132,   132,   132,   132,
     132,   844,   132,     1,   845,   132,  1601,     1,   323,  1293,
    1537,   165,  1478,  2147,   609,  1814,   132,   132,   132,     2,
    1757,  1114,   158,  1801,  1824,   946,   870,   534,   952,  1812,
     170,   505,  1820,   505,   564,  2021,  1105,   592,   132,  1499,
     249,   158,  1448,  1448,  1068,   630,   323,  1071,   319,  1592,
    1836,   132,  1594,  1837,  1159,  1867,  1129,  1235,  1237,  1135,
     166,  1141,  1868,  1146,  1589,  1593,     1,   246,   247,  -752,
    1160,  -752,  1324,  1326,  1328,   310,     1,  1449,  1449,   183,
     246,   247,   985,   454,     1,    81,  1441,  1442,  1595,   183,
     188,    60,     1,   323,   189,   712,   712,   712,   712,  2158,
    1856,  1476,  1388,  1390,  1392,   324,  1183,  1275,  1189,  1325,
    1327,  1329,  1596,  1548,   424,  1633,  1202,   716,   716,   716,
     716,  1636,   566,  2087,   311,  1078,  1103,  1637,  1080,  2216,
    1634,  2219,    58,  1638,   693,   693,   693,   693,  2154,  1389,
    1391,  1393,   985,  1110,  -876,  1317,     1,     1,  1639,   908,
    1484,  1588,   158,  1229,  1953,     1,  2154,  1564,  1493,  1960,
    1496,   132,  1565,   985,  2154,   457,     1,   611,   113,  1507,
    2053,  1244,  1834, -1085,   192,     1,  1354,   631,  1358,  1251,
       1,   600,  1851,  1364,  1854,    81,  1256,  1266,   592,  1276,
    1256,  1266,    81,    81,   719,   732,   250,  1244,   155,   156,
     870,   567,     1,  1233,  1420,  1032,  1424,     1,  1288,   729,
     568,  1430,  1362,  1226,  1227,  2195,   985,   569,   537,  1829,
     587,     1,   541,  2228,  1311,  1830,   554,  1592,  1318,  -216,
    1594,    35,  1027,   609,   565,  2023,  1704,  -459,  -459,  -459,
    1428,   989,  1589,  1593,   596,   197,   197,  -459,  -459,  -459,
       1,   711,   711,   711,   711,   967,   968,  1281,  1282,  1283,
       1,   601,    46,    47,   602,   909,  1595,    29,   155,   156,
    1378,   910,  1217,  1221,  1383,     2,  -876,   155,   156,  1236,
    1238,  1239,  1111,   634,  1571,   609,  1366,  1112,  1551,  1552,
    1596,   950,  1625,   635,  1599,   278,   435,   155,   156,  1443,
     158,  1446,   155,   156,   870,   870,   870,   791,   637,   570,
    1517,  1518,   824,  1519,  1432,   424,  1521,  1522,   969,     1,
    1558,   417,   615,  1563,   155,   156,   609,  -216,  1533,  1588,
    1566,   429,   749,  1836,  1837,  1567,  -460,  -460,  -460,  1617,
     453,  1479,   226,   155,   156,  -216,  1029,  1559,   158,  1033,
     911,  -216,   150,   791,   151,   430,   173,  1489,   611,   639,
     431,  1202,   213,   420,   640,   611,  -459,  1504,  1506,  -459,
    1508,   977,   870,   214,  1456,   749,  -459,   794,   795,   796,
       1,   641,   155,   156,  2097,     1,  2042,   192,     1,  1560,
    1607,  1610,   571,   698,  1574,   425,   454,   192,   718,    81,
     729,  -265,  -265,  -265,  1363,     2,   426,   826,   827,   132,
     111,   158,   438,  1436,   130,   226,  1947,   145,   132,   738,
       1,     1,  1355,  1541,   570,  1613,   132,  1878,   132,  1545,
     424,  1974,  1429,   749,   776,  1462,  1466,   455,   158,   981,
     453,   155,   156,  -216,   784,   197,     2,   548,   548,  -216,
    1421,   791,   534,   534,  1359,   505,   534,   788,   197,  1365,
    1233,   548,  1570,   158,  1572,  -460,  1872,  1614,  1939,   854,
     855,   784,  1075,  1367,   991,  1285,   758,   439,  1286,   784,
    1720,   729,  1425,  1724,    35,  2115,   439,  1431,  1069,  1330,
    1332,  1627,   132,   213,   246,   247,  1628,  -912,   797,   784,
     759,  1433,   978,  1871,   214,    58,   798,   155,   156,   799,
     155,   156,   762,  1840,   183,    46,    47,  1529,  1243,  1394,
    1396,   828,   829,   534,   534,  1774,  -265,   505,   505,  1775,
    -265,   505,   505,   505,   729,   158,  1630,   763,   132,   132,
    1539,   615,   155,   156,  1243,  2030,     1,  1243,   132,  1764,
     132,   226,   592,   529,  -216,   764,   870,   712,  1438,   158,
     712,  1121,   870,  1030,     1,   158,   113,   817,   870,  1031,
     791,   158,  1122,   163,   870,   164,   158,   944,   912,   716,
    1464,  1468,   716,   856,   857,   832,  1765,   818,   819,   607,
     158,   847,  1575,   615,  1786,   530,   693,   712,  1775,   693,
    -461,  -461,  -461,   712,   712,   712,   712,  1149,  1183,  1935,
    1189,   848,   849,  1936,  1482,  -459,  -459,  -459,  1686,   716,
    1031,     1,  1878,   765,  1729,   716,   716,   716,   716,  1730,
     766,  1699,  1150,  1020,   615,  1485,   693,  1318,   820,   821,
    2100,  1031,   693,   693,   693,   693,     2,  1966,   609,   985,
    2144,  1151,  -925,  -925,  2145,   130,  1714,  2122,  2146,  2123,
     505,   505,   132,   770,   132,  1842,   825,   143,   155,   156,
    -216,   910,   870,  2160,   158,  1483,  -216,  2161,   791,   870,
    1152,  1153,   834,   453,   226,   839,   155,   156,  1625,   985,
     835,  1695,   985,   833,   246,   247,   609,  2082,   860,  -926,
    -926,  -925,  1740,   862,  1709,   609,  1071,    35,  1844,  1740,
     861,  1617,   609,   711,  1031,   167,   711,   168,   158,   609,
      35,  1035,  1035,  1035,  1035,  1035,  1035,  1306,  1845,  -461,
     863,  2046,  1654,  1125,  1031,  1660,  -459,   875,    46,    47,
     867,  1149,   197,   197,  -459,   876,    58,  -459,  -926,   436,
     455,    46,    47,   711,  -882,   811,  -882,  -882,  1019,   711,
     711,   711,   711,  1149,  1338,  1340,  1150,  1342,  2045,   838,
     609,  1555,  1701,   846,   533,  1184,     1,  1944,  1217,  1221,
    1217,  1221,  1710,   910,  1711,  1151,   609,   889,  1150,  1767,
     961,   962,  1402,  1404,  1406,  1408,   877,    35,  2205,   883,
    1334,  1336,  2145,   698,   698,   698,   698,  1151,    31,    32,
    1331,  1333,   963,    35,  1152,  1153,   964,  2188,   965,   900,
      41,  2145,   192,  -882,   901,  2189,  1247,  2022,    46,    47,
    1398,  1400,  2033,   910,  -882,   931,  1152,  1153,   910,   278,
    1395,  1397,  1872,   776,    46,    47,   623,   943,   454,   454,
    2207,   278,  1247,   966,  2145,  1247,    56,   972,   975,  -882,
   -1059, -1059,  2089,  1291,  2094, -1059,  1885,  1154,   910,  -882,
     910,  1793,  1794,  2224,   145,  1797,   158,  2145,  2208,  1871,
     870,   870,  2145,   972,   975,   953,  2209,   424,  2114,  1642,
    -882,  -882,  -882,  1643,   910,  2226,  1335,  1337,  2162,  2145,
     960,  1346,  1350,  2227,   910,  1872,   972,   975,   585,   158,
     586,   972,   975,  1479,  1572,   972,   975,   453,   970,   903,
    2225,  1010,  2198,  1817,  2145,   132,  1399,  1401,  1699,  1412,
    1416,  -630,   132,  -630,   784,  1347,  1351,  1826,   158,   132,
    1798,  2232,  1871,  2240,  -629,  2145,  -629,  2145,   454,  1705,
    1706,  1707,   589,  1091,   586,     1,   615,  1164,  1017,   586,
     132,  1018,  1833,  1413,  1417,   132,  1022,  1233,   132,   822,
     823,   158,   985,   985,  2046,   791,  1230,  1206,   151,  1310,
     453,     1,   973,   976,   904,  1317,  2046,     1,  1023,   505,
     505,  1377,  1069,     1,   870,   870,   870,   870,  1382,  1557,
       1,     1,  1026,  1579,   615,  1580,  1085,  1709,   973,   976,
    1071,  2045,   791,   615,  1681,  1577,   791,  1578,  1922,  1713,
     615,  1093,  1860,  2045,  1863,   776,  1715,   615,   830,   831,
    1086,   973,   976,  1861,  1087,  1864,   973,   976,   850,   851,
     973,   976,  1094,   505,   505,   214,   132,  1126,   712,   712,
     852,   853,   858,   859,   132,  1132,  -892,  -892,  1082,  1084,
     712,  -892,  1513,  1515,  2202,   611,  1514,  1516,  -892,  1138,
     716,   716,  1212,  1214,  1144,  1213,  1215,  1162,   615,  1872,
     315,   318,   716,   143,  2040,  1450,  1451,   693,   693,  1163,
    1540,  2046,  -892,  -892,   615,  1165,  1170,  1183,  1169,   693,
    1183,  1190,  1171,  1183,  -892,  1956,  1191,  1686,  1203,  1188,
    1957,  1183,   594,  1199,  1183,   791,  1871,  1200,  1339,  1341,
     250,  1343,  1204,  1205,  1241,  1253,  1469,  1470,  2045,  1231,
    1294,  1682,  1618,     1,  1306,  1865,  1471,  1202,   548,    31,
      32,  1486,  1472,  1890,    35,  1473,  1403,  1405,  1407,  1409,
    1474,    41,   426,  1487,  1503,  1511,  1512,  1550,     2,  1530,
    1621,  1619,  -744,   453,  -747,   226,  1620,   130,   453,  2025,
    2034,  1640,  2037,  1622,  1919,    46,    47,  1641,  1657,  1623,
    1067,  1645,  1646,  1658,  1673,  1674,  1288,    56,  1975,  1976,
    1933,   454,  1979,  1675,  1677,  1573,  2048,  1708,  2050,  1690,
    1691,  1692,   455,   455,   711,   711,   432,   433,  1696,   459,
    1712,    35,  2035,  1721,  2038,   143,   711,  1119,    41,  1722,
    1733,  1735,  1738,  1893,  1897,  1254,  1443,  1737,  1748,  1749,
    1750,   757,  1769,  1761,  1753,  1909,  1756,   761,  2049,  1760,
    2051,  1762,    46,    47,   453,  1069,  1776,  1782,   132,   132,
    1785,   132,  1790,  1792,    56,    57,  1803,  1805,   606,  1807,
    1809,  1823,  1827,   158,   435,   698,  1841,  1848,   698,   607,
    1857,  1036,  1037,  1038,  1039,  1040,  1041,  1184,   505,  -750,
     505,  1879,  1880,   870,  1881,  1888,  1074,  1882,  1883,  1884,
    1709,  1071,  1081,  1083,  1910,  1911,  1916,   712,  1920,  1951,
    1934,  1937,   455,  1938,   505,   698,   505,   132,  1940,   609,
    1941,   698,   698,   698,   698,  1943,  1948,  1949,  1950,   716,
    1952,  1963,   892,  1964,   896,  2020,  -231,  2024,  2027,  1973,
    1183,  1183,  1183,  1183,  1718,   507,   693,  1967,   507,  1968,
    1183,  1183,  2028,  1183,  2036,  1183,  2031,  2032,  2039,  2041,
    2061,  2076,   507,  2081,   507,  2088,   507,  1183,  2120,  2090,
    2091,  2092,  2107,  2093,   417,   417,  1202,   417,   417,  1699,
    2127,  2128,   417,   417,   417,   417,  2095,  2108,  2096,  2101,
    2102,  2103,  2104,  2109,  2110,   417,   417,   417,   417,   417,
     417,   417,   417,   453,  2111,   592,  2159,  2152,  2163,  2164,
    2121,  2165,  2166,  2167,  2169,  2175,  1988,  1992,  2180,  1998,
    2002,  -911,   609,  2181,  2006,  2010,  2014,  2018,  2186,  2197,
    2200,   454,  2206,  2210,  2075,   454,  2075,   420,   420,   420,
     420,   420,   420,   420,   420,   784,   784,   784,   784,   784,
     784,   784,   784,  2213,  2220,  2221,  1001,  2222,  2233,  2234,
    2235,   972,   975,   711,  2238,   972,   975,  2201,  2239,  2241,
     712,  1002,   712,  1003,   505,   505,   505,   505,   505,   870,
    1004,   870,  2059,  1007,  2215,  1855,  1568,  1475,   505,   505,
     505,   505,   716,  1520,   716,  1381,  -911,  -911,   454,   724,
    1183,  -911,  1556,  1831,   725,  1279,   938,  1021,  -911,   693,
     760,   693,  2143,  2193,  2194,  1115,  1316,   930,   661,   454,
     314,  1202,  1699,   303,  2182,   305,   317,   307,   705,     0,
    2019,     0,  -911,  -911,     0,     0,     0,     0,     0,     0,
       0,   712,     0,     0,  -911,     0,   665,   669,     0,     0,
       0,  -911,  -911,  -911,     0,   455,     0,     0,     0,   143,
     505,   505,  1316,   716,     0,     0,     0,  1183,  1183,    63,
       0,  1183,     0,  1183,     0,     0,  1183,     0,     0,  1167,
     693,     0,  2075,     0,  2075,     0,   973,   976,     0,     0,
     973,   976,     0,     0,     0,  1699,  1453,  1202,   143,  1455,
       1,  1202,  1458,     0,  1460,     0,     0,     0,     0,     0,
       0,     0,   623,   121,  1183,     0,     0,     0,   143,     0,
     417,     0,     0,     0,     0,     2,   711,   615,   711,     0,
       0,     0,     0,     0,    63,     0,     0,  1202,  1699,     0,
     609,   161,     0,  1183,     0,  2139,     0,  2142,     0,  2075,
    2075,     0,  2075,     0,  2075,  1202,     0,     0,    63,     0,
       0,    63,   420,     0,     0,     0,     0,     0,   279,    63,
     784,     0,     0,    31,    32,   435,    63,    63,    35,     0,
       0,   454,     0,     0,  2204,    41,   454,     0,     0,    63,
       0,     0,   407,  2075,  2075,     0,  2075,   711,   507,   507,
       0,     0,     0,     0,     0,     0,    63,     0,     0,    46,
      47,     0,     0,  2075,   447,     0,  2179,     0,     0,   447,
     279,    56,   447,     0,   507,   507,     0,   436,     0,   279,
     615,  2075,   171,   279,     0,    63,   447,   279,   447,     1,
     447,     0,     0,     0,     0,     0,     0,   507,   507,     0,
       0,     0,   507,   507,     0,     0,   507,   507,     0,     0,
       0,     0,   454,     0,     2,     0,   698,   698,   279,   279,
       0,     0,     0,   130,     0,     0,  1184,     0,  1184,   698,
       0,     0,   698,   447,     0,   455,     0,     0,     0,   455,
     698,  1074,     0,  1184,     0,     0,   507,   598,   507,     0,
       0,     0,     0,     0,     0,   454,    63,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
     666,   670,     0,     0,    41,     0,     0,   326,     0,     1,
     327,   113,   665,     0,     0,   665,     0,     0,   800,   801,
     802,   803,   804,   805,   806,   807,   808,   809,    46,    47,
       0,   776,   455,     0,     2,     0,     0,     0,   279,     0,
      56,   279,   279,   689,   606,     0,     0,     0,     0,     0,
       0,    63,     0,   455,     0,   607,     0,     1,     0,     0,
       0,    63,   279,    63,     0,     0,     0,     0,  1527,     0,
       0,     0,     0,     0,   331,     1,     0,     0,     0,   332,
     333,   279,     0,  1062,     0,    31,    32,   279,     0,     0,
      35,   454,     0,   336,     0,     0,     0,    41,   447,     0,
       2,     0,     0,   972,   975,     0,   337,  1553,     0,  1455,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       0,    46,    47,     0,     0,     0,   346,     0,   615,     0,
      31,    32,   810,    56,   744,    35,     0,     0,   665,   669,
    1218,  1222,    41,     0,   351,   352,     0,     0,    31,    32,
       0,     0,     0,    35,     0,    63,     0,   972,   975,   893,
      41,   897,     0,     1,     0,     0,    46,    47,   665,     0,
       0,     0,     0,   447,     0,   447,     0,     0,    56,     0,
       0,     0,    58,     0,    46,    47,     0,     0,     2,  1184,
    1184,  1184,  1184,     0,     0,  1184,    56,   130,     0,   698,
     698,     0,  1184,     0,  1184,    63,     0,   447,    63,     0,
    1631,   279,    63,     0,     0,   455,  1184,   932,   432,   433,
     455,    63,   279,    35,    63,     0,     0,     0,   973,   976,
      41,     0,     0,     0,     0,     0,    31,    32,     0,     0,
     776,    35,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,   447,   447,    46,    47,     0,    63,    63,    72,
       0,  1252,  1671,     0,   447,     0,    56,    57,     0,  1011,
     912,     0,    46,    47,   279,     0,     0,     0,   447,   447,
       0,   607,   973,   976,    56,    57,   666,     0,    58,   666,
       0,     0,     0,  1062,     0,     0,   455,   980,    63,     0,
    1062,   447,   447,  1062,     0,     0,   447,   447,   436,     0,
     447,   447,     0,     0,     0,     0,     0,     0,     0,     0,
     689,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     279,   623,     0,     0,   507,   507,     0,     0,     0,   455,
       0,     0,  1116,  1731,     0,    63,     0,     0,    72,  1184,
     447,     0,   447,     0,     0,    63,   447,   576,  1184,    72,
    1184,     0,     0,     0,     0,  1751,    72,    72,     0,     0,
       0,     0,     0,     0,     0,    63,     0,     0,    63,     0,
      63,     0,    63,     0,     0,     0,     0,     0,     0,    63,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     507,     0,     0,     0,     0,     0,  1168,     0,     0,     0,
     520,     0,   666,   670,  1219,  1223,  1184,  1184,     0,   520,
    1184,  -923,  1184,   520,     0,  1184,     1,   520,     0,  1184,
       0,     0,    31,    32,  1886,     0,     0,    35,     0,     0,
       0,     0,   666,     0,    41,   455,     0,     0,     0,     0,
       0,     2,     0,   689,   689,   689,   689,     0,     0,     0,
       0,     0,     0,  1184,     0,     1,     0,     0,    46,    47,
       0,     0,   507,   507,     0,     0,   507,   507,   507,     0,
      56,   279,   279,   279,     0,     0,    63, -1037,   577, -1037,
     447,     0,  1184,     0,     0,     0,  -923,  -923,   279,    31,
      32,  -923,     0,  1074,    35,   279,   279,   447,  -923,   279,
     279,    41,     0,     0,     0,     0,   447,     0,     0,    63,
       0,     0,     0,     0,     0,     0,     0,    63,     0,     0,
     689,     0,  -923,  -923,     0,    46,    47,   689,  -892,  -892,
     689,     0,     0,  -892,  -923,     0,     0,    56,  1455,     0,
    -892,  -923,     0,  -923,     0,     0,     0,     0,   603,     0,
       0,    72,     0,     0,     0,     0,  1062,  1062,  1062,     0,
       0,    72,     0,    72,  -892,  -892,     0,     0,   972,   975,
       0,   972,   975,     0,     0,     0,  -892,     0,     0,     0,
       0,   398,   972,   975,   972,   975,     0,   791,     0,     0,
    1655,     0,     0,  1661,     0,   507,   507,     0,     0,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
      63,     0,     0,    63,    63,    63,     0,  1838,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
    1702,     0,    41,  1846,     0,     0,  1218,  1222,  1218,  1222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   447,
     447,    63,  1074,     0,   972,   975,    46,    47,    63,   665,
       0,   665,     0,     0,  1982,  1062,   279,    63,    56,  1455,
       0,     0,  1460,   441,    63,     0,   593,   279,     0,   447,
       0,    63,     0,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,   973,   976,     0,   973,   976,     0,     0,
       0,     0,     0,     0,     0,  1528,     0,   973,   976,   973,
     976,   520,     2,     0,     0,  -974,     0,     0,  -459,  -459,
       0,   130,   520,     0,    63,    21,    22,     0,  -459,     0,
       0,     0,    63,  -459,  -459,  -459,     0,  -459,  -459,  -459,
    -459,  -459,     0,     0,  1554,     0,     0,  1074,    63,   447,
       0,     0,     0,     0,    31,    32,    63,    63,  1074,    35,
      31,    32,     0,     0,   447,    35,    41,     0,     0,     0,
      63,     0,    41,     0,   520,     0,     0,     0,     0,   973,
     976,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,     0,   689,   279,   689,    46,    47,     0,  1062,
    1062,   279,    56,    57,     0,     0,  1062,  1062,    56,    57,
    1062,  1062,    58,  1526,   398,  1958,     0,  1961,  -459,     0,
       0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,    21,
      22,  1969,  1971,     0,     0,     0,   447,   447,     0,     0,
     447,   447,   447,    31,    32,     0,     0,  1632,    35,     0,
       0,     0,     0,     0,     0,    41,     0,     0,    31,    32,
      63,   447,     0,    35,  1656,    63,     0,  1662,     0,  1074,
      41,    63,     0,     0,     0,     0,     0,    63,     0,    46,
      47,     0,     0,    63,   522,     0,   593,     0,   593,     0,
       0,    56,     0,   522,    46,    47,   443,   522,     0,  1672,
       0,   522,   689,     0,  1703,   689,    56,    57,   689,     0,
    1219,  1223,  1219,  1223,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   507,   507,     0,     0,     0,     0,
       0,     0,  1074,   666,     0,   666,     0,  -459,  -459,     0,
       0,     0,     0,     1,     0,   689,     0,  -459,     0,     0,
       0,   689,   689,   689,   689,     0,  -459,  -459,  -459,  -459,
    -459,    31,    32,     0,     0,     0,    35,     0,     2,   447,
     447,     0,    94,    41,   279,     0,   279,   130,   507,   507,
    1732,    63,     0,     0,     0,     0,    72,     0,    63,     0,
       0,   279,   447,    63,     0,     0,     0,    46,    47,     0,
       0,  1074,  1752,     0,     0,     0,     0,     0,     0,    56,
       0,   279,     0,  1074,   905,     0,    31,    32,   279,     0,
       0,    35,   657,     0,     0,     0,     0,     0,    41,     0,
     140,  1062,     0,  1061,     0,     0,   279,   689,     0,     0,
       0,     0,  2098,   279,   689,     0,     0,   279,   689,     0,
       0,  2105,    46,    47,     0,    21,    22,     0,     0,     0,
     174,   195,   211,     0,    56,   754,     0,     0,    58,   593,
     252,   754,    94,     0,     0,     0,     0,     0,     0,    94,
      94,  1894,  1898,     0,    31,    32,     0,     0,  1074,    35,
     383,     0,     0,     0,  1655,     0,    41,  1661,     0,     0,
       0,   398,     0,     0,     0,  1702,  1074,     0,     0,  2116,
    2118,     0,   211,   440,   442,   444,   445,     0,  1074,     0,
      46,    47,   511,     0,  1024,   511,  -647,     0,     0,     0,
       0,     0,    56,   593,     0,     0,  1197,    21,    22,   511,
       0,   511,     0,   511,    31,    32,     0,     0,     0,    35,
       0,  -647,     0,  1062,  1062,     0,    41,     0,     0,     0,
    -647,  -647,  -647,  -647,  -647,     0,    31,    32,   575,   442,
     444,    35,     0,     0,     0,     0,   520,     0,    41,     0,
      46,    47,     0,     0,     0,     0,     0,   520,     0,    63,
      63,     0,    56,     0,     0,   925,     0,   906,     0,  -647,
    -647,     0,    46,    47,  -647,     0,   925,     0,   604,   619,
       0,  -647,     0,   507,    56,   507,     0,     0,  1680,     0,
       0,     0,   447,     0,   398,     0,   447,     0,   398,     0,
       0,     0,     0,   432,   433,  -647,  -647,     0,    35,   507,
       0,   507,     0,  1061,     0,    41,     0,  -647,  -647,     0,
    1061,  -647,     0,  1061,  1025,     0,  1022,  -647,  1016,     0,
       0,   659,     0,     0,  1839,   695,     0,     0,   689,    46,
      47,    63,     0,   398,   195,     0,     0,     0,     0,     0,
    1847,    56,    57,     0,   730,  1254,    94,     0,     0,   447,
       0,     0,     0,     0,     0,     0,     0,     0,   447,   447,
     398,     0,     0,    63,    63,    63,    63,     0,   398,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,   398,     0,
       0,  1062,  1062,     0,  1894,  1898,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,     0,   447,   447,     0,  1895,  1899,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   670,     0,
       0,   670,     0,     2,    63,     0,     0,     0,     0,   670,
       0,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     279,   689,     0,     0,     0,     0,   689,   689,     0,   507,
     507,   507,   507,   507,     0,     0,   440,   442,   444,   689,
       0,     0,   689,   507,   507,   507,   507,     0,     0,     0,
     689,    31,    32,     0,     0,     0,    35,     0,   913,     0,
       0,     0,     0,    41,     0,   511,     0,     0,     0,     0,
    1061,     0,   593,     0,     0,     0,   140,    63,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,     0,
       0,     0,  1959,     0,  1962,     0,     0,     0,     0,    56,
      57,     0,   447,    58,    63,   511,   511,   447,  1970,  1972,
     987,   593,     0,     0,   998,   507,   507,   511,     0,  1260,
    1270,     0,     0,  1260,  1270,    63,   174,     0,     0,     0,
       0,   511,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1061,     0,  1061,     0,
       0,   913,     0,     0,   511,   511,     0,     0,     0,   511,
     511,     0,     0,   511,   511,     0,     0,   211,   211,   211,
     211,   211,   211,     0,     0,     0,     0,     0,  1073,     0,
       0,     0,     0,   447,     0,     0,    92,     0,   211,   211,
       0,     0,     0,     0,     0,     0,     0,     0,   279,   689,
       0,     0,     0,   511,     0,   511,     0,     0,  1108,     0,
    1117,     0,     0,     0,   593,     0,     0,   447,     0,   447,
       0,     0,    63,     0,     0,   444,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   670,   670,
    1158,     0,     0,   447,    92,   447,   368,     0,     0,     0,
       0,     0,   416,     0,     0,  1061,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
       0,     0,   416,     0,     0,    92,    92,   695,     0,   689,
     689,     0,     0,     0,    92,     0,    92,     0,     0,     0,
    1492,   398,   398,    92,    92,     0,     0,     0,     0,     0,
       0,  1492,     0,     0,     0,   695,   695,   695,   695,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2099,
       0,     0,     0,     0,     0,     0,    92,    92,  2106,     0,
       0,     0,   447,  1234,   447,     0,     0,     0,     0,   730,
       0,   416,     0,     0,     0,     0,     0,   593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1262,     0,
       0,     0,  1262,  1280,     0,     0,     0,  1284,     0,   593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     913,     0,    92,     0,     0,     0,  2117,  2119,     0,     0,
    1061,     0,     0,   398,     0,     0,     0,  1061,   787,     0,
       0,  1061,     0,   447,   447,   447,   447,   447,    63,     0,
      63,     0,  1322,     0,     0,    82,     0,   447,   447,   447,
     447,     0,     0,     0,     0,   657,     0,     0,     0,     0,
       0,     0,     0,     0,    92,     0,     0,     0,    92,  1376,
       0,     0,     0,     0,   787,     0,     0,  1387,     0,     0,
       0,   416,     0,     0,     0,   742,   745,   747,     0,     0,
     416,     0,     0,     0,     0,     0,   416,  1440,     0,     0,
       0,     0,   768,     0,     0,    92,     0,     0,  1322,   368,
    1849,  1454,  -634,     0,  1387,     0,  1459,     0,    92,   447,
     447,     0,     0,     0,     0,     0,   416,     0,    92,     0,
      92,   416,     0,     0,    82,     0,     0,  -634,     0,     0,
       0,     0,     0,     0,  1480,    82,  -634,  -634,  -634,  -634,
    -634,   913,    82,    82,     1,     0,     0,     0,   174,   913,
    1494,     0,     0,     0,     0,     0,     0,  1501,     0,     0,
     913,     0,  1509,     0,     0,     0,     0,     0,     0,     2,
       0,   416,     0,   416,     0,  -634,  -634,     0,   130,     0,
    -634,     0,     0,     0,     0,     0,   523,  -634,     0,     0,
       0,     0,     0,     0,     0,   523,     0,     0,     0,   523,
       0,   140,     0,   523,     0,   416,     0,     0,     0,     0,
    1538,  -634,  -634,     0,     0,   619,     0,    31,    32,     0,
       0,   140,    35,  -634,  -634,     0,     0,  -634,     0,    41,
    1850,   987,  1022,  -634,     0,   657,     0,     0,     0,     0,
      92,  1061,     0,     0,     0,     0,     0,   511,     0,     0,
       0,   593,     0,    46,    47,  1744,     0,   442,     0,     0,
       0,     0,  1744,     0,     0,    56,    57,   593,     0,    58,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,     0,     0,     0,   987,   398,     0,     0,     0,     0,
    1061,     0,  1061,  1073,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1061,
       0,     0,     0,     0,     0,     0,     0,     0,   416,   511,
     511,     0,     0,   511,   511,   511,     0,     0,     0,     0,
    1615,   440,     0,     0,     0,     0,     0,    82,     0,     0,
       0,   444,     0,     0,     0,     0,     0,    82,     0,    82,
       0,     0,     0,     0,   416,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1061,     0,     0,     0,     0,     0,
       1,    92,    92,    92,    92,    92,    92,     0,    92,     0,
       0,    92,     0,     0,     0,     0,   368,   695,   488,     0,
     695,   488,    92,    92,    92,     2,     0,     0,     0,   695,
       0,     0,     0,     0,   130,   488,     0,   488,     0,   488,
       0,     0,    92,     0,     0,     0,     0,     0,   416,     0,
    1697,  1698,     0,     0,     0,     0,     0,   695,     0,     0,
       0,  1454,     0,   695,   695,   695,   695,     0,     0,     0,
       0,     0,     0,   432,   433,     0,     0,     0,    35,   593,
       0,   593,   511,   511,     0,    41,     0,     0,     0,     0,
     398,     0,     0,     0,     0,   593,   593,     0,     0,     0,
       0,   913,   398,     0,   913,     0,  1727,     0,     0,    46,
      47,     0,     0,     0,     0,   416,     0,     0,     0,     0,
       0,    56,    57,     0,  1262,    58,     0,   523,     0,     0,
       0,  1262,     0,     0,     0,     0,     0,     0,   523,   368,
       0,     0,     0,   368,     0,     0,     0,     0,     0,     0,
       0,     0,  1771,     0,     0,     0,     0,     0,   416,     0,
       0,     0,     0,     0,     0,   416,     0,    92,   416,     0,
       0,     0,  1061,    92,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   368,     0,
     523,     0,     0,     0,   416,   416,   416,   416,   416,   416,
     416,     0,     0,   416,   416,     0,   416,   416,   416,   416,
     416,   416,   416,   416,     0,   368,     0,     0,     0,     0,
       0,     0,     0,   368,   416,   416,   416,   416,   416,   416,
     416,   416,   416,   416,   416,   416,   416,   416,   416,   416,
     416,   416,     0,   368,     0,     0,     0,     0,   489,     0,
       0,   489,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   489,     0,   489,     0,   489,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   398,
     398,     0,     0,     0,     0,     0,    88,   416,   416,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1810,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1819,     0,     0,
       0,     0,     0,     0,   440,   416,     0,   416,     0,     0,
       0,   211,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   488,   488,   593,   593,    88,    92,     0,     0,     0,
       0,     0,  1832,  1005,   619,     0,    88,   416,     0,     0,
       0,     0,     0,    88,    88,     0,   416,   488,   488,     0,
       0,     0,    82,     0,     0,     0,     0,     0,     0,     0,
       0,   511,   511,     0,     0,    92,     0,     0,     0,     0,
     488,   488,     0,     0,  1073,   488,   488,     0,     0,   488,
     488,   416,     0,   416,     0,    92,     0,   524,     0,     0,
       0,     0,     0,     0,     0,     0,   524,     0,     0,     0,
     524,     0,     0,     0,   524,  1073,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   511,   511,     0,   440,   488,
       0,   488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   619,     0,   398,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   416,
    1454,     0,     0,     0,     0,     0,     0,   398,   695,   695,
       0,     0,     0,     0,     0,     0,     0,     0,   695,     0,
     695,   695,     0,     0,   695,     0,     0,     0,     0,     0,
       0,     0,   695,     0,     0,   695,     0,     0,     0,     0,
     416,     0,     0,     0,    92,    92,     0,     0,     0,     0,
       0,   416,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   398,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   368,   368,     0,  1945,
       0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
       0,     0,   523,     0,     0,     0,     0,     0,    88,  1073,
      88,   489,   489,   523,     0,     0,     0,     0,     0,     0,
       0,  1977,     0,  1006,  1073,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1771,   489,   489,     0,
     416,  1454,   416,     0,  1459,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     489,   489,     0,     0,   416,   489,   489,     0,     0,   489,
     489,     0,     0,     0,     0,     0,     0,     0,    92,     0,
      92,   416,     0,     0,     0,   416,     0,     0,   368,     0,
       0,     0,   416,     0,     0,     0,   416,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   489,
     511,   489,   511,     0,     0,   913,     0,     0,     0,  1073,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1073,     0,     0,     0,     0,     0,   511,     0,   511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   444,     0,
       0,     0,   326,     0,     1,   327,   113,   328,   926,   329,
     330,   695,   695,   695,   695,     0,     0,   695,     0,   926,
       0,   695,   695,     0,   695,     0,   695,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,   695,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2083,  2084,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
       0,   926,     0,     0,   332,   333,   334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,   336,     0,
       0,  1073,     0,   386,     0,     0,     0,     0,     0,   419,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,   419,
     416,   346,   347,     0,   416,     0,   348,     0,     0,   349,
     884,   350,     0,     0,   885,     0,     0,     0,     0,   351,
     352,  1778,   353,   354,   355,   356,   511,   511,   511,   511,
     511,     0,     0,   488,  1073,     0,     0,     0,     0,     0,
     511,   511,   511,   511,     0,     0,   416,     0,     0,     0,
       0,   695,     0,     0,     0,     0,   416,     0,     0,     0,
     695,     0,   695,     0,     0,     0,     0,   416,   419,     0,
       0,     0,   416,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,     0,     0,   416,     0,
     368,     0,     0,     0,     0,   416,     0,   416,     0,     0,
       0,     0,     0,  1073,     0,   488,   488,     0,     0,   488,
     488,   488,   511,   511,   416,  1073,     0,     0,   695,   695,
       0,     0,   695,     0,   695,     0,     0,   695,     0,     0,
       0,   695,     0,     0,     0,     0,     0,     0,  2184,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1073,     0,     0,     0,
       0,     0,     0,    88,     0,   695,     0,     0,     0,   416,
       0,     0,     0,     0,     0,     0,     0,     0,   419,     0,
       0,     0,   743,   746,   748,     0,     0,   419,     0,     0,
    1073,     0,    92,   419,   695,     0,     0,     0,     0,   769,
       0,     0,     0,     0,     0,     0,   386,     0,  1073,     0,
    2231,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1073,     0,     0,   419,     0,     0,     0,     0,   419,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   488,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     416,     0,     0,     0,   416,   416,   416,     0,     0,     0,
       0,     0,     0,   489,     0,   368,     0,     0,     0,     0,
     416,   416,     0,     0,     0,     0,   785,   368,   419,     0,
     419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   813,     0,     0,     0,     0,   416,   416,
       0,   416,   416,     0,     0,     0,   416,   416,   416,   416,
       0,     0,   419,     0,     0,     0,     0,     0,     0,   416,
     416,   416,   416,   416,   416,   416,   416,     0,     0,     0,
       0,   416,     0,     0,     0,   489,   489,     0,     0,   489,
     489,   489,     0,     0,     0,     0,     0,   416,     0,     0,
       0,     0,     0,   926,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   926,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   416,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   506,     0,     0,   506,     0,     0,     0,     0,
     326,     0,     1,   327,   113,   328,     0,   329,   330,   506,
       0,   506,   135,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   419,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   193,   135,     0,     0,     0,     0,     0,
       0,     0,   251,    92,   368,   368,     0,     0,     0,     0,
       0,   419,     0,     0,     0,     0,     0,   331,   489,   489,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
     416,   416,     0,     0,     0,   335,   336,     0,     0,     0,
     416,     0,     0,   386,   135,   135,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,   419,     0,   349,   437,   350,
       0,     0,  2112,  2113,  1072,     0,   694,   351,   352,     0,
     353,   354,   355,   356,   416,     0,     0,     0,   416,   416,
     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   488,   488,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   437,     0,     0,     0,     0,     0,     0,
       0,     0,   419,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   636,     0,     0,  1193,   638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   386,     0,     0,     0,
     386,   488,   488,     0,   617,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   419,     0,     0,     0,     0,
       0,     0,   419,   135,     0,   419,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   193,     0,     0,     0,
       0,     0,     0,     0,   368,   386,     0,     0,     0,     0,
       0,   419,   419,   419,   419,   419,   419,   419,     0,     0,
     419,   419,   368,   419,   419,   419,   419,   419,   419,   419,
     419,     0,   386,     0,     0,     0,     0,     0,     0,   727,
     386,   419,   419,   419,   419,   419,   419,   419,   419,   419,
     419,   419,   419,   419,   419,   419,   419,   419,   419,     0,
     386,   785,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1321,   368,     0,     0,     0,
       0,     0,     0,     0,     0,   506,   506,     0,     0,     0,
       0,     0,     0,     0,  1344,  1348,  1352,  1356,  1360,     0,
       0,  1369,  1375,     0,   419,   419,     0,   785,     0,     0,
    1386,   506,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1410,  1414,  1418,  1422,  1426,     0,   135,  1369,
    1439,     0,     0,     0,   506,   506,     0,   489,   489,   506,
     506,  1321,     0,   506,   506,     0,     0,  1386,     0,     0,
       0,  1369,  1369,  1059,     0,     0,     0,     0,     0,     0,
       0,   902,     0,     0,     0,     0,     0,   907,   135,     0,
       0,     0,   419,     0,   419,     0,     0,     0,     0,     0,
       0,     0,     0,   506,     0,   506,     0,     0,     0,     0,
       0,   489,   489,     0,     0,     0,   488,     0,   488,     0,
       0,     0,     0,     0,   419,     0,   251,     0,     0,     0,
       0,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,   488,     0,   488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   984,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   411,   419,     0,
     419,     0,     0,     0,     0,     0,     0,     0,   694,   135,
     135,   135,   135,   135,   135,     0,  1066,     0,     0,   638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,   135,   135,     0,     0,     0,   694,   694,   694,   694,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1065,
     135,     0,  1070,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1065,   419,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   617,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   617,     0,
       0,     0,     0,     0,     0,     0,     0,   419,     0,     0,
       0,     0,     0,  1059,     0,     0,     0,     0,   419,     0,
    1059,     0,     0,  1059,     0,     0,     0,     0,     0,     0,
       0,     0,   488,   488,   488,   488,   488,     0,     0,     0,
       0,     0,     0,   386,   386,     0,   488,   488,   488,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   251,   489,     0,   489,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1193,     0,   419,     0,   419,
       0,     0,   489,     0,   489,     0,     0,     0,   727,     0,
       0,     0,     0,     0,   727,     0,     0,     0,   488,   488,
       0,   419,   772,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   326,     0,     1,   327,   113,   328,   419,   329,
     330,     0,   419,     0,     0,   386,     0,     0,     0,   419,
       0,     0,     0,   419,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   881,     0,     0,     0,   886,     0,
       0,   506,   506,     0,     0,     0,     0,     0,     0,   331,
       0,     0,     0,     0,   332,   333,   334,    31,    32,     0,
       0,     0,    35,     0,     0,  1770,     0,   335,   336,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,    46,    47,     0,     0,   772,     0,     0,
       0,   346,   347,     0,     0,    56,   939,   506,     0,   940,
     771,   350,   489,   489,   489,   489,   489,     0,     0,   351,
     352,     0,   353,   354,   355,   356,   489,   489,   489,   489,
       0,     0,     0,     0,   135,     0,  1059,     0,  1059,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   727,     0,     0,     0,     0,
       0,     0,  1500,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   135,     0,     0,     0,   419,     0,   506,
     506,   419,     0,   506,   506,   506,     0,     0,     0,     0,
     636,     0,   638,   135,     0,     0,     0,     0,   489,   489,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1536,     0,     0,     0,     0,
     617,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   419,     0,     0,   984,     0,     0,     0,
       0,     0,     0,     0,   419,  1059,     0,     0,   694,   419,
       0,   694,     0,     0,     0,     0,     0,     0,     0,     0,
     694,     0,     0,     0,  1161,   419,     0,   386,     0,     0,
       0,     0,   419,     0,   419,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   694,   984,
       0,   419,     0,     0,   694,   694,   694,   694,     0,     0,
       0,     0,   135,   135,  1195,     0,     0,     0,     0,     0,
       0,     0,   506,   506,     0,     0,     0,     0,     0,   881,
     886,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   437,     0,     0,     0,
       0,     0,     0,     0,     0,   617,   419,   617,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   772,     0,     0,   772,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1059,  1273,     0,     0,     0,     0,     0,  1059,     0,     0,
     772,  1059,     0,     0,     0,   881,   886,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1319,     0,     0,     0,   636,   419,   638,     0,
       0,   419,   419,   419,     0,     0,     0,     0,     0,     0,
       0,     0,   386,     0,     0,     0,     0,   419,   419,     0,
       0,     0,     0,     0,   386,     0,     0,     0,     0,   727,
    1371,   727,     0,     0,     0,     0,     0,     0,  1384,     0,
       0,     0,     0,     0,     0,   419,   419,     0,   419,   419,
       0,     0,     0,   419,   419,   419,   419,     0,  1435,     0,
       0,     0,     0,     0,     0,     0,   419,   419,   419,   419,
     419,   419,   419,   419,   881,   886,     0,     0,   419,   881,
    1461,  1465,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   419,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1770,
       0,     0,     0,     0,  1983,  1985,  1989,  1993,  1995,  1999,
       0,   419,     0,  2003,  2007,  2011,  2015,     0,   664,     0,
       0,     0,     0,   772,     0,     0,  1985,  1989,  1995,  1999,
    2003,  2007,  2011,  2015,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    21,    22,   266,   267,    25,    26,
      27,  1059,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,     0,     0,     0,
       0,   386,   386,    31,    32,     0,     0,     0,    35,     0,
       0,   506,   506,     0,   269,    41,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   419,   419,   271,
    1059,     0,  1059,     0,     0,     0,     0,   419,     0,    46,
      47,   272,   273,   274,   275,   222,   223,     0,     0,   276,
     277,    56,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   278,     0,     0,   506,   506,     0,     0,     0,
       0,     0,     0,   135,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   419,   727,    80,     0,   419,   419,     0,     0,  1822,
       0,     0,     0,     0,  1059,     0,     0,     0,     0,   694,
     694,     0,     0,     0,     0,     0,     0,     0,     0,   694,
       0,   694,   694,     0,     0,   694,     0,  1500,     0,   617,
       0,     0,  1835,   694,     0,  1070,   694,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,     0,     0,     0,   881,     0,     0,     0,     0,   237,
       0,     0,     0,  1663,  1665,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,  1195,     0,     0,     0,     0,     0,
     135,  1687,   191,     0,     0,     0,     0,     0,   881,   886,
       0,     0,   285,    80,     0,     0,     0,     0,     0,     0,
      80,    80,     0,     0,   237,     0,     0,     0,     0,     0,
       0,   386,   456,   902,     0,     0,     0,     0,     0,     0,
     422,   617,     0,     0,     0,     0,     0,     0,     0,   386,
       0,     0,   617,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   521,     0,     0,     0,     0,     0,
       0,     0,     0,   521,     0,     0,     0,   521,     0,     0,
       0,   521,     0,     0,     0,     0,   881,     0,     0,     0,
       0,     0,     0,     0,     0,   814,     0,     0,     0,     0,
       0,     0,  1059,   386,     0,     0,     0,     0,     0,     0,
       0,     0,   285,   285,     0,     0,     0,     0,     0,     0,
     506,     0,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   881,   886,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   506,     0,   506,     0,
     614,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   694,   694,   694,   694,     0,     0,   694,     0,
       0,     0,   694,   694,   881,   694,   886,   694,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   881,   886,   694,
       0,     0,   656,     0,     0,   285,   285,   285,     0,     0,
       0,     0,     0,     0,     0,   191,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   191,   285,    80,     0,     0,
       0,     0,     0,     0,     0,   727,   727,     0,  2026,     0,
       0,     0,     0,     0,     0,   753,     0,     0,   881,     0,
     886,   753,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   775,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   881,     0,   886,     0,   881,     0,
     886,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   871,  1065,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   506,   506,   506,   506,
     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     506,   506,   506,   506,     0,     0,     0,     0,     0,     0,
       0,     0,   694,     0,     0,     0,     0,     0,     0,     0,
       0,   694,     0,   694,     0,   919,   549,     0,     0,     0,
     928,     0,     0,     0,     0,     0,     0,     0,     0,   935,
       0,     0,   942,     0,     0,     0,     0,     0,     0,   614,
       0,     0,     0,     0,     0,   924,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   924,     0,     0,     0,
       0,     0,   506,   506,     0,     0,   993,     0,     0,   694,
     694,     0,  1009,   694,     0,   694,     0,  1194,   694,     0,
       0,     0,   694,     0,     0,     0,     0,     0,     0,     0,
       0,   614,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1015,     0,
       0,     0,     0,     0,     0,     0,   694,     0,     0,     0,
       0,     0,     0,     0,  1887,     0,     0,     0,     0,     0,
       0,     0,   614,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   694,   881,   886,   881,   886,
       0,   881,  1907,   237,   285,     0,     0,  1663,  1914,     0,
    1687,   285,   886,   237,   285,     0,     0,     0,     0,     0,
     881,   886,  1687,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   237,     0,     0,   237,     0,   237,     0,
     237,     0,     0,  1313,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    98,     0,
       0,     0,     0,     0,     0,     0,  1345,  1349,  1353,  1357,
    1361,     0,     0,  1370,     0,     0,     0,     0,     0,  1313,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1411,  1415,  1419,  1423,  1427,     0,
       0,  1370,     0,     0,     0,     0,  1198,     0,     0,     0,
       0,     0,     0,  1452,     0,   129,   141,     0,     0,  1457,
       0,     0,     0,  1370,  1370,     0,     0,   285,   285,   285,
     285,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   196,   141,     0,
       0,     0,   248,     0,     0,   285,   285,   285,    98,     0,
     191,     0,     0,     0,  1246,    98,    98,     0,     0,     0,
       0,     0,   285,     0,     0,     0,     0,     0,     0,  1259,
    1269,   775,     0,  1259,  1269,   423,     0,     0,     0,     0,
    1246,     0,     0,  1246,     0,     0,     0,   418,   434,     0,
       0,  1290,     0,     0,   285,     0,     0,     0,     0,     0,
     881,   285,     0,     0,   285,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     881,     0,     0,     0,     0,   886,     0,   881,  1907,     0,
     886,  1687,     0,  2064,     0,  2066,     0,     0,     0,     0,
       0,   886,  2070,   572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   588,
       0,   871,   871,   871,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   418,     0,   772,     0,
       0,     0,     0,     0,   614,   621,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   456,   456,   237,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   614,     0,     0,     0,     0,   141,     0,     0,
    1491,   614,     0,     0,     0,     0,     0,     0,   614,     0,
     196,  1491,   126,   775,     0,   614,     0,     0,     0,     0,
     731,     0,    98,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1532,     0,  2129,  2132,     0,   881,   886,   881,
       0,     0,     0,   881,  1907,     0,   739,     0,     0,     0,
       0,     0,     0,     0,     0,   418,     0,   456,     0,     0,
       0,   418,     0,     0,   549,   549,   614,  1678,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,     0,   614,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   881,   886,     0,   881,  1907,     0,     0,     0,
    2177,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   285,   285,   285,
       0,     0,     0,     0,     0,   656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   418,     0,   418,     0,
     881,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   914,     0,     0,     0,   237,     0,
       0,     0,     0,   237,     0,     0,     0,     0,     0,  1635,
       0,     0,   141,     0,     0,  1635,     0,     0,     0,     0,
       0,   237,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   697,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   988,     0,     0,   996,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   285,     0,     0,   285,
       0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1198,     0,   914,     0,     0,
       0,   773,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   141,   141,   141,   141,   141,   141,   285,
       0,     0,     0,     0,     0,   285,   285,   285,   285,     0,
       0,     0,     0,  1060,   141,   141,     0,     0,     0,     0,
     456,   237,     0,     0,     0,     0,     0,     0,   285,     0,
     285,     0,     0,     0,  1109,     0,  1118,     0,     0,     0,
       0,     0,  1717,   882,     0,   656,     0,  1120,     0,   418,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1743,     0,     0,     0,     0,
       0,     0,  1743,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   588,     0,     0,
     285,   285,     0,     0,     0,     0,     0,   285,   285,     0,
       0,   285,   285,     0,     0,     0,   773,     0,     0,     0,
       0,     0,     0,   418,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1232,     0,
       0,     0,     0,     2,     0,   731,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1240,     0,     0,     0,  1264,     0,     0,     0,  1264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,     0,     0,   914,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,   871,   871,     0,
       0,   335,   336,  1060,     0,     0,     0,     0,     0,     0,
    1060,     0,     0,  1060,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
     456,     0,     0,     0,   456,   346,   347,     0,     0,     0,
     348,     0,     0,   349,   884,   350,     0,     0,  1783,     0,
       0,     0,  1784,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1196,     0,     0,     0,   456,     0,     0,
       0,     0,   285,     0,     0,   614,     0,     0,   882,     0,
       0,   456,  1853,   456,  1853,     0,   697,   697,   697,   697,
     914,  1481,     0,     0,     0,     0,     0,   914,     0,     0,
       0,     0,     0,     0,     0,   914,  1495,     0,     0,     0,
       0,     0,     0,  1502,     0,     0,   914,   129,   141,     0,
       0,     0,     0,   773,     0,     0,   773,     0,     0,     0,
       0,  1981,     0,     0,     0,     0,  1984,  1986,  1990,  1994,
    1996,  2000,     0,     0,     0,  2004,  2008,  2012,  2016,   773,
       0,     0,     0,     0,   882,     0,     0,   141,     0,     0,
       0,     0,     0,     0,     0,  1535,     0,     0,     0,     0,
    1060,   621,   418,     0,     0,     0,     0,   141,   614,     0,
       0,  1320,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,   284,     0,   285,   285,     0,     0,     0,     0,
     285,   285,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   418,     0,   285,     0,     0,   285,     0,     0,  1373,
       0,     0,     0,     0,   285,   549,     0,  1385,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     988,     0,     0,     0,     0,     0,  1060,  1437,  1060,     0,
     456,     0,   237,     0,     0,   456,     0,     0,     0,     0,
       0,     0,     0,   882,     0,     0,     0,     0,   882,  1463,
    1467,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,     0,     0,     0,  1616,     0,     0,     0,
       0,     0,   284,   284,     0,  1624,     0,     0,     2,   775,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   418,     0,     0,     0,     0,     0,
       0,     0,   773,     0,     0,     0,     0,     0,     0,     0,
     613,   456,     0,     0,     0,     0,     0,     0,   331,     0,
       0,     0,     0,   332,   333,   334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1060,   335,   336,     0,     0,
       0,     0,     0,     0,     0,     0,   418,     0,     0,     0,
     337,     0,   285,   285,   338,   339,   340,   341,   342,   343,
     344,   345,   655,     0,     0,   284,   284,   284,     0,     0,
     346,   347,     0,     0,     0,   348,   614,     0,   349,   884,
     350,     0,     0,   885,     0,     0,   284,     0,   351,   352,
    1788,   353,   354,   355,   356,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   752,     0,   914,     0,     0,
     914,   752,  1264,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,   774,     0,     0,     0,     0,   418,     0,     0,
    1264,     0,     0,   285,   285,     0,     0,  1264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   418,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     456,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1060,     0,     0,     0,     0,     0,     0,  1060,     0,     0,
       0,  1060,     0,     0,     0,     0,     0,   326,   775,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,   882,     0,     0,     0,     0,   697,   613,
       0,   697,  1664,  1666,     0,  1669,   456,     0,   456,     0,
       0,     0,     0,  1679,     0,     0,     0,     0,     0,     0,
    1688,     0,     0,     0,   331,     0,     0,   882,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,   697,     0,
       0,     0,   335,   336,   697,   697,   697,   697,     0,     0,
       0,   613,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,   884,   350,     0,     0,  1783,
       0,     0,   613,  1791,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,   882,     0,     0,  1811,     0,
       0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
       0,   284,  1818,     0,   284,     0,     0,     0,     0,  1821,
       0,     0,     0,     0,     0,     0,     0,   434,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   882,     0,     0,     0,     0,     0,     0,  1502,     0,
     621,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1060,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   418,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   418,     0,     0,
       0,     0,     0,   882,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   882,     0,     0,     0,
    1060,     0,  1060,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1060,
       0,     0,     0,  1877,     0,     0,     0,   284,   284,   284,
     284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   621,     0,     0,     0,   882,     0,     0,
       0,     0,     0,     0,     0,   284,   284,   284,     0,     0,
       0,     0,     0,     0,  1245,     0,     0,     0,     0,     0,
       0,     0,   284,   882,  1060,     0,     0,   882,     0,  1258,
    1268,   774,     0,  1258,  1268,     0,     0,     0,     0,     0,
    1245,     0,     0,  1245,     0,     0,     0,     0,     0,     0,
       0,  1289,     0,     0,   284,     0,     0,     0,     0,     0,
       0,   284,     0,     0,   284,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1946,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   418,
       0,   418,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   418,   418,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   613,     0,     0,     0,     0,     0,
       0,     0,     0,  1987,  1991,     0,  1997,  2001,     0,     0,
       0,  2005,  2009,  2013,  2017,     0,     0,     0,  1481,     0,
       0,     0,     0,     0,  1987,  1991,  1997,  2001,  2005,  2009,
    2013,  2017,     0,     0,   287,     0,     0,     0,     0,     0,
    1821,     0,   613,     0,     0,     0,     0,     0,     0,     0,
       0,   613,  1060,     0,     0,     0,     0,     0,   613,     0,
       0,   914,     0,   774,     0,   613,     0,     0,     0,   697,
     697,     0,     0,     0,     0,   882,     0,   882,     0,     0,
     882,   697,     0,     0,     0,     0,  1912,  1915,     0,  1917,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   882,
       0,  1928,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   613,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   613,     0,   287,   287,     0,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,  1734,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,   616,     0,     0,     0,     0,   284,   284,   284,
       0,     0,     0,     0,     0,   655,   418,     0,     0,     0,
       0,     0,     0,     0,     0,   418,     0,     0,     0,     0,
       0,     0,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,   658,     0,     0,   287,   287,   287,
       0,     0,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,   287,  1060,
       0,     0,     0,   418,   418,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,     0,   350,   755,     0,  2124,
    2125,  1072,     0,   755,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,   777,     0,   284,     0,     0,   284,
       0,     0,   284,     0,     0,     0,     0,     0,     0,   882,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   697,   882,
       0,     0,     0,     0,     0,     0,   882,     0,     0,   284,
    1917,     0,  2065,     0,     0,   284,   284,   284,   284,     0,
       0,  2071,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   284,     0,
     284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1716,     0,     0,   655,     0,   773,     0,     0,
       0,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,   616,     0,     0,     0,  1742,     0,     0,     0,     0,
       0,     0,  1742,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   134,     0,     0,     0,     0,
     284,   284,     0,     0,     0,     0,     0,   284,   284,     0,
       0,   284,   284,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   616,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,     0,     0,     0,     0,
       0,     0,   148,     0,     0,   134,   134,     0,     0,     0,
       0,     0,     0,  2130,  2133,     0,   882,     0,   882,     0,
       0,   697,   882,   697,   616,   172,   184,   210,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   287,     0,     0,     0,
       0,     0,     0,   287,     0,     0,   287,     0,     0,     0,
       0,   134,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   131,     0,
       0,   882,     0,     0,   882,     0,     0,     0,     0,     0,
       0,     0,   697,     0,   531,     0,     0,     0,     0,     0,
       0,     0,   618,     0,     0,     0,     0,     0,     0,     0,
       0,   563,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   882,
       0,     0,     0,   131,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,     0,     0,
       0,     0,     0,   172,   610,     0,     0,   728,     0,   287,
     287,   287,   287,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   284,     0,     0,   613,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   287,   287,   287,
       0,     0,     0,     0,     0,     0,  1248,     0,     0,     0,
       0,     0,     0,     0,   287,     0,   184,     0,     0,     0,
       0,  1261,  1271,   777,     0,  1261,  1271,     0,     0,   184,
       0,     0,  1248,     0,     1,  1248,     0,     0,     0,   610,
       0,     0,     0,  1292,     0,     0,   287,     0,     0,     0,
       0,     0,     0,   287,     0,     0,   287,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,   605,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,   613,   134,
       0,     0,     0,     0,     0,   618,     0,     0,     0,     0,
      30,     0,     0,     0,   284,   284,     0,    31,    32,     0,
     284,   284,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,   284,     0,     0,   284,     0,     0,   134,
       0,     0,     0,    43,   284,     0,   616,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   222,
     223,     0,     0,     0,     0,    56,    57,     0,     0,   606,
       0,   131,     0,   618,     0,     0,     0,   131,     0,     0,
     607,     0,   608,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   616,     0,     0,     0,     0,     0,
       0,     0,     0,   616,     0,     0,     0,     0,     0,     0,
     616,   610,     0,     0,     0,   777,     0,   616,     0,   774,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   134,   134,   134,   134,   134,     0,   134,     0,     0,
     728,     0,     0,     0,     0,   610,     0,     0,     0,     0,
       0,   134,   134,   134,     0,     0,     0,     0,     0,     0,
       0,   172,     0,     0,     0,     0,     0,     0,   616,     0,
       0,   134,     0,   618,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   616,     0,   618,     0,     0,     0,
       0,     0,   284,   284,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   131,   131,   131,   131,   131,     0,   131,
       0,     0,   131,     0,     0,     0,   613,     0,     0,     0,
       0,     0,     0,   131,   131,   131,     0,     0,     0,   287,
     287,   287,     0,     0,     0,     0,     0,   658,     0,     0,
       0,   563,     0,   610,     0,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,     0,     0,   131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   284,   284,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   728,     0,     0,     0,
       0,     0,   728,     0,     0,     0,     0,   519,     0,     0,
       0,     0,     0,     0,     0,     0,   519,     0,     0,     0,
     519,     0,     0,     0,   519,     0,     0,     0,   774,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   287,     0,
       0,   287,     0,     0,   287,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,   282,     0,     0,     0,
    1228,     0,     0,     0,     0,     0,     0,     0,   131,     0,
       0,     0,     0,     0,   610,     0,     0,     0,     0,     0,
       0,   287,     0,     0,  1185,     0,     0,   287,   287,   287,
     287,     0,     0,   612,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     287,     0,   287,     0,  1216,  1220,     0,     0,     0,     0,
       0,     0,     0,     0,  1719,     0,     0,   658,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   654,     0,  1745,   282,   282,
     282,     0,     0,     0,  1745,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
       0,     0,   287,   287,     0,     0,     0,     0,     0,   287,
     287,  1576,     0,   287,   287,     0,     0,     0,   751,     0,
       0,     0,     0,   618,   751,     0,     0,     0,     0,     0,
     618,     0,     0,     0,     0,   134,     0,     0,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,     0,     0,     0,     0,   -66,
       0,     0,     0,   618,     0,     0,   -66,   -66,   618,     0,
       0,   -66,     0,   172,   134,   610,     0,   -66,   -66,   -66,
       0,     0,   610,     0,   618,     0,     0,   610,     0,     0,
       0,     0,   -66,  -883,     0,     0,  -883,  -883,  -883,     0,
    -883,  -883,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
       0,     0,     0,     0,   -66,     0,     0,     0,     0,     0,
       0,  1577,   612,  1578,   -66,     0,   131,     0,   923,     0,
       0,     0,     0,     0,     0,   131,     0,   618,     0,   923,
     610,     0,     0,     0,     0,     0,   131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   610,     0,     0,     0,
    -883,     0,     0,     0,     0,  -883,  -883,  -883,     0,     0,
       0,     0,     0,     0,   612,     0,     0,     0,  -883,     0,
       0,     0,     0,   134,   134,     0,     0,     0,     0,     0,
       0,  1014,  -883,   618,     0,   618,  -883,  -883,  -883,  -883,
    -883,  -883,  -883,  -883,     0,     0,     0,     0,     0,   610,
       0,     0,  -883,  -883,   287,   612,     0,   616,     0,     0,
       0,     0,  -883,  -883,     0,  -883,  -883,  -883,     0,     0,
    -883,  -883,     0,  -883,  -883,  -883,  -883,   282,     0,     0,
       0,     0,     0,     0,   282,     0,     0,   282,     0,     0,
       0,     0,     0,     0,     0,   131,   131,     0,     0,     0,
       0,     0,     0,     0,     0,   131,     0,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   728,     0,   728,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     616,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   287,   287,     0,     0,
       0,     0,   287,   287,     0,     0,     0,     0,     0,   283,
       0,     0,     0,     0,     0,   287,     0,     0,   287,     0,
       0,     0,     0,     0,     0,     0,   287,     0,     0,     0,
     282,   282,   282,   282,     0,     0,     0,     0,     0,   131,
       0,   131,     0,     0,  1653,     0,     0,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,  1676,     0,   282,   282,
     282,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     0,   283,   282,     0,     0,   283,     0,
       0,     0,  1257,  1267,  1700,     0,  1257,  1267,     0,     0,
    1216,  1220,  1216,  1220,     0,     0,     0,     0,     0,     0,
       0,   777,     0,     0,     0,     0,     1,   282,     0,   283,
     283,     0,     0,     0,   282,     0,     0,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     3,     4,   297,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,   287,   287,     0,     0,     0,    31,
      32,   298,    34,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,   612,   616,   283,
       0,     0,   283,   283,   283,    43,     0,     0,     0,     0,
      45,   288,     0,     0,     0,    46,    47,    48,    49,    50,
      51,    52,    53,   283,     0,     0,     0,    56,    57,     0,
     618,    58,     0,     0,     0,     0,     0,   618,     0,     0,
     299,     0,   283,     0,   134,   612,     0,     0,   283,     0,
       0,     0,     0,  1490,   612,   287,   287,     0,     0,     0,
       0,   612,     0,   288,  1490,   618,     0,   618,   612,     0,
     618,     0,   288,   618,     0,     0,   288,     0,     0,     0,
     288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,     0,     0,     0,     0,     0,     0,   131,
     777,   288,   288,     0,     0,     0,   131,     0,     0,   612,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   612,     0,   131,     0,   610,
       0,     0,   131,     0,     0,   131,     0,     0,     0,     0,
       0,   134,     0,     0,     0,     0,     0,     0,     0,   618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     618,     0,   283,     0,     0,     0,     0,     0,     0,     0,
     282,   282,   282,   283,     0,     0,     0,     0,   654,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   288,     0,     0,   288,   288,   288,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,     0,   288,     0,     0,     0,     0,
       0,   131,     0,     0,     0,   283,     0,     0,     0,     0,
       0,     0,   610,     0,   288,     0,     0,     0,     0,     0,
     288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     0,     0,     0,     0,   283,   282,
       0,   283,   282,     0,     0,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   282,     0,     0,  1892,  1896,     0,   282,   282,
     282,   282,     0,     0,     0,  1905,     0,  1908,  1653,     0,
       0,  1659,     0,   618,   618,     0,   618,     0,     0,  1700,
       0,   282,  1921,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   654,     0,
       0,     0,     0,     0,     0,   288,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1741,     0,
       0,     0,     0,     0,     0,  1741,     0,     0,     0,     0,
       0,     0,   134,     0,   283,   283,   283,   283,     0,     0,
       0,     0,     0,   282,   282,   131,   131,     0,   131,     0,
     282,   282,     0,     0,   282,   282,     0,   288,     0,     0,
       0,     0,   283,   283,   283,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     0,     0,     0,     0,   283,   283,     0,     0,
     283,   283,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   288,   131,   215,     0,     1,     0,     0,
     288,   283,     0,   288,     0,     0,     0,     0,   283,     0,
       0,   283,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,     8,     9,
      10,   605,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,  2054,  2055,
    2056,  2057,     0,     0,  2058,     0,    43,     0,  1892,  1896,
       0,  1905,     0,  1908,     0,     0,    46,    47,    48,    49,
      50,    51,   222,   223,     0,  2067,     0,     0,    56,    57,
       0,     0,   606,  1104,     0,     0,   288,   288,   288,   288,
       0,     0,     0,   607,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       0,     0,     0,     0,   288,   288,   288,     0,   283,     0,
       0,     0,     0,     0,     0,   282,     0,     0,   612,     0,
       0,   288,     0,     0,     0,     0,     0,     0,   288,   288,
       0,     0,   288,   288,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   288,     0,     0,     0,     0,     0,     0,
     288,     0,     0,   288,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1683,     0,
       1,   327,   113,   328,     0,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2058,     0,
       0,     0,     0,     0,     0,     2,     0,  2138,     0,  2141,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   612,     0,     0,   283,   283,   283,     0,     0,     0,
       0,     0,   283,     0,     0,     0,     0,   282,   282,     0,
       0,     0,     0,   282,   282,   331,     0,     0,     0,     0,
     332,   333,   334,     0,     0,     0,   282,     0,     0,   282,
       0,     0,     0,   335,   336,  2171,  2172,   282,     0,  2138,
       0,  2141,     0,     0,  2176,     0,     0,   337,  2178,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,   288,
       0,     0,   348,     0,     0,   349,  1684,   350,  1685,     0,
     288,     0,  2178,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,   283,     0,     0,   283,
       0,  2218,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     0,
       0,     0,   283,   283,   283,   283,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   283,     0,     0,
       0,     0,     0,     0,     0,   282,   282,     0,     0,     0,
       0,     0,   283,     0,     0,     0,   288,   288,   288,     0,
       0,     0,     0,     0,   288,     0,     0,     0,     0,   612,
       0,     0,   283,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,   283,     0,
       0,     0,     0,     0,   283,   283,     0,     0,   283,   283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   793,     0,     0,     0,     0,
       0,   794,   795,   796,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,     0,   288,     0,     0,   288,     0,
       0,   288,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   288,     0,
       0,     0,     0,  -345,   288,   288,   288,   288,     0,     0,
    -345,  -345,     0,     0,     0,  -345,     0,     0,     0,     0,
       0,  -345,  -345,  -345,     0,     0,     0,   288,     0,   288,
       0,     0,     0,     0,     0,     0,  -345,     0,     0,     0,
       0,     0,     0,     0,   288,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,     0,     0,     0,  -345,  -345,
    -345,  -345,   797,     0,   288,  -345,  1597,  -345,  -345,     0,
     798,   288,     0,   799,     0,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,   288,
     288,     0,     0,     0,     0,     0,   288,   288,     0,     0,
     288,   288,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
       0,   283,   283,  -459,  -459,  -459,     0,   283,   283,     0,
       0,     0,     0,     0,     0,     0,  -459,  -459,     0,     0,
     283,     0,     0,   283,     0,     0,     0,     0,     0,     0,
    -459,   283,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,  -459,     0,     0,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,     0,     0,  -459,     0,  -459,  -459,
       0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
       0,   288,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -459,     0,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,   283,
     283,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   288,   288,     0,     0,     0,     0,   288,
     288,  -459,     0,     0,     0,     0,  -459,  -459,  -459,     0,
       0,     0,   288,     0,     0,   288,     0,     0,     0,  -459,
    -459,     0,     0,   288,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -459,     0,     0,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,     0,     0,     0,     0,     0,
     283,   283,     0,  -459,  -459,     0,     0,     0,  -459,  -459,
    -459,  -459,  -459,  -459,     0,  -459,  -459,     0,     0,  -459,
       0,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -345,   793,     0,  -345,  -345,  -345,  -345,
     794,   795,   796,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
       0,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,   288,   288,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,   797,  -345,  -345,  -345,  -345,  -345,  -345,  -345,   798,
    -345,  -345,   799,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   288,   288,  -451,   878,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
    -451,  -451,     0,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,     0,  -451,  -451,  -451,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -304,   326,     0,     1,   327,   113,
     328,  -304,   329,   330,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,     0,   331,  -304,  -304,     0,     0,   332,   333,   334,
    -304,  -304,     0,     0,  -304,  -304,  -304,  -304,  -304,  -304,
     335,   336,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,  -304,     0,   337,  -304,  -304,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,   346,   347,  -304,  -304,  -304,   348,
    -304,  -304,   349,  1287,   350,  -304,  -304,  1210,  -304,  -304,
    -304,  -304,   351,   352,  -304,   353,   354,   355,   356,  -304,
    -304,  -304,  -304,  -304,  -305,   326,     0,     1,   327,   113,
     328,  -305,   329,   330,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,     0,   331,  -305,  -305,     0,     0,   332,   333,   334,
    -305,  -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,
     335,   336,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     0,  -305,     0,   337,  -305,  -305,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,   346,   347,  -305,  -305,  -305,   348,
    -305,  -305,   349,   884,   350,  -305,  -305,   885,  -305,  -305,
    -305,  -305,   351,   352,  -305,   353,   354,   355,   356,  -305,
    -305,  -305,  -305,  -305,  -566,   326,     0,     1,   327,   113,
     328,  -566,   329,   330,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     2,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
       0,     0,   331,  -566,  -566,     0,     0,   332,   333,   334,
    -566,  -566,     0,     0,  -566,  -566,  -566,  -566,  -566,  -566,
     335,   336,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,     0,  -566,     0,   337,  -566,  -566,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,   346,   347,  -566,  -566,  -566,   348,
    -566,  -566,   349,  -566,   350,  -566,  -566,  -566,  -566,   781,
    -566,  1368,   351,   352,  -566,   353,   354,   355,   356,  -566,
    -566,  -566,  -566,  -566,  -567,   326,     0,     1,   327,   113,
     328,  -567,   329,   330,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,     2,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,     0,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
       0,     0,   331,  -567,  -567,     0,     0,   332,   333,   334,
    -567,  -567,     0,     0,  -567,  -567,  -567,  -567,  -567,  -567,
     335,   336,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,     0,  -567,     0,   337,  -567,  -567,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,   346,   347,  -567,  -567,  -567,   348,
    -567,  -567,   349,  -567,   350,  -567,  -567,  -567,  -567,   781,
    -567,  1434,   351,   352,  -567,   353,   354,   355,   356,  -567,
    -567,  -567,  -567,  -567,  -577,   326,     0,     1,   327,   113,
     328,  -577,   329,   330,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     2,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,     0,   331,  -577,  -577,     0,     0,   332,   333,   334,
    -577,  -577,     0,     0,  -577,  -577,  -577,  -577,  -577,  -577,
     335,   336,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,     0,  -577,     0,   337,  -577,  -577,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,   346,   347,  -577,  -577,  -577,   348,
    -577,  -577,   349,  -577,   350,  -577,  -577,  1210,  -577,  -577,
    -577,  -577,   351,   352,  -577,   353,   354,   355,   356,  -577,
    -577,  -577,  -577,  -577,  -579,   326,     0,     1,   327,   113,
     328,  -579,   329,   330,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,     2,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       0,     0,   331,  -579,  -579,     0,     0,   332,   333,   334,
    -579,  -579,     0,     0,  -579,  -579,  -579,  -579,  -579,  -579,
     335,   336,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,     0,  -579,     0,   337,  -579,  -579,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,   346,   347,  -579,  -579,  -579,   348,
    -579,  -579,   349,   884,   350,  -579,  -579,   885,  -579,  -579,
    -579,  -579,   351,   352,  -579,   353,   354,   355,   356,  -579,
    -579,  -579,  -579,  -579,  -578,   326,     0,     1,   327,   113,
     328,  -578,   329,   330,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,     0,   331,  -578,  -578,     0,     0,   332,   333,   334,
    -578,  -578,     0,     0,  -578,  -578,  -578,  -578,  -578,  -578,
     335,   336,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     0,  -578,     0,   337,  -578,  -578,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,   346,   347,  -578,  -578,  -578,   348,
    -578,  -578,   349,  -578,   350,  -578,  -578,  1210,  -578,  -578,
    -578,  -578,   351,   352,  -578,   353,   354,   355,   356,  -578,
    -578,  -578,  -578,  -578,  -338,  1942,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
       0,     0,  -338,  -338,  -338,     0,     0,  -338,  -338,  -338,
    -338,  -338,     0,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,  -338,     0,  -338,  -338,  -338,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -342,  1978,     0,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
       0,     0,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,
    -342,  -342,     0,     0,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,     0,  -342,     0,  -342,  -342,  -342,     0,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -332,   326,     0,     1,   327,   113,
     328,  -332,   329,   330,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
       0,     0,   331,  -332,  -332,     0,     0,   332,   333,   334,
    -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,  -332,
     335,   336,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,  -332,     0,   337,  -332,  -332,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,   346,   347,  -332,  -332,  -332,   348,
    -332,  -332,   349,  -332,   350,  -332,  -332,  -332,  -332,   781,
    -332,  -332,   351,   352,  -332,   353,   354,   355,   356,  -332,
    -332,  -332,  -332,  -332,  -544,   326,     0,     1,   327,   113,
     328,  -544,   329,   330,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,     0,   331,  -544,  -544,     0,     0,   332,   333,   334,
    -544,  -544,     0,     0,  -544,  -544,  -544,  -544,  -544,  -544,
     335,   336,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     0,  -544,     0,   337,  -544,  -544,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,   346,   347,  -544,  -544,  -544,   348,
    -544,  -544,   349,  -544,   350,  -544,  -544,  -544,  -544,   781,
    -544,  -544,   351,   352,  -544,   353,   354,   355,   356,  -544,
    -544,  -544,  -544,  -544,  -552,   326,     0,     1,   327,   113,
     328,  -552,   329,   330,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       0,     0,   331,  -552,  -552,     0,     0,   332,   333,   334,
    -552,  -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,
     335,   336,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     0,  -552,     0,   337,  -552,  -552,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,   346,   347,  -552,  -552,  -552,   348,
    -552,  -552,   349,  -552,   350,  -552,  -552,  -552,  -552,   781,
    -552,  -552,   351,   352,  -552,   353,   354,   355,   356,  -552,
    -552,  -552,  -552,  -552,  -545,   326,     0,     1,   327,   113,
     328,  -545,   329,   330,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       0,     0,   331,  -545,  -545,     0,     0,   332,   333,   334,
    -545,  -545,     0,     0,  -545,  -545,  -545,  -545,  -545,  -545,
     335,   336,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,     0,  -545,     0,   337,  -545,  -545,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,   346,   347,  -545,  -545,  -545,   348,
    -545,  -545,   349,  -545,   350,  -545,  -545,  -545,  -545,   781,
    -545,  -545,   351,   352,  -545,   353,   354,   355,   356,  -545,
    -545,  -545,  -545,  -545,  -553,   326,     0,     1,   327,   113,
     328,  -553,   329,   330,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,     2,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
       0,     0,   331,  -553,  -553,     0,     0,   332,   333,   334,
    -553,  -553,     0,     0,  -553,  -553,  -553,  -553,  -553,  -553,
     335,   336,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,     0,  -553,     0,   337,  -553,  -553,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,   346,   347,  -553,  -553,  -553,   348,
    -553,  -553,   349,  -553,   350,  -553,  -553,  -553,  -553,   781,
    -553,  -553,   351,   352,  -553,   353,   354,   355,   356,  -553,
    -553,  -553,  -553,  -553,  -546,   326,     0,     1,   327,   113,
     328,  -546,   329,   330,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     2,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,     0,   331,  -546,  -546,     0,     0,   332,   333,   334,
    -546,  -546,     0,     0,  -546,  -546,  -546,  -546,  -546,  -546,
     335,   336,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,     0,  -546,     0,   337,  -546,  -546,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,   346,   347,  -546,  -546,  -546,   348,
    -546,  -546,   349,  -546,   350,  -546,  -546,  -546,  -546,   781,
    -546,  -546,   351,   352,  -546,   353,   354,   355,   356,  -546,
    -546,  -546,  -546,  -546,  -554,   326,     0,     1,   327,   113,
     328,  -554,   329,   330,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,     2,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       0,     0,   331,  -554,  -554,     0,     0,   332,   333,   334,
    -554,  -554,     0,     0,  -554,  -554,  -554,  -554,  -554,  -554,
     335,   336,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,     0,  -554,     0,   337,  -554,  -554,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,   346,   347,  -554,  -554,  -554,   348,
    -554,  -554,   349,  -554,   350,  -554,  -554,  -554,  -554,   781,
    -554,  -554,   351,   352,  -554,   353,   354,   355,   356,  -554,
    -554,  -554,  -554,  -554,  -547,   326,     0,     1,   327,   113,
     328,  -547,   329,   330,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,     2,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,     0,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
       0,     0,   331,  -547,  -547,     0,     0,   332,   333,   334,
    -547,  -547,     0,     0,  -547,  -547,  -547,  -547,  -547,  -547,
     335,   336,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,     0,  -547,     0,   337,  -547,  -547,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,   346,   347,  -547,  -547,  -547,   348,
    -547,  -547,   349,  -547,   350,  -547,  -547,  -547,  -547,   781,
    -547,  -547,   351,   352,  -547,   353,   354,   355,   356,  -547,
    -547,  -547,  -547,  -547,  -555,   326,     0,     1,   327,   113,
     328,  -555,   329,   330,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,     2,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,     0,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
       0,     0,   331,  -555,  -555,     0,     0,   332,   333,   334,
    -555,  -555,     0,     0,  -555,  -555,  -555,  -555,  -555,  -555,
     335,   336,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,     0,  -555,     0,   337,  -555,  -555,     0,   338,   339,
     340,   341,   342,   343,   344,   345,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,   346,   347,  -555,  -555,  -555,   348,
    -555,  -555,   349,  -555,   350,  -555,  -555,  -555,  -555,   781,
    -555,  -555,   351,   352,  -555,   353,   354,   355,   356,  -555,
    -555,  -555,  -555,  -555,  -340,  2085,     0,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
       0,     0,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,
    -340,  -340,     0,     0,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,     0,  -340,     0,  -340,  -340,  -340,     0,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -339,  2086,     0,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,     0,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -345,   793,     0,  -345,  -345,  -345,
    -345,   794,   795,   796,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,  -345,     0,  -345,  -345,  -345,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,   797,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    1207,  -345,  -345,   799,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -451,   878,     0,  -451,  -451,  -451,
    -451,     0,  -451,  -451,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
    -451,  -451,     0,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,     0,  -451,  -451,  -451,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,  -451,     0,  -451,  -451,  -451,
    1208,  -451,  -451,  -451,     0,  -451,  -451,  -451,  -451, -1113,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1113, -1113,
   -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113,
   -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113,
   -1113, -1113, -1113,     0, -1113, -1113, -1113, -1113, -1113, -1113,
   -1113, -1113, -1113, -1113, -1113,     0,     0,   331, -1113, -1113,
       0,     0,   332,   333,   334, -1113, -1113,     0,     0, -1113,
   -1113, -1113, -1113, -1113, -1113,   335,   336, -1113, -1113, -1113,
   -1113, -1113, -1113, -1113, -1113, -1113,     0, -1113,     0,   337,
   -1113, -1113,     0,   338,   339,   340,   341,   342,   343,   344,
     345, -1113, -1113, -1113, -1113, -1113, -1113, -1113, -1113,   346,
     347, -1113, -1113, -1113,   348,     0,     0,   349,   884,   350,
   -1113,     0,   885, -1113, -1113,     0, -1113,   351,   352,     0,
     353,   354,   355,   356, -1260,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,     0, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
       0,     0,   331, -1260, -1260,     0,     0,   332,   333,   334,
   -1260, -1260,     0,     0, -1260, -1260, -1260, -1260, -1260, -1260,
     335,   336, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260,     0, -1260,     0,   337, -1260, -1260,     0,   338,   339,
     340,   341,   342,   343,   344,   345, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260,   346,   347, -1260, -1260, -1260,   348,
       0,     0,   349,   884,   350,  1694,     0,   885, -1260, -1260,
       0, -1260,   351,   352,     0,   353,   354,   355,   356, -1218,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218,     0, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218,     0,     0,   331, -1218, -1218,
       0,     0,   332,   333,   334, -1218, -1218,     0,     0, -1218,
   -1218, -1218, -1218, -1218, -1218,   335,   336, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218,     0, -1218,     0,   337,
   -1218, -1218,     0,   338,   339,   340,   341,   342,   343,   344,
     345, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,   346,
     347, -1218, -1218, -1218,   348,     0,     0,   349,  1901,   350,
   -1218,     0,   885, -1218, -1218,     0, -1218,   351,   352,     0,
     353,   354,   355,   356, -1249,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331, -1249, -1249,     0,     0,   332,   333,   334,
   -1249, -1249,     0,     0, -1249,    35, -1249, -1249, -1249, -1249,
     335,   336,  1182, -1249,   684,   685,   686, -1249, -1249, -1249,
   -1249,     0, -1249,     0,   337, -1249, -1249,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47, -1249, -1249,
   -1249, -1249, -1249, -1249,   346,   347, -1249, -1249, -1249,   348,
       0,     0,   349,   884,   350,   687,     0,   885, -1249,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356,  -578,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,     0,   331,  -578,  -578,
       0,     0,   332,   333,   334,  -578,  -578,     0,     0,  -578,
    -578,  -578,  -578,  -578,  -578,   335,   336,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   337,
    -578,  -578,     0,   338,   339,   340,   341,   342,   343,   344,
     345,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   346,
     347,  -578,  -578,  -578,   348,     0,     0,   349,  -578,   350,
    1209,     0,  1210,  -578,  -578,     0,  -578,   351,   352,     0,
     353,   354,   355,   356, -1241,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,     0, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
       0,     0,   331, -1241, -1241,     0,     0,   332,   333,   334,
   -1241, -1241,     0,     0, -1241, -1241, -1241, -1241, -1241, -1241,
     335,   336, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241,     0, -1241,     0,   337, -1241, -1241,     0,   338,   339,
     340,   341,   342,   343,   344,   345, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241,   346,   347, -1241, -1241, -1241,   348,
       0,     0,   349,  2134,   350, -1241,     0,  1210, -1241, -1241,
       0, -1241,   351,   352,     0,   353,   354,   355,   356, -1242,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242,     0, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242,     0,     0,   331, -1242, -1242,
       0,     0,   332,   333,   334, -1242, -1242,     0,     0, -1242,
   -1242, -1242, -1242, -1242, -1242,   335,   336, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242,     0, -1242,     0,   337,
   -1242, -1242,     0,   338,   339,   340,   341,   342,   343,   344,
     345, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,   346,
     347, -1242, -1242, -1242,   348,     0,     0,   349,   884,   350,
    2135,     0,   885, -1242, -1242,     0, -1242,   351,   352,     0,
     353,   354,   355,   356, -1236,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331, -1236, -1236,     0,     0,   332,   333,   334,
   -1236, -1236,     0,     0, -1236,    35, -1236, -1236, -1236, -1236,
     335,   336,  1182, -1236,   684,   685,   686, -1236, -1236, -1236,
   -1236,     0, -1236,     0,   337, -1236, -1236,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47, -1236, -1236,
   -1236, -1236, -1236, -1236,   346,   347, -1236, -1236, -1236,   348,
       0,     0,   349,   884,   350,   687,     0,   885, -1236,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1184,
     662,     0, -1184, -1184, -1184, -1184,     0, -1184, -1184,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184,     0, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184,     0,     0, -1184, -1184, -1184,
       0,     0, -1184, -1184, -1184, -1184, -1184,     0,     0, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184,     0, -1184,     0, -1184,
   -1184, -1184,     0, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184,     0,     0, -1184,     0, -1184,
     663,     0, -1184, -1184, -1184,     0, -1184, -1184, -1184,     0,
   -1184, -1184, -1184, -1184, -1207,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1207,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1207,    35, -1207, -1207, -1207, -1207,
     335,   682,   683,   270,   684,   685,   686, -1207, -1207, -1207,
   -1207,     0, -1207,     0,   337, -1207,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1207, -1207,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1185,
     662,     0, -1185, -1185, -1185, -1185,     0, -1185, -1185,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185,     0, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185,     0,     0, -1185, -1185, -1185,
       0,     0, -1185, -1185, -1185, -1185, -1185,     0,     0, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185,     0, -1185,     0, -1185,
   -1185, -1185,     0, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185,     0,     0, -1185,     0, -1185,
     663,     0, -1185, -1185, -1185,     0, -1185, -1185, -1185,     0,
   -1185, -1185, -1185, -1185, -1246,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,     0,  1174,
    1175,  1176,   674,  1177,  1178,  1179,  1180,   679,   680,  1181,
       0,     0,   331, -1246, -1246,     0,     0,   332,   333,   334,
   -1246, -1246,     0,     0, -1246,    35, -1246, -1246, -1246, -1246,
     335,   336,  1182, -1246,   684,   685,   686, -1246, -1246, -1246,
   -1246,     0, -1246,     0,   337, -1246, -1246,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47, -1246, -1246,
   -1246, -1246, -1246, -1246,   346,   347, -1246, -1246, -1246,   348,
       0,     0,   349,     0,   350,   687,     0, -1246, -1246,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1262,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262,     0, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262,     0,     0,   331, -1262, -1262,
       0,     0,   332,   333,   334, -1262, -1262,     0,     0, -1262,
   -1262, -1262, -1262, -1262, -1262,   335,   336, -1262, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262, -1262,     0, -1262,     0,   337,
   -1262, -1262,     0,   338,   339,   340,   341,   342,   343,   344,
     345, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,   346,
     347, -1262, -1262, -1262,   348,     0,     0,   349,     0,   350,
    1192,     0, -1262, -1262,   781,     0, -1262,   351,   352,     0,
     353,   354,   355,   356, -1197,  1211,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1197,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1197,    35, -1197, -1197, -1197, -1197,
     335,   682,   683,   270,   684,   685,   686, -1197, -1197, -1197,
   -1197,     0, -1197,     0,   337, -1197,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1197, -1197,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1201,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,     0,     0,   331,   268, -1201,
       0,     0,   332,   333,   334,    31,    32,     0,     0, -1201,
      35, -1201, -1201, -1201, -1201,   335,   682,   683,   270,   684,
     685,   686, -1201, -1201, -1201, -1201,     0, -1201,     0,   337,
   -1201,   271,     0,   338,   339,   340,   341,   342,   343,   344,
     345,    46,    47,   272,   273,   274,   275,   222,   223,   346,
     347,   276,   277,    56,   348,     0,     0,   349,     0,   350,
     687,     0, -1201, -1201,   278,     0,   688,   351,   352,     0,
     353,   354,   355,   356, -1196,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1196,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1196,    35, -1196, -1196, -1196, -1196,
     335,   682,   683,   270,   684,   685,   686, -1196, -1196, -1196,
   -1196,     0, -1196,     0,   337, -1196,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1196, -1196,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1200,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,     0,     0,   331,   268, -1200,
       0,     0,   332,   333,   334,    31,    32,     0,     0, -1200,
      35, -1200, -1200, -1200, -1200,   335,   682,   683,   270,   684,
     685,   686, -1200, -1200, -1200, -1200,     0, -1200,     0,   337,
   -1200,   271,     0,   338,   339,   340,   341,   342,   343,   344,
     345,    46,    47,   272,   273,   274,   275,   222,   223,   346,
     347,   276,   277,    56,   348,     0,     0,   349,     0,   350,
     687,     0, -1200, -1200,   278,     0,   688,   351,   352,     0,
     353,   354,   355,   356, -1100,  1224,     0, -1100, -1100, -1100,
   -1100,     0, -1100, -1100,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,     0, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
       0,     0, -1100, -1100, -1100,     0,     0, -1100, -1100, -1100,
   -1100, -1100,     0,     0, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100,     0, -1100,     0, -1100, -1100, -1100,     0, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
       0,     0, -1100,     0, -1100, -1100,     0, -1100, -1100, -1100,
       0, -1100, -1100, -1100,     0, -1100, -1100, -1100, -1100, -1102,
    1225,     0, -1102, -1102, -1102, -1102,     0, -1102, -1102,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102,     0, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102,     0,     0, -1102, -1102, -1102,
       0,     0, -1102, -1102, -1102, -1102, -1102,     0,     0, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102,     0, -1102,     0, -1102,
   -1102, -1102,     0, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102,     0,     0, -1102,     0, -1102,
   -1102,     0, -1102, -1102, -1102,     0, -1102, -1102, -1102,     0,
   -1102, -1102, -1102, -1102, -1148,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1148,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1148,    35, -1148, -1148, -1148, -1148,
     335,   682,   683,   270,   684,   685,   686, -1148, -1148, -1148,
   -1148,     0, -1148,     0,   337, -1148,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1148, -1148,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1150,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,     0,     0,   331,   268, -1150,
       0,     0,   332,   333,   334,    31,    32,     0,     0, -1150,
      35, -1150, -1150, -1150, -1150,   335,   682,   683,   270,   684,
     685,   686, -1150, -1150, -1150, -1150,     0, -1150,     0,   337,
   -1150,   271,     0,   338,   339,   340,   341,   342,   343,   344,
     345,    46,    47,   272,   273,   274,   275,   222,   223,   346,
     347,   276,   277,    56,   348,     0,     0,   349,     0,   350,
     687,     0, -1150, -1150,   278,     0,   688,   351,   352,     0,
     353,   354,   355,   356, -1198,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1198,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1198,    35, -1198, -1198, -1198, -1198,
     335,   682,   683,   270,   684,   685,   686, -1198, -1198, -1198,
   -1198,     0, -1198,     0,   337, -1198,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1198, -1198,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1202,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,     0,     0,   331,   268, -1202,
       0,     0,   332,   333,   334,    31,    32,     0,     0, -1202,
      35, -1202, -1202, -1202, -1202,   335,   682,   683,   270,   684,
     685,   686, -1202, -1202, -1202, -1202,     0, -1202,     0,   337,
   -1202,   271,     0,   338,   339,   340,   341,   342,   343,   344,
     345,    46,    47,   272,   273,   274,   275,   222,   223,   346,
     347,   276,   277,    56,   348,     0,     0,   349,     0,   350,
     687,     0, -1202, -1202,   278,     0,   688,   351,   352,     0,
     353,   354,   355,   356, -1199,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
       0,     0,   331,   268, -1199,     0,     0,   332,   333,   334,
      31,    32,     0,     0, -1199,    35, -1199, -1199, -1199, -1199,
     335,   682,   683,   270,   684,   685,   686, -1199, -1199, -1199,
   -1199,     0, -1199,     0,   337, -1199,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,   276,   277,    56,   348,
       0,     0,   349,     0,   350,   687,     0, -1199, -1199,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356, -1203,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,     0,     0,   331,   268, -1203,
       0,     0,   332,   333,   334,    31,    32,     0,     0, -1203,
      35, -1203, -1203, -1203, -1203,   335,   682,   683,   270,   684,
     685,   686, -1203, -1203, -1203, -1203,     0, -1203,     0,   337,
   -1203,   271,     0,   338,   339,   340,   341,   342,   343,   344,
     345,    46,    47,   272,   273,   274,   275,   222,   223,   346,
     347,   276,   277,    56,   348,     0,     0,   349,     0,   350,
     687,     0, -1203, -1203,   278,     0,   688,   351,   352,     0,
     353,   354,   355,   356, -1194,   662,     0, -1194, -1194, -1194,
   -1194,     0, -1194, -1194,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,     0, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
       0,     0, -1194, -1194, -1194,     0,     0, -1194, -1194, -1194,
   -1194, -1194,     0,     0, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194,     0, -1194,     0, -1194, -1194, -1194,     0, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
       0,     0, -1194,     0, -1194,   663,     0, -1194, -1194, -1194,
       0, -1194, -1194, -1194,     0, -1194, -1194, -1194, -1194, -1195,
     662,     0, -1195, -1195, -1195, -1195,     0, -1195, -1195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195,     0, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195,     0,     0, -1195, -1195, -1195,
       0,     0, -1195, -1195, -1195, -1195, -1195,     0,     0, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195,     0, -1195,     0, -1195,
   -1195, -1195,     0, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195,     0,     0, -1195,     0, -1195,
     663,     0, -1195, -1195, -1195,     0, -1195, -1195, -1195,     0,
   -1195, -1195, -1195, -1195, -1024,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,     0, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
       0,     0,   331, -1024, -1024,     0,     0,   332,   333,   334,
   -1024, -1024,     0,     0, -1024, -1024, -1024, -1024, -1024, -1024,
     335,   336, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024,     0, -1024,     0,   337, -1024, -1024,     0,   338,   339,
     340,   341,   342,   343,   344,   345, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024,   346,   347, -1024, -1024, -1024,   348,
       0,     0,   349,     0,   350, -1024,     0,  1869,  1870,  1072,
       0, -1024,   351,   352,     0,   353,   354,   355,   356, -1154,
     662,     0, -1154, -1154, -1154, -1154,     0, -1154, -1154,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154,     0, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154,     0,     0, -1154, -1154, -1154,
       0,     0, -1154, -1154, -1154, -1154, -1154,     0,     0, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154,     0, -1154,     0, -1154,
   -1154, -1154,     0, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154,     0,     0, -1154,     0, -1154,
     663,     0, -1154, -1154, -1154,     0, -1154, -1154, -1154,     0,
   -1154, -1154, -1154, -1154, -1155,   662,     0, -1155, -1155, -1155,
   -1155,     0, -1155, -1155,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,     0, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
       0,     0, -1155, -1155, -1155,     0,     0, -1155, -1155, -1155,
   -1155, -1155,     0,     0, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155,     0, -1155,     0, -1155, -1155, -1155,     0, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
       0,     0, -1155,     0, -1155,   663,     0, -1155, -1155, -1155,
       0, -1155, -1155, -1155,     0, -1155, -1155, -1155, -1155, -1151,
     662,     0, -1151, -1151, -1151, -1151,     0, -1151, -1151,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151,     0, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151,     0,     0, -1151, -1151, -1151,
       0,     0, -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151,     0, -1151,     0, -1151,
   -1151, -1151,     0, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,     0, -1151,
     663,     0, -1151, -1151, -1151,     0, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1026,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,     0, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
       0,     0,   331, -1026, -1026,     0,     0,   332,   333,   334,
   -1026, -1026,     0,     0, -1026, -1026, -1026, -1026, -1026, -1026,
     335,   336, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026,     0, -1026,     0,   337, -1026, -1026,     0,   338,   339,
     340,   341,   342,   343,   344,   345, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026,   346,   347, -1026, -1026, -1026,   348,
       0,     0,   349,     0,   350, -1026,     0, -1026,  2044,  1072,
       0, -1026,   351,   352,     0,   353,   354,   355,   356, -1018,
    2047,     0, -1018, -1018, -1018, -1018,     0, -1018, -1018,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018,     0, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018,     0,     0, -1018, -1018, -1018,
       0,     0, -1018, -1018, -1018, -1018, -1018,     0,     0, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018,     0, -1018,     0, -1018,
   -1018, -1018,     0, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018,     0,     0, -1018,     0, -1018,
   -1018,     0, -1018, -1018, -1018,     0, -1018, -1018, -1018,     0,
   -1018, -1018, -1018, -1018, -1152,   662,     0, -1152, -1152, -1152,
   -1152,     0, -1152, -1152,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,     0, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
       0,     0, -1152, -1152, -1152,     0,     0, -1152, -1152, -1152,
   -1152, -1152,     0,     0, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152,     0, -1152,     0, -1152, -1152, -1152,     0, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
       0,     0, -1152,     0, -1152,   663,     0, -1152, -1152, -1152,
       0, -1152, -1152, -1152,     0, -1152, -1152, -1152, -1152, -1153,
     662,     0, -1153, -1153, -1153, -1153,     0, -1153, -1153,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153,     0, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153,     0,     0, -1153, -1153, -1153,
       0,     0, -1153, -1153, -1153, -1153, -1153,     0,     0, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153,     0, -1153,     0, -1153,
   -1153, -1153,     0, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153,     0,     0, -1153,     0, -1153,
     663,     0, -1153, -1153, -1153,     0, -1153, -1153, -1153,     0,
   -1153, -1153, -1153, -1153, -1243,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,     0, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
       0,     0,   331, -1243, -1243,     0,     0,   332,   333,   334,
   -1243, -1243,     0,     0, -1243, -1243, -1243, -1243, -1243, -1243,
     335,   336, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243,     0, -1243,     0,   337, -1243, -1243,     0,   338,   339,
     340,   341,   342,   343,   344,   345, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243,   346,   347, -1243, -1243, -1243,   348,
       0,     0,   349,     0,   350, -1243,     0, -1243, -1243, -1243,
       0, -1243,   351,   352,     0,   353,   354,   355,   356, -1019,
    2126,     0, -1019, -1019, -1019, -1019,     0, -1019, -1019,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019,     0, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019,     0,     0, -1019, -1019, -1019,
       0,     0, -1019, -1019, -1019, -1019, -1019,     0,     0, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019,     0, -1019,     0, -1019,
   -1019, -1019,     0, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019,     0,     0, -1019,     0, -1019,
   -1019,     0, -1019, -1019, -1019,     0, -1019, -1019, -1019,     0,
   -1019, -1019, -1019, -1019,  -919,   624,     0,  -919,  -919,  -919,
    -919,     0,  -919,  -919,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,     0,     0,
    -919,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -919,  -919,  -919,     0,     0,  -919,  -919,  -919,
    -919,  -919,     0,     0,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,     0,     0,  -919,  -919,  -919,
    -919,     0,  -919,     0,  -919,  -919,  -919,     0,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,     0,     0,  -919,  -919,
       0,     0,  -919,   898,  -919,  -919,     0,   626,  -919,  -919,
       0,     0,  -919,  -919,     0,  -919,  -919,  -919,  -919,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   216,   217,   218,
     219,   220,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    21,    22,   266,   267,    25,
      26,    27,     0,   671,   672,   673,   674,   675,   676,   677,
     678,   679,   680,   681,     0,     0,   331,   268,     0,     0,
       0,   332,   333,   334,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   335,   682,   683,   270,   684,   685,
     686,     0,     0,     0,     0,     0,     0,     0,   337,     0,
     271,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,   272,   273,   274,   275,   222,   223,   346,   347,
     276,   277,    56,   348,     0,     0,   349,     0,   350,   687,
       0,     0,     0,   278,     0,   688,   351,   352,     0,   353,
     354,   355,   356,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,  1174,  1175,  1176,
     674,  1177,  1178,  1179,  1180,   679,   680,  1181,     0,     0,
     331,   268,     0,     0,     0,   332,   333,   334,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   335,   682,
     683,   270,   684,   685,   686,     0,     0,     0,     0,     0,
       0,     0,   337,     0,   271,     0,   338,   339,   340,   341,
     342,   343,   344,   345,    46,    47,   272,   273,   274,   275,
     222,   223,   346,   347,   276,   277,    56,   348,     0,     0,
     349,     0,   350,   687,     0,     0,     0,   278,     0,   688,
     351,   352,     0,   353,   354,   355,   356,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   216,   217,   218,   219,   220,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    21,    22,   266,   267,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   268,     0,     0,     0,   332,
     333,   334,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   335,   682,    41,   270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,   271,     0,
     338,   339,   340,   341,   342,   343,   344,   345,    46,    47,
     272,   273,   274,   275,   222,   223,   346,   347,     0,     0,
      56,   348,     0,     0,   349,     0,   350,  1042,     0,  1043,
    1044,   781,     0,     0,   351,   352,     0,   353,   354,   355,
     356,  1296,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   216,
     217,   218,   219,   220,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    21,    22,   266,
     267,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   268,
       0,     0,     0,   332,   333,   334,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   335,   682,    41,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,     0,   271,     0,   338,   339,   340,   341,   342,   343,
     344,   345,    46,    47,   272,   273,   274,   275,   222,   223,
     346,   347,     0,     0,    56,   348,     0,     0,   349,     0,
     350,  1042,     0,  1043,  -110,   781,     0,     0,   351,   352,
       0,   353,   354,   355,   356,  1303,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   268,     0,     0,     0,   332,   333,   334,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     335,   682,    41,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,     0,     0,    56,   348,
       0,     0,   349,     0,   350,  1042,     0,  1043,   -98,   781,
       0,     0,   351,   352,     0,   353,   354,   355,   356,  1307,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   216,   217,   218,
     219,   220,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    21,    22,   266,   267,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   268,     0,     0,
       0,   332,   333,   334,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   335,   682,    41,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,     0,
     271,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,   272,   273,   274,   275,   222,   223,   346,   347,
       0,     0,    56,   348,     0,     0,   349,     0,   350,  1042,
       0,  1043,  -102,   781,     0,     0,   351,   352,     0,   353,
     354,   355,   356,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   268,     0,     0,     0,   332,   333,   334,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   335,   682,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,     0,   271,     0,   338,   339,   340,   341,
     342,   343,   344,   345,    46,    47,   272,   273,   274,   275,
     222,   223,   346,   347,     0,     0,    56,   348,     0,     0,
     349,     0,   350,  1581,     0,  1043,   -65,   781,     0,     0,
     351,   352,     0,   353,   354,   355,   356,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   216,   217,   218,   219,   220,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    21,    22,   266,   267,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   268,     0,     0,     0,   332,
     333,   334,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   335,   682,    41,   270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,   271,     0,
     338,   339,   340,   341,   342,   343,   344,   345,    46,    47,
     272,   273,   274,   275,   222,   223,   346,   347,     0,     0,
      56,   348,     0,     0,   349,     0,   350,  1590,     0,  1043,
    1591,   781,     0,     0,   351,   352,     0,   353,   354,   355,
     356,  1650,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   216,
     217,   218,   219,   220,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    21,    22,   266,
     267,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   268,
       0,     0,     0,   332,   333,   334,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   335,   682,    41,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,     0,   271,     0,   338,   339,   340,   341,   342,   343,
     344,   345,    46,    47,   272,   273,   274,   275,   222,   223,
     346,   347,     0,     0,    56,   348,     0,     0,   349,     0,
     350,  1042,     0,  1043,   -81,   781,     0,     0,   351,   352,
       0,   353,   354,   355,   356,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   268,     0,     0,     0,   332,   333,   334,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     335,   682,    41,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,     0,     0,    56,   348,
       0,     0,   349,     0,   350,  1590,     0,  1043,  -107,   781,
       0,     0,   351,   352,     0,   353,   354,   355,   356,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   216,   217,   218,
     219,   220,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    21,    22,   266,   267,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   268,     0,     0,
       0,   332,   333,   334,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   335,   682,    41,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,     0,
     271,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,   272,   273,   274,   275,   222,   223,   346,   347,
       0,     0,    56,   348,     0,     0,   349,     0,   350,  1590,
       0,  1043,   -97,   781,     0,     0,   351,   352,     0,   353,
     354,   355,   356,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   268,     0,     0,     0,   332,   333,   334,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   335,   682,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,     0,   271,     0,   338,   339,   340,   341,
     342,   343,   344,   345,    46,    47,   272,   273,   274,   275,
     222,   223,   346,   347,     0,     0,    56,   348,     0,     0,
     349,     0,   350,  1590,     0,  1043,  -101,   781,     0,     0,
     351,   352,     0,   353,   354,   355,   356,  1828,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   216,   217,   218,   219,   220,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    21,    22,   266,   267,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   268,     0,     0,     0,   332,
     333,   334,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   335,   682,    41,   270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,   271,     0,
     338,   339,   340,   341,   342,   343,   344,   345,    46,    47,
     272,   273,   274,   275,   222,   223,   346,   347,     0,     0,
      56,   348,     0,     0,   349,     0,   350,  1042,     0,  1043,
     -88,   781,     0,     0,   351,   352,     0,   353,   354,   355,
     356,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   216,
     217,   218,   219,   220,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    21,    22,   266,
     267,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   268,
       0,     0,     0,   332,   333,   334,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   335,   682,    41,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,     0,   271,     0,   338,   339,   340,   341,   342,   343,
     344,   345,    46,    47,   272,   273,   274,   275,   222,   223,
     346,   347,     0,     0,    56,   348,     0,     0,   349,     0,
     350,  1590,     0,  1043,   -78,   781,     0,     0,   351,   352,
       0,   353,   354,   355,   356,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   268,     0,     0,     0,   332,   333,   334,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     335,   682,    41,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,   271,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,   272,   273,
     274,   275,   222,   223,   346,   347,     0,     0,    56,   348,
       0,     0,   349,     0,   350,  1590,     0,  1043,   -85,   781,
       0,     0,   351,   352,     0,   353,   354,   355,   356,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,    30,     0,     0,
       0,   332,   333,   334,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,   335,   446,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,     0,
      43,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,    48,    49,    50,    51,   222,   223,   346,   347,
       0,     0,    56,   348,     0,     0,   349,   326,   350,     1,
     327,   113,   328,     0,   329,   330,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   216,   217,   218,   219,   220,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   916,    30,     0,     0,     0,   332,
     333,   334,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,   335,   446,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,    43,     0,
     338,   339,   340,   341,   342,   343,   344,   345,    46,    47,
      48,    49,    50,    51,   222,   223,   346,   347,     0,     0,
      56,   348,     0,     0,   349,   326,   350,     1,   327,   113,
     328,     0,   329,   330,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,    30,     0,     0,     0,   332,   333,   334,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
     335,   446,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,    43,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,    48,    49,
      50,    51,     0,     0,   346,   347,     0,     0,    56,   348,
       0,     0,   349,   771,   350,     0,     0,     0,     0,     0,
       0,     0,   351,   352,     0,   353,   354,   355,   356,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1242,    30,     0,     0,
       0,   332,   333,   334,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,   335,   446,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,     0,
      43,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,    48,    49,    50,    51,     0,     0,   346,   347,
       0,     0,    56,   348,     0,     0,   349,   771,   350,     0,
       0,     0,     0,     0,     0,     0,   351,   352,     0,   353,
     354,   355,   356,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,    30,     0,     0,     0,   332,   333,   334,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,   335,   446,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,     0,    43,     0,   338,   339,   340,   341,
     342,   343,   344,   345,    46,    47,    48,    49,    50,    51,
       0,     0,   346,   347,     0,     0,    56,   348,     0,     0,
     349,   326,   350,     1,   327,   113,   328,   278,   329,   330,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,   605,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,    30,
       0,     0,     0,   332,   333,   334,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,   335,   446,    41,    42,
       0,   326,     0,     1,   327,   113,   328,     0,   329,   330,
     337,     0,    43,     0,   338,   339,   340,   341,   342,   343,
     344,   345,    46,    47,    48,    49,    50,    51,     2,     0,
     346,   347,     0,     0,    56,   939,     0,     0,   940,   771,
     350,     0,     0,     0,     0,     0,     0,     0,   351,   352,
       0,   353,   354,   355,   356,  1174,  1175,  1176,   674,  1177,
    1178,  1179,  1180,   679,   680,  1181,     0,     0,   331,     0,
       0,     0,     0,   332,   333,   334,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,   335,   336,  1182,     0,
     684,   685,   686,     0,     0,     0,     0,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,    46,    47,     0,     0,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,  -454,
     350,   687,     0,  -454,     0,   278,     0,   688,   351,   352,
       0,   353,   354,   355,   356,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1174,
    1175,  1176,   674,  1177,  1178,  1179,  1180,   679,   680,  1181,
       0,     0,   331,     0,     0,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
     335,   336,  1182,     0,   684,   685,   686,     0,     0,     0,
       0,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,    46,    47,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,   884,   350,   687,     0,   885,     0,   278,
       0,   688,   351,   352,     0,   353,   354,   355,   356,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1174,  1175,  1176,   674,  1177,  1178,  1179,
    1180,   679,   680,  1181,     0,     0,   331,     0,     0,     0,
       0,   332,   333,   334,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,   335,   336,  1182,     0,   684,   685,
     686,     0,     0,     0,     0,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
      46,    47,     0,     0,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,     0,   350,   687,
       0,     0,     0,   278,     0,   688,   351,   352,     0,   353,
     354,   355,   356,  1904,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1174,  1175,  1176,
     674,  1177,  1178,  1179,  1180,   679,   680,  1181,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,   335,   336,
    1182,     0,   684,   685,   686,     0,     0,     0,     0,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,    46,    47,     0,     0,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,     0,   350,   687,     0,     0,     0,   278,     0,   688,
     351,   352,     0,   353,   354,   355,   356,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,   335,   336,  1182,     0,   684,   685,   686,     0,
       0,     0,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,    46,    47,
       0,     0,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,     0,   350,   687,     0,     0,
       0,   278,     0,   688,   351,   352,     0,   353,   354,   355,
     356,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,     0,
       0,     0,     0,   332,   333,   334,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,     0,   331,     0,     0,
     346,   347,   332,   333,   334,   348,     0,     0,   349,   884,
     350,     0,     0,  1783,     0,   335,   336,  1804,   351,   352,
       0,   353,   354,   355,   356,     0,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,   884,   350,
       0,     0,  1783,     0,     0,     0,  1808,   351,   352,     0,
     353,   354,   355,   356,   326,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1924,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,     0,     0,     0,     0,   332,   333,   334,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,     0,
     331,     0,     0,   346,   347,   332,   333,   334,   348,     0,
       0,   349,   884,   350,  1694,     0,   885,     0,   335,   336,
       0,   351,   352,     0,   353,   354,   355,   356,     0,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,   884,   350,  1925,     0,   885,     0,     0,     0,     0,
     351,   352,     0,   353,   354,   355,   356,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2068,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,     0,   331,     0,     0,   346,   347,   332,   333,
     334,   348,     0,     0,   349,   884,   350,  1925,     0,   885,
       0,   335,   336,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,   884,   350,  1925,     0,   885,     0,
       0,     0,     0,   351,   352,     0,   353,   354,   355,   356,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,     0,   331,     0,     0,   346,
     347,   332,   333,   334,   348,     0,     0,   349,  2136,   350,
    2137,     0,  1210,     0,   335,   336,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,   884,   350,  2135,
       0,   885,     0,     0,     0,     0,   351,   352,     0,   353,
     354,   355,   356,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,     0,   350,     0,     0,  2229,  2230,  1072,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     2,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,     0,   350,
       0,     0,     0,     0,   781,     0,     0,   351,   352,   782,
     353,   354,   355,   356,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,   326,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     2,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,   879,   350,     0,     0,   880,
       0,     0,     0,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,     0,     0,     0,     0,   332,   333,   334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     2,     0,
       0,     0,     0,   346,   347,     0,     0,     0,   348,     0,
       0,   349,   884,   350,     0,     0,   885,     0,     0,     0,
       0,   351,   352,     0,   353,   354,   355,   356,     0,     0,
       0,     0,   326,     0,     1,   327,   113,   328,   331,   329,
     330,     0,     0,   332,   333,   334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,   331,
     350,  1209,     0,  1210,   332,   333,   334,     0,   351,   352,
       0,   353,   354,   355,   356,     0,     0,   335,   336,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     2,     0,     0,     0,
       0,   346,   347,     0,     0,     0,   348,     0,     0,   349,
    1312,   350,     0,     0,     0,     0,   781,     0,     0,   351,
     352,     0,   353,   354,   355,   356,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,     0,     0,     0,
       0,   332,   333,   334,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   335,   336,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     2,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,  1379,   350,     0,
       0,     0,     0,   781,     0,     0,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,     0,     0,     0,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,   336,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       2,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,  1648,   350,     0,     0,  1649,     0,
       0,     0,     0,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,     0,   350,  1192,     0,     0,     0,   781,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,   326,     0,     1,   327,   113,   328,   331,   329,   330,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,   331,   350,
    1693,     0,  1210,   332,   333,   334,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,   335,   336,   326,     0,
       1,   327,   113,   328,     0,   329,   330,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     2,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,  1747,
     350,     0,     0,  1210,     0,     0,     0,     0,   351,   352,
       0,   353,   354,   355,   356,     0,     0,     0,     0,   326,
       0,     1,   327,   113,   328,   331,   329,   330,     0,     0,
     332,   333,   334,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   335,   336,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,   349,   331,   350,     0,     0,
    1210,   332,   333,   334,     0,   351,   352,  1777,   353,   354,
     355,   356,     0,     0,   335,   336,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     2,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,     0,   350,     0,
       0,  1780,     0,     0,     0,  1781,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,   326,     0,     1,
     327,   113,   328,   331,   329,   330,     0,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,   336,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,   331,   350,     0,     0,  1210,   332,
     333,   334,     0,   351,   352,  1787,   353,   354,   355,   356,
       0,     0,   335,   336,   326,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     2,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,     0,   350,     0,     0,  1780,
       0,     0,     0,  1789,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,   326,     0,     1,   327,   113,
     328,   331,   329,   330,     0,     0,   332,   333,   334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,   346,   347,     0,     0,     0,   348,     0,
       0,   349,   331,   350,     0,     0,  1780,   332,   333,   334,
    1802,   351,   352,     0,   353,   354,   355,   356,     0,     0,
     335,   336,   326,     0,     1,   327,   113,   328,     0,   329,
     330,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     2,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,     0,   350,     0,     0,  1780,     0,     0,
       0,  1806,   351,   352,     0,   353,   354,   355,   356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
       0,     0,     0,     0,   332,   333,   334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,   336,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     2,     0,     0,     0,
       0,   346,   347,     0,     0,     0,   348,     0,     0,   349,
    1900,   350,     0,     0,  1210,     0,     0,     0,     0,   351,
     352,     0,   353,   354,   355,   356,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,     0,     0,     0,
       0,   332,   333,   334,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   335,   336,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     2,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,  1902,   350,     0,
       0,  1210,     0,     0,     0,     0,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,     0,     0,     0,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,   336,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       2,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,  1903,   350,     0,     0,   885,     0,
       0,     0,     0,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,  1906,   350,     0,     0,  1210,     0,     0,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     2,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,  1684,   350,
    1685,     0,     0,     0,     0,     0,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,     0,     0,  1926,     0,
       1,   327,   113,   328,   331,   329,   330,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,   331,   350,  1923,     0,  1210,
     332,   333,   334,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,   335,   336,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     2,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,   349,  1927,   350,  1685,     0,
       0,     0,     0,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,     0,     0,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,   336,   326,     0,     1,   327,   113,   328,     0,   329,
     330,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     2,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,  2052,   350,     0,     0,  1210,     0,     0,
       0,     0,   351,   352,     0,   353,   354,   355,   356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
       0,     0,     0,     0,   332,   333,   334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,   336,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     2,     0,     0,     0,
       0,   346,   347,     0,     0,     0,   348,     0,     0,   349,
    1901,   350,     0,     0,   885,     0,     0,     0,     0,   351,
     352,     0,   353,   354,   355,   356,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,     0,     0,     0,
       0,   332,   333,   334,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   335,   336,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     2,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,  2060,   350,     0,
       0,  1210,     0,     0,     0,     0,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,     0,     0,     0,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,   336,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       2,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,  1927,   350,  1685,     0,     0,     0,
       0,     0,     0,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,  2140,   350,     0,     0,  1210,     0,     0,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     2,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,     0,   350,
       0,     0,     0,  2168,  1072,     0,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,   326,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     2,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,     0,   350,     0,     0,     0,
    2170,  1072,     0,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,     0,     0,     0,     0,   332,   333,   334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     2,     0,
       0,     0,     0,   346,   347,     0,     0,     0,   348,     0,
       0,   349,  2173,   350,     0,     0,  1210,     0,     0,     0,
       0,   351,   352,     0,   353,   354,   355,   356,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,     0,
       0,     0,     0,   332,   333,   334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,   336,   326,     0,
       1,   327,   113,   328,     0,   329,   330,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     2,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,  2174,
     350,     0,     0,  1210,     0,     0,     0,     0,   351,   352,
       0,   353,   354,   355,   356,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,     0,     0,     0,     0,
     332,   333,   334,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   335,   336,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     2,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,   349,  2203,   350,     0,     0,
    1210,     0,     0,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,     0,     0,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,   336,   326,     0,     1,   327,   113,   328,     0,   329,
     330,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     2,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,     0,   350,     0,     0,     0,  2237,  1072,
       0,     0,   351,   352,     0,   353,   354,   355,   356,     0,
       0,     0,     0,   326,     0,     1,   327,   113,   328,   331,
     329,   330,     0,     0,   332,   333,   334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,   336,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,   346,   347,     0,     0,     0,   348,     0,     0,   349,
     331,   350,     0,     0,     0,   332,   333,   334,     0,   351,
     352,   590,   353,   354,   355,   356,     0,     0,   335,   336,
     326,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,     0,   350,     0,     0,     0,     0,   781,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,   326,     0,     1,   327,   113,   328,   331,   329,   330,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,   331,   350,
       0,     0,     0,   332,   333,   334,     0,   351,   352,   890,
     353,   354,   355,   356,     0,     0,   335,   336,   326,     0,
       1,   327,   113,   328,     0,   329,   330,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     2,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     894,   353,   354,   355,   356,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,     0,     0,     0,     0,
     332,   333,   334,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   335,   336,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     2,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,   349,     0,   350,     0,     0,
       0,     0,  1072,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,   326,     0,     1,   327,
     113,   328,   331,   329,   330,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,   336,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,   331,   350,     0,     0,     0,   332,   333,
     334,     0,   351,   352,  1113,   353,   354,   355,   356,     0,
       0,   335,   336,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       2,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,     0,   350,     0,     0,     0,     0,
       0,     0,  1166,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
    1523,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,   771,   350,     0,     0,     0,     0,     0,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,   326,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     2,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,     0,   350,
       0,     0,     0,     0,   781,     0,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,     0,     0,   326,     0,
       1,   327,   113,   328,   331,   329,   330,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,   331,   350,     0,     0,     0,
     332,   333,   334,     0,   351,   352,  1629,   353,   354,   355,
     356,     0,     0,   335,   336,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     2,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,   349,  1667,   350,     0,     0,
       0,     0,     0,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,   326,     0,     1,   327,
     113,   328,   331,   329,   330,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,   336,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,   331,   350,     0,     0,     0,   332,   333,
     334,  1670,   351,   352,     0,   353,   354,   355,   356,     0,
       0,   335,   336,   326,     0,     1,   327,   113,   328,     0,
     329,   330,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       2,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,     0,   350,     0,     0,     0,     0,
    1763,     0,     0,   351,   352,     0,   353,   354,   355,   356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,     0,     0,     0,     0,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   335,   336,
    1859,     0,     1,   327,   113,   328,     0,   329,   330,     0,
       0,     0,   337,     0,     0,     0,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     2,     0,     0,
       0,     0,   346,   347,     0,     0,     0,   348,     0,     0,
     349,     0,   350,     0,     0,     0,     0,  1858,     0,     0,
     351,   352,     0,   353,   354,   355,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
       0,     0,   332,   333,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   336,  1862,     0,     1,
     327,   113,   328,     0,   329,   330,     0,     0,     0,   337,
       0,     0,     0,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     2,     0,     0,     0,     0,   346,
     347,     0,     0,     0,   348,     0,     0,   349,     0,   350,
       0,     0,     0,     0,   781,     0,     0,   351,   352,     0,
     353,   354,   355,   356,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,     0,     0,     0,     0,   332,
     333,   334,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,  1866,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     2,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   349,     0,   350,     0,     0,     0,
       0,   781,     0,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,     0,     0,     0,     0,   332,   333,   334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,   326,     0,     1,   327,   113,   328,     0,   329,   330,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     2,     0,
       0,     0,     0,   346,   347,     0,     0,     0,   348,     0,
       0,   349,     0,   350,     0,     0,     0,     0,   781,     0,
       0,   351,   352,     0,   353,   354,   355,   356,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,     0,
       0,     0,     0,   332,   333,   334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   335,   336,   326,     0,
       1,   327,   113,   328,     0,   329,   330,     0,     0,     0,
     337,     0,     0,     0,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     2,     0,     0,     0,     0,
     346,   347,     0,     0,     0,   348,     0,     0,   349,  1913,
     350,     0,     0,     0,     0,     0,     0,     0,   351,   352,
       0,   353,   354,   355,   356,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,     0,     0,     0,     0,
     332,   333,   334,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   335,   336,   326,     0,     1,   327,   113,
     328,     0,   329,   330,     0,     0,     0,   337,     0,     0,
       0,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     2,     0,     0,     0,     0,   346,   347,     0,
       0,     0,   348,     0,     0,  1965,     0,   350,     0,     0,
       0,     0,  1858,     0,     0,   351,   352,     0,   353,   354,
     355,   356,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,     0,     0,     0,     0,   332,   333,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     335,   336,   326,     0,     1,   327,   113,   328,     0,   329,
     330,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     2,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   349,  2069,   350,     0,     0,     0,     0,     0,
       0,     0,   351,   352,     0,   353,   354,   355,   356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
       0,     0,     0,     0,   332,   333,   334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   335,   336,   326,
       0,     1,   327,   113,   328,     0,   329,   330,     0,     0,
       0,   337,     0,     0,     0,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     2,     0,     0,     0,
       0,   346,   347,     0,     0,     0,   348,     0,     0,   349,
    2131,   350,     0,     0,     0,     0,     0,     0,     0,   351,
     352,     0,   353,   354,   355,   356,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,     0,     0,     0,
       0,   332,   333,   334,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   335,   336,   326,     0,     1,   327,
     113,   328,     0,   329,   330,     0,     0,     0,   337,     0,
       0,     0,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     2,     0,     0,     0,     0,   346,   347,
       0,     0,     0,   348,     0,     0,   349,     0,   350,     0,
       0,     0,     0,  2199,     0,     0,   351,   352,     0,   353,
     354,   355,   356,     0,     0,     0,     0,   326,     0,     1,
     327,   113,   328,   331,   329,   330,     0,     0,   332,   333,
     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   335,   336,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,     0,     0,     0,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,   346,   347,     0,     0,     0,
     348,     0,     0,   349,   331,   350,     0,     0,     0,   332,
     333,   334,     0,   351,   352,     0,   353,   354,   355,   356,
       0,     0,   335,   336,   326,     0,     1,   327,   113,   328,
       0,   329,   330,     0,     0,     0,   337,     0,     0,     0,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     2,     0,     0,     0,     0,   346,   347,     0,     0,
       0,   348,     0,     0,   741,     0,   350,     0,     0,     0,
       0,     0,     0,     0,   351,   352,     0,   353,   354,   355,
     356,     0,     0,     0,     0,   326,     0,     1,   327,   113,
     328,   331,   329,   330,     0,     0,   332,   333,   334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     336,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,     0,     0,     0,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,   346,   347,     0,     0,     0,   348,     0,
       0,   744,   331,   350,     0,     0,     0,   332,   333,   334,
       0,   351,   352,     0,   353,   354,   355,   356,     0,     0,
     335,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,     0,     0,     0,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
       0,     0,     0,     0,   346,   347,     0,     0,     0,   348,
       0,     0,   767,     0,   350,  -907,   624,     0,  -907,  -907,
    -907,     0,   351,   352,     0,   353,   354,   355,   356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,     0,
       0,  -907,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -907,  -907,  -907,     0,     0,  -907,  -907,
       0,  -907,  -907,     0,     0,  -907,  -907,  -907,  -907,  -907,
    -907,     0,  -907,  -907,  -907,  -907,     0,     0,  -907,  -907,
    -907,  -907,     0,  -907,     0,  -907,  -907,  -907,     0,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,     0,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,     0,     0,     0,  -907,
    -907,     0,     0,  -907,   625,  -907,  -907,     0,   626,  -907,
       0,     0,     0,  -907,  -907,  -189,   957,     0,  -189,  -189,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,
       0,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,     0,     0,  -189,
    -189,     0,     0,  -189,     0,  -189,   958,     0,   959,  -189,
       0,     0,     0,  -189,  -189,  -253,   971,     0,     1,   327,
     113,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,  -253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,  -251,   974,  -253,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,  -251,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,  -254,
     971,  -251,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,  -254,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,  -252,   974,  -254,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,  -252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   461,  -252,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   527,   477,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   550,   528,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     555,   551,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   559,   556,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   971,   560,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   974,  -762,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   971,  -763,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     974,  -759,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   971,  -760,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   974,  -765,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,  1095,  -766,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,  1099,  1096,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     326,  1100,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   971,  -655,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   974,  -742,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   971,  -743,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   974,  -745,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
    1611,  -746,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   971,  1612,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   974,  -650,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   971,  -651,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   974,  -748,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     326,  -749,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   326,  -654,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   326,  -652,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   326,  -628,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   971,  -627,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     974,  -641,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   326,  -642,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   971,  -653,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   974,  -637,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   971,  -638,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     974,  -625,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,     0,   971,  -626,     1,   327,   113,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
      30,   462,     0,     0,   332,   333,     0,    31,    32,     0,
       0,   463,    35,   464,   465,    38,    39,     0,   446,    41,
      42,   466,     0,     0,   467,   468,   469,   470,     0,   471,
       0,   472,   473,    43,     0,   338,   339,   340,   341,   342,
     343,   344,     0,    46,    47,    48,    49,    50,    51,   222,
     223,   346,     0,     0,     0,    56,    57,     0,     0,   474,
       0,   475,   476,     0,   974,  -620,     1,   327,   113,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,    30,   462,     0,     0,   332,   333,     0,    31,
      32,     0,     0,   463,    35,   464,   465,    38,    39,     0,
     446,    41,    42,   466,     0,     0,   467,   468,   469,   470,
       0,   471,     0,   472,   473,    43,     0,   338,   339,   340,
     341,   342,   343,   344,     0,    46,    47,    48,    49,    50,
      51,   222,   223,   346,     0,     0,     0,    56,    57,     0,
       0,   474,     0,   475,   476,     0,   971,  -621,     1,   327,
     113,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,    30,   462,     0,     0,   332,   333,
       0,    31,    32,     0,     0,   463,    35,   464,   465,    38,
      39,     0,   446,    41,    42,   466,     0,     0,   467,   468,
     469,   470,     0,   471,     0,   472,   473,    43,     0,   338,
     339,   340,   341,   342,   343,   344,     0,    46,    47,    48,
      49,    50,    51,   222,   223,   346,     0,     0,     0,    56,
      57,     0,     0,   474,     0,   475,   476,     0,   974,  -639,
       1,   327,   113,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,    30,   462,     0,     0,
     332,   333,     0,    31,    32,     0,     0,   463,    35,   464,
     465,    38,    39,     0,   446,    41,    42,   466,     0,     0,
     467,   468,   469,   470,     0,   471,     0,   472,   473,    43,
       0,   338,   339,   340,   341,   342,   343,   344,     0,    46,
      47,    48,    49,    50,    51,   222,   223,   346,     0,     0,
       0,    56,    57,     0,     0,   474,     0,   475,   476,     0,
     461,  -640,     1,   327,   113,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,    30,   462,
       0,     0,   332,   333,     0,    31,    32,     0,     0,   463,
      35,   464,   465,    38,    39,     0,   446,    41,    42,   466,
       0,     0,   467,   468,   469,   470,     0,   471,     0,   472,
     473,    43,     0,   338,   339,   340,   341,   342,   343,   344,
       0,    46,    47,    48,    49,    50,    51,   222,   223,   346,
       0,     0,     0,    56,    57,     0,     0,   474,     0,   475,
     476,   527,     0,     1,   327,   113,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,    30,
     462,     0,     0,   332,   333,     0,    31,    32,     0,     0,
     463,    35,   464,   465,    38,    39,     0,   446,    41,    42,
     466,     0,     0,   467,   468,   469,   470,     0,   471,     0,
     472,   473,    43,     0,   338,   339,   340,   341,   342,   343,
     344,     0,    46,    47,    48,    49,    50,    51,   222,   223,
     346,   215,     0,     1,    56,    57,     0,     0,   474,     0,
     475,   476,     0,     0,     0,     0,     0,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   221,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       1,     0,     0,     0,    56,    57,     0,     0,   912,  1104,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   607,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   222,   223,     1,     0,     0,
       0,    56,    57,     0,     0,   912,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   607,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
       0,   269,    41,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   271,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,   272,   273,
     274,   275,   222,   223,     1,     0,     0,     0,    56,    57,
       0,     0,   912,     0,     0,     0,     0,     0,     0,  1488,
       0,     0,     0,   607,     0,     0,     0,     0,     0,     2,
     216,   217,   218,   219,   220,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    21,    22,
     266,   267,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   269,    41,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,   272,   273,   274,   275,   222,
     223,     1,     0,     0,     0,    56,    57,     0,     0,   912,
       0,     0,     0,     0,     0,     0,  1505,     0,     0,     0,
     607,     0,     0,     0,     0,     0,     2,   216,   217,   218,
     219,   220,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    21,    22,   266,   267,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   268,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   269,    41,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     271,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,   272,   273,   274,   275,   222,   223,     1,     0,
       0,     0,    56,    57,     0,     0,  1254,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,     2,   216,   217,   218,   219,   220,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    21,    22,   266,   267,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,     0,   269,    41,   270,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,   272,
     273,   274,   275,   222,   223,     1,     0,     0,     0,    56,
      57,     0,     0,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1277,     0,     0,     0,     0,     0,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   269,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   271,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,    47,   272,   273,   274,   275,
     222,   223,     1,     0,     0,     0,    56,    57,     0,     0,
    1254,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1739,     0,     0,     0,     0,     0,     2,   216,   217,
     218,   219,   220,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    21,    22,   266,   267,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   269,    41,   270,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    46,    47,   272,   273,   274,   275,   222,   223,     0,
       0,     0,     0,    56,    57,     0,     0,  1254,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,  1754,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,     1,     0,     0,     0,     0,     0,    56,
      57,     0,     0,   912,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   607,     0,     0,     0,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
     462,     0,     0,     0,     0,     0,    31,    32,     0,     0,
     463,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       1,     0,     0,     0,    56,    57,     0,     0,   999,     0,
     475,     0,     0,     0,     0,     0,     0,  1000,     0,     0,
       0,     0,     0,     0,     0,     2,   216,   217,   218,   219,
     220,     8,     9,    10,   605,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   222,   223,     1,     0,     0,
       0,    56,    57,     0,     0,   979,     0,     0,     0,     0,
       0,     0,     0,     0,   980,     0,     0,     0,     0,     0,
       0,     0,     2,   216,   217,   218,   219,   220,     8,     9,
      10,   605,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,  1768,    46,    47,    48,    49,
      50,    51,   222,   223,     0,     0,     0,     0,    56,    57,
       0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
       0,   980,     2,   216,   217,   218,   219,   220,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    21,    22,   266,   267,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
       0,   269,    41,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   271,     0,     0,     0,
       0,     0,  1772,     0,     0,     0,    46,    47,   272,   273,
     274,   275,   222,   223,     0,     0,     0,     0,    56,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -111,     2,
     216,   217,   218,   219,   220,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    21,    22,
     266,   267,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   269,    41,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,     0,     0,  1773,
       0,     0,     0,    46,    47,   272,   273,   274,   275,   222,
     223,     0,     0,     0,     0,    56,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -95,     2,   216,   217,   218,
     219,   220,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    21,    22,   266,   267,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   268,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   269,    41,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     271,     0,     0,     0,     0,     0,  1891,     0,     0,     0,
      46,    47,   272,   273,   274,   275,   222,   223,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -96,     2,   216,   217,   218,   219,   220,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    21,    22,   266,   267,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,     0,   269,    41,   270,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,     0,     0,
       0,     0,     0,  2029,     0,     0,     0,    46,    47,   272,
     273,   274,   275,   222,   223,     0,     0,     0,     0,    56,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -80,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   269,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   271,     0,     0,     0,     0, -1317,
     316,     0,     1,     0,    46,    47,   272,   273,   274,   275,
     222,   223,     0,     0,     0,     0,    56,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -87,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
      35,    36,    37,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,    45,     1,     0,     0,
       0,    46,    47,    48,    49,    50,    51,    52,    53,     0,
       0,    54,    55,    56,    57,     0,     0,    58,     0,     0,
      59,     0,     2,   216,   217,   218,   219,   220,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,   869,     1,     0,    46,    47,    48,    49,
      50,    51,   222,   223,     0,     0,     0,     0,    56,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1447,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     869,     1,     0,    46,    47,    48,    49,    50,    51,   222,
     223,     0,     0,     0,     0,    56,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1799,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,   175,   869,     1,     0,
      46,    47,    48,    49,    50,    51,   222,   223,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1800,     2,     3,     4,   176,     6,     7,     8,
       9,    10,   177,   178,   179,   180,   181,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
     175,     0,     1,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,    52,    53,     0,     0,     0,     0,    56,
      57,     0,     0,    58,     0,     0,   182,     2,     3,     4,
     176,     6,     7,     8,     9,    10,   177,   178,   179,   180,
     181,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,   646,     0,     1,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,    52,    53,     0,
       0,     0,     0,    56,    57,     0,     0,    58,     0,     0,
     182,     2,   216,   217,   218,   219,   220,   253,   254,   255,
     647,   648,   649,   650,   651,   261,   262,   263,   264,   265,
      21,    22,   266,   267,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     269,    41,   270,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   271,     0,     0,  -929,     0,
    -929,     0,     0,     0,     0,    46,    47,   272,   273,   274,
     275,   222,   223,     0,     0,     0,     0,    56,    57,     0,
       0,    58,     0,     0,   652,  -929,  -929,  -929,  -929,  -929,
    -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,
    -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,
    -929,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -929,     0,     0,     0,
       0,     0,     0,  -929,  -929,     0,     0,     0,  -929,     0,
       0,     0,     0,     0,  -929,  -929,  -929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -929,
       0,     0,     0,     0,     1,     0,     0,     0,     0,  -929,
    -929,  -929,  -929,  -929,  -929,  -929,  -929,     0,     0,     0,
       0,  -929,  -929,     0,     0,  -929,     0,     0,  -929,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,    35,    36,    37,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0, -1318,   308,    45,     1,
       0,     0,     0,    46,    47,    48,    49,    50,    51,    52,
      53,     0,     0,    54,    55,    56,    57,     0,     0,    58,
       0,     0,    59,     0,     2,     3,     4,   176,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,    36,    37,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,   215,
       0,     1,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,    52,    53,     0,     0,     0,     0,
      56,    57,     0,     0,    58,     0,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,   215,     0,     1,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   222,   223,     0,     0,
       0,     0,    56,    57,     0,     0,  1254,  1726,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   221,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,   215,     0,     1,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       0,     0,     0,     0,    56,     0,     0,     0,     0,   224,
       2,   216,   217,   218,   219,   220,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     221,    30,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,   992,     0,     1,     0,     0,
       0,     0,     0,     0,    46,    47,    48,    49,    50,    51,
     222,   223,     0,     0,     0,     0,    56,     0,     0,     0,
       0,   427,     2,   216,   217,   218,   219,   220,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,  1531,     0,     1,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,   222,   223,     0,     0,     0,     0,    56,     0,
       0,     0,     0,   224,     2,   216,   217,   218,   219,   220,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   221,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,   215,
       0,     1,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   222,   223,     0,     0,     0,     0,
      56,     0,     0,     0,     0,   427,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,   215,     0,     1,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   222,   223,     0,     0,
       0,     0,    56,     0,     0,     0,     0,  1626,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   221,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,   175,     0,     1,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       0,     0,     0,     0,    56,     0,     0,     0,     0,  1955,
       2,     3,     4,   176,     6,     7,     8,     9,    10,   605,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,   175,     0,     1,     0,     0,
       0,     0,     0,     0,    46,    47,    48,    49,    50,    51,
      52,    53,     0,     0,     0,     0,    56,    57,     0,     0,
      58,     0,     2,     3,     4,   176,     6,     7,     8,     9,
      10,   605,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,   936,     0,     1,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,    56,    57,
       0,     0,    58,     0,     2,   216,   217,   218,   219,   220,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    21,    22,   266,   267,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,     0,   269,    41,   270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   271,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    46,    47,
     272,   273,   274,   275,   222,   223,     0,     0,     0,     0,
      56,     0,     0,     0,   937,     2,     3,     4,   176,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,    52,    53,     0,     0,     0,
       0,    56,    57,     0,     0,    58,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   222,   223,     0,     0,
       0,     0,    56,    57,     0,     0,    58,     2,   216,   217,
     218,   219,   220,     8,     9,    10,   605,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   222,   223,     0,
       0,     0,     0,    56,    57,     0,     0,    58,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       0,     0,     0,     0,    56,     0,     0,     0,   759,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   222,
     223,     0,     0,     0,     0,    56,     0,     0,     0,  1510,
       2,   216,   217,   218,   219,   220,   253,   254,   255,  1598,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   269,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   271,  1127,     0,     1,     0,     0,
       0,     0,     0,     0,    46,    47,   272,   273,   274,   275,
     222,   223,     0,     0,     0,     0,    56,    57,     0,     0,
      58,     0,     2,   216,   217,   218,   219,   220,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,  1128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,  1133,     0,     1,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,   222,   223,     0,     0,     0,     0,    56,     2,
     216,   217,   218,   219,   220,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,  1134,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   221,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,  1139,
       0,     1,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   222,
     223,     0,     0,     0,     0,    56,     2,   216,   217,   218,
     219,   220,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,  1140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,   921,     0,     1,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   222,   223,     0,     0,
       0,     0,    56,     2,   216,   217,   218,   219,   220,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    21,    22,   266,   267,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,     0,   269,    41,   270,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,   272,
     273,   274,   275,   222,   223,     0,     0,     0,     0,    56,
       2,   216,   217,   218,   219,   220,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,  1088,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     221,    30,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,    47,    48,    49,    50,    51,
     222,   223,     0,     0,     0,     0,    56,     2,   216,   217,
     218,   219,   220,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,  1145,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   221,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   222,   223,     0,
       0,     0,     0,    56,     2,   216,   217,   218,   219,   220,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   542,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   222,   223,     0,     0,     0,     0,
      56,     2,   216,   217,   218,   219,   220,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,    43,     0,     0,     0,     0,
       0,     0,   869,     0,     0,    46,    47,    48,    49,    50,
      51,   222,   223,     0,     0,     0,     0,    56,     2,   216,
     217,   218,   219,   220,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   221,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,   222,   223,
       0,     0,     0,     0,    56,     2,   216,   217,   218,   219,
     220,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    21,    22,   266,   267,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,   516,
     517,     0,     0,     0,   269,    41,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,   271,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   272,   273,   274,   275,   222,   223,     0,     0,     0,
       0,    56,     2,   216,   217,   218,   219,   220,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,   222,   223,     0,     0,     0,     0,    56,     2,
     216,   217,   218,   219,   220,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    21,    22,
     266,   267,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   269,    41,
     270,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,   272,   273,   274,   275,   222,
     223,     2,     0,     0,     0,    56,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,     0,     0,     0,     0,     0,     0,    56,     2,   216,
     217,   218,   219,   220,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    21,    22,   266,
     267,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   269,    41,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,   272,   273,   274,   275,   222,   223,
       0,     0,     0,     0,    56,    57,     0,     0,   912,  1723,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   607,
       2,   216,   217,   218,   219,   220,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    21,
      22,   266,   267,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   269,
      41,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   271,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,    47,   272,   273,   274,   275,
     222,   223,     0,     0,   276,   277,    56,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   278,     2,   216,
     217,   218,   219,   220,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    21,    22,   266,
     267,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   269,    41,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,   272,   273,   274,   275,   222,   223,
       0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1587,     2,   216,   217,   218,   219,
     220,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    21,    22,   266,   267,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,     0,   269,    41,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   271,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   272,   273,   274,   275,   222,   223,     0,     0,   276,
     277,    56
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-1798)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,  1010,   621,   758,   509,    92,   978,   166,    92,   577,
     911,  1264,    89,   978,   141,   107,    89,   686,    99,   760,
    1157,  1054,   508,  1056,  1054,    70,  1056,   911,     0,  1763,
     163,    89,   512,    33,    34,   100,   874,  1054,  1055,  1056,
      89,   781,   100,  1677,    44,   153,   577,   781,   788,    65,
     137,   791,   100,   137,   788,  1689,     5,   791,    58,   167,
    1054,   169,  1056,   171,   107,    65,     1,     1,   100,   196,
      70,   874,    72,   988,   128,   107,     5,   137,     3,   141,
       5,     3,   137,     3,  1054,     1,  1056,   153,    88,    89,
      90,    90,    92,     3,   199,   200,   928,    33,    98,   911,
     100,   167,    17,   169,   120,   171,    28,   107,   108,    45,
       5,   111,     5,     3,   312,    37,     3,    89,   199,   200,
     120,    89,   128,   123,  1858,  1055,    17,     1,   100,     3,
       1,    89,   100,    79,   196,   107,   108,   137,    28,   107,
     140,   141,   187,     1,     3,   145,     5,     1,  1032,   149,
     150,   151,     1,   153,     3,   596,   133,   157,     3,   159,
     160,     3,   139,   163,   164,    17,   166,   167,   168,   169,
     596,   171,    31,     1,   174,  1932,     1,   131,   114,   115,
       1,   135,   118,    28,   133,   626,    28,   187,   629,   294,
     631,   137,   633,     3,   369,     5,   196,   131,   214,     3,
     626,     5,   137,   629,   129,   631,   128,   633,   313,     1,
     139,   292,   137,     1,   214,     1,    99,   139,   134,   129,
     312,    17,   314,   133,     1,   302,   226,   137,   228,   302,
    1062,   369,   508,     5,   149,   312,   236,   237,   196,   312,
     133,   136,   129,     1,  1253,   135,   133,   137,   248,   314,
     137,     1,   252,   302,   312,   294,   314,   456,   149,     1,
     134,     3,   931,   134,     3,  1298,   314,   312,  1298,   312,
       1,   314,  1305,   131,   128,  1305,  1309,   294,   125,  1309,
    1297,  1298,   314,     1,  1918,   134,     1,  1304,  1305,   289,
     289,  1308,  1309,   135,   294,   914,     3,   149,   298,     1,
     459,   128,   302,   131,  1298,   133,   134,   434,     1,   134,
     508,  1305,   312,   134,   314,  1309,   199,   200,     1,   129,
     125,  2078,     3,  2080,     1,   129,     3,   137,  1298,    68,
     302,   797,   332,   137,     1,  1305,   128,   129,   338,  1309,
     312,   133,   314,   131,   302,   133,   314,     0,   134,   349,
     549,     5,     3,   149,   312,     1,     3,   134,     5,     3,
    2157,   128,   298,   363,     1,     5,   138,  1297,   128,     3,
       1,     3,   434,   131,  1304,   133,   134,   843,  1308,     1,
     126,    28,     1,   126,   134,     3,   125,   126,   131,  2146,
       3,  2148,   134,  2150,    28,     3,   135,   478,   479,   480,
     481,    76,    77,   134,     1,   405,   406,   606,   424,   292,
     426,   294,     1,   133,   131,   351,   134,     3,  2215,   134,
     140,   128,   509,  1163,   424,   509,   426,   129,     1,  1163,
     313,   133,  2189,  2190,   434,  2192,    89,   126,    76,    77,
     440,   134,     7,     8,     9,   572,   135,   100,   129,   935,
     125,   134,  2209,   453,   107,   108,   456,   134,   458,   459,
       5,   588,   462,   463,   597,  2199,     5,   134,   468,     5,
    2227,   471,   472,   473,   474,   475,     3,   324,  1487,     5,
     985,  1734,   128,   129,   135,   129,   333,   133,   135,   129,
    1109,   463,   339,   601,   126,   603,   133,   578,   129,   131,
     581,  1120,   133,   503,   504,   505,  1643,   129,   508,   509,
     572,   133,   512,  1254,   133,   515,   996,   135,   998,   324,
     520,   135,   135,  1009,   524,   525,   588,   135,   333,   529,
     530,  1272,   129,     3,   339,   601,   133,   603,  1279,   737,
     129,  1550,   542,     3,   133,   131,   606,   133,   548,   549,
     508,   606,   552,   553,   134,   352,   129,   557,   558,   621,
     133,   561,   562,   128,     3,   565,   566,   567,   568,   569,
     570,   136,   572,     3,   139,   575,  1062,     3,     5,   778,
    1495,   134,  1483,   128,   237,   126,   586,   587,   588,    28,
     129,   607,   592,   129,   135,   478,   596,   597,   481,  1483,
     134,   601,   129,   603,   604,   131,   606,   607,   608,   935,
     128,   611,  1450,  1451,   572,     1,     5,   575,     0,  1652,
    1535,   621,  1652,  1538,   640,  1597,   626,   732,   733,   629,
     126,   631,  1597,   633,  1651,  1652,     3,    76,    77,   135,
     640,   137,   817,   818,   819,   737,     3,  1450,  1451,   302,
      76,    77,   928,   145,     3,     0,   126,   127,  1652,   312,
     737,   314,     3,     5,   737,   704,   705,   706,   707,   129,
    1571,  1483,   847,   848,   849,   132,   676,   758,   678,   817,
     818,   819,  1652,  1009,   139,  1126,   686,   704,   705,   706,
     707,  1132,   133,  1946,   737,   578,   135,  1138,   581,   129,
    1126,   128,   128,  1144,   704,   705,   706,   707,    75,   847,
     848,   849,   988,   912,     1,     1,     3,     3,  1144,    11,
     919,  1651,   722,   723,  1733,     3,    75,   132,   927,  1738,
     928,   731,   137,  1009,    75,   131,     3,   737,     5,   938,
     129,   741,   128,   129,    89,     3,   832,   133,   833,   749,
       3,   134,  1564,   835,  1566,   100,   756,   757,   758,   759,
     760,   761,   107,   108,    31,   737,    97,   767,   125,   126,
     770,   133,     3,   731,   860,   132,   861,     3,   778,   737,
     133,   863,   834,   719,   720,   134,  1062,   133,   160,  1529,
     133,     3,   164,   134,   794,  1529,   168,  1830,   798,    11,
    1830,    81,    28,   456,   133,  1814,    92,     7,     8,     9,
     862,  1009,  1829,  1830,   133,    89,    90,     7,     8,     9,
       3,   704,   705,   706,   707,    71,    72,   763,   764,   765,
       3,   135,   112,   113,   134,   127,  1830,    68,   125,   126,
     840,   133,   706,   707,   844,    28,   133,   125,   126,   732,
     733,   734,   912,   129,   132,   508,   836,   912,  1017,  1018,
    1830,   131,  1481,   129,  1062,   135,   140,   125,   126,   869,
     870,   871,   125,   126,   874,   875,   876,   135,   128,   133,
     961,   962,   374,   964,   864,   139,   967,   968,   134,     3,
    1023,   738,   237,  1026,   125,   126,   549,    11,   985,  1829,
     132,   985,   128,  1818,  1819,   137,     7,     8,     9,  1108,
     910,   911,   912,   125,   126,   127,   916,  1025,   918,   919,
     132,   133,   135,   135,   137,   985,   926,   927,   928,   128,
     985,   931,   128,   738,   128,   935,   136,   937,   938,   139,
     940,     1,   942,   139,   880,   128,   136,     7,     8,     9,
       3,   128,   125,   126,  1963,     3,  1857,   302,     3,  1025,
    1093,  1094,   135,   294,  1045,   128,   458,   312,   134,   314,
     928,     7,     8,     9,   834,    28,   139,    12,    13,   979,
      79,   981,  1109,   865,    37,   985,  1727,   126,   988,   132,
       3,     3,   832,   993,   133,  1103,   996,  1616,   998,   999,
     139,  1756,   862,   128,   349,   887,   888,   145,  1008,  1009,
    1010,   125,   126,   127,   811,   289,    28,  1017,  1018,   133,
     860,   135,  1022,  1023,   833,  1025,  1026,   135,   302,   835,
     988,  1031,  1032,  1033,  1034,   136,  1604,  1103,  1707,    12,
      13,   838,  1573,   836,  1530,   767,   128,  1109,   770,   846,
    1249,  1009,   861,  1252,    81,  2027,  1118,   863,  1120,   820,
     821,  1121,  1062,   128,    76,    77,  1121,   132,   128,   866,
     128,   864,   132,  1604,   139,   128,   136,   125,   126,   139,
     125,   126,   128,   128,   737,   112,   113,   135,   741,   850,
     851,   126,   127,  1093,  1094,   129,   132,  1097,  1098,   133,
     136,  1101,  1102,  1103,  1062,  1105,  1122,   128,  1108,  1109,
     137,   456,   125,   126,   767,   128,     3,   770,  1118,  1294,
    1120,  1121,  1122,  1231,    11,   128,  1126,  1166,   865,  1129,
    1169,   128,  1132,   127,     3,  1135,     5,   125,  1138,   133,
     135,  1141,   139,   135,  1144,   137,  1146,   478,   128,  1166,
     887,   888,  1169,   126,   127,   141,  1294,   145,   146,   139,
    1160,   125,  1045,   508,   129,  1231,  1166,  1206,   133,  1169,
       7,     8,     9,  1212,  1213,  1214,  1215,     3,  1178,   129,
    1180,   145,   146,   133,   127,     7,     8,     9,  1188,  1206,
     133,     3,  1811,   128,  1254,  1212,  1213,  1214,  1215,  1254,
     128,  1201,    28,   534,   549,   127,  1206,  1207,   142,   143,
    1965,   133,  1212,  1213,  1214,  1215,    28,  1748,   871,  1495,
     129,    47,    76,    77,   133,    37,  1242,  2039,   137,  2041,
    1230,  1231,  1232,   128,  1234,   127,   374,    58,   125,   126,
     127,   133,  1242,   129,  1244,   132,   133,   133,   135,  1249,
      76,    77,   148,  1253,  1254,   129,   125,   126,  1877,  1535,
      16,  1197,  1538,   147,    76,    77,   919,  1936,   141,    76,
      77,   125,  1272,   148,  1232,   928,  1234,    81,   127,  1279,
     147,  1480,   935,  1166,   133,   135,  1169,   137,  1288,   942,
      81,   565,   566,   567,   568,   569,   570,   134,   127,   136,
      16,  1869,  1166,     1,   133,  1169,   128,   135,   112,   113,
     129,     3,   586,   587,   136,   135,   128,   139,   125,   140,
     458,   112,   113,  1206,     6,   368,     8,     9,   132,  1212,
    1213,  1214,  1215,     3,   826,   827,    28,   829,  1869,   382,
     993,   132,  1206,   386,     1,   676,     3,   127,  1212,  1213,
    1214,  1215,  1235,   133,  1237,    47,  1009,   129,    28,  1295,
      71,    72,   854,   855,   856,   857,   409,    81,   129,   412,
     822,   823,   133,   704,   705,   706,   707,    47,    76,    77,
     820,   821,    93,    81,    76,    77,    97,   129,    99,   129,
      88,   133,   737,    75,   129,   137,   741,   127,   112,   113,
     852,   853,   127,   133,    86,   128,    76,    77,   133,   135,
     850,   851,  1980,   758,   112,   113,   237,   131,   910,   911,
     129,   135,   767,   134,   133,   770,   124,   503,   504,   111,
     128,   129,   127,   778,   127,   133,  1635,   129,   133,   121,
     133,  1441,  1442,   129,   126,  1445,  1446,   133,   129,  1980,
    1450,  1451,   133,   529,   530,   131,   137,   139,   127,   129,
     142,   143,   144,   133,   133,   129,   822,   823,   127,   133,
     133,   830,   831,   137,   133,  2043,   552,   553,   131,  1479,
     133,   557,   558,  1483,  1484,   561,   562,  1487,   131,  1616,
     129,   126,  2161,  1493,   133,  1495,   852,   853,  1498,   858,
     859,   135,  1502,   137,  1301,   830,   831,  1507,  1508,  1509,
    1446,   129,  2043,   129,   135,   133,   137,   133,  1010,    90,
      91,    92,   131,     1,   133,     3,   871,   131,   126,   133,
    1530,   126,  1532,   858,   859,  1535,   133,  1495,  1538,    10,
      11,  1541,  1818,  1819,  2112,   135,   135,   137,   137,     1,
    1550,     3,   503,   504,  1616,     1,  2124,     3,   135,  1559,
    1560,     1,  1624,     3,  1564,  1565,  1566,  1567,     1,     1,
       3,     3,   135,   131,   919,   133,   140,  1535,   529,   530,
    1538,  2112,   135,   928,   137,   131,   135,   133,   137,  1242,
     935,   135,  1578,  2124,  1580,   940,  1249,   942,    14,    15,
     140,   552,   553,  1578,   140,  1580,   557,   558,   142,   143,
     561,   562,   135,  1613,  1614,   139,  1616,   133,  1657,  1658,
      10,    11,    14,    15,  1624,   133,    76,    77,   586,   587,
    1669,    81,   959,   960,  2165,  1635,   959,   960,    88,   133,
    1657,  1658,   704,   705,   133,   704,   705,   134,   993,  2217,
     107,   108,  1669,   474,  1853,   875,   876,  1657,  1658,   135,
     991,  2229,   112,   113,  1009,   131,   128,  1667,   137,  1669,
    1670,   131,   128,  1673,   124,  1735,   131,  1677,   131,   128,
    1735,  1681,   214,   128,  1684,   135,  2217,   128,   826,   827,
    1021,   829,   131,   131,   131,   126,   140,   140,  2229,   135,
     129,    59,   129,     3,   134,  1588,   140,  1707,  1708,    76,
      77,   135,   140,  1649,    81,   140,   854,   855,   856,   857,
     140,    88,   139,   126,   135,   131,   134,   126,    28,   133,
     140,   129,   134,  1733,   134,  1735,   129,    37,  1738,  1820,
    1848,   129,  1850,   140,  1680,   112,   113,   128,   137,   140,
    1877,   129,   129,   137,   137,   128,  1756,   124,  1758,  1759,
    1696,  1253,  1762,   128,   128,   132,  1874,   126,  1876,   131,
     131,   131,   910,   911,  1657,  1658,    76,    77,   128,   126,
     131,    81,  1848,   129,  1850,   606,  1669,   608,    88,   129,
     126,   128,   126,  1657,  1658,   128,  1796,   139,   129,   129,
     129,   333,   134,   129,   139,  1669,   133,   339,  1874,   133,
    1876,   133,   112,   113,  1814,  1877,   129,   137,  1818,  1819,
     137,  1821,   137,   137,   124,   125,   137,   137,   128,   137,
     137,   129,   129,  1833,  1108,  1166,   129,   131,  1169,   139,
     132,   565,   566,   567,   568,   569,   570,  1178,  1848,   134,
    1850,   129,   129,  1853,   129,   129,   577,   140,   140,   140,
    1818,  1819,   586,   587,   137,   137,    59,  1906,   128,   140,
     129,   128,  1010,   128,  1874,  1206,  1876,  1877,   129,  1532,
     129,  1212,  1213,  1214,  1215,   129,   129,   129,   129,  1906,
     140,   126,   424,   139,   426,   131,    11,   135,   132,   139,
    1900,  1901,  1902,  1903,  1249,   150,  1906,   140,   153,   140,
    1910,  1911,   135,  1913,   131,  1915,   137,   137,   132,   132,
     128,   131,   167,   135,   169,   129,   171,  1927,  2036,   129,
     129,   140,   129,   140,  1781,  1782,  1936,  1784,  1785,  1939,
      67,    67,  1789,  1790,  1791,  1792,   140,   129,   140,   140,
     140,   140,   140,   129,   129,  1802,  1803,  1804,  1805,  1806,
    1807,  1808,  1809,  1963,   129,  1965,   129,   131,   140,   140,
    2036,   129,   140,   140,   131,   131,  1781,  1782,   140,  1784,
    1785,     1,  1635,   131,  1789,  1790,  1791,  1792,   131,   135,
    2165,  1483,   129,   131,  1930,  1487,  1932,  1802,  1803,  1804,
    1805,  1806,  1807,  1808,  1809,  1802,  1803,  1804,  1805,  1806,
    1807,  1808,  1809,   131,   131,   131,   515,   131,   131,   131,
     131,  1097,  1098,  1906,   129,  1101,  1102,  2165,   131,   131,
    2069,   515,  2071,   515,  2034,  2035,  2036,  2037,  2038,  2039,
     515,  2041,  1906,   515,  2197,  1567,  1031,   910,  2048,  2049,
    2050,  2051,  2069,   965,  2071,   843,    76,    77,  1550,   312,
    2060,    81,  1022,  1530,   312,   761,   473,   534,    88,  2069,
     338,  2071,  2072,  2154,  2155,   607,   797,   463,   289,  1571,
     107,  2081,  2082,   100,  2145,   100,   108,   100,   294,    -1,
    1796,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2140,    -1,    -1,   124,    -1,   292,   293,    -1,    -1,
      -1,   131,   132,   133,    -1,  1253,    -1,    -1,    -1,   940,
    2120,  2121,   843,  2140,    -1,    -1,    -1,  2127,  2128,     0,
      -1,  2131,    -1,  2133,    -1,    -1,  2136,    -1,    -1,   671,
    2140,    -1,  2078,    -1,  2080,    -1,  1097,  1098,    -1,    -1,
    1101,  1102,    -1,    -1,    -1,  2155,   877,  2157,   979,   880,
       3,  2161,   883,    -1,   885,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   993,    44,  2174,    -1,    -1,    -1,   999,    -1,
    2027,    -1,    -1,    -1,    -1,    28,  2069,  1532,  2071,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,  2197,  2198,    -1,
    1853,    72,    -1,  2203,    -1,  2069,    -1,  2071,    -1,  2145,
    2146,    -1,  2148,    -1,  2150,  2215,    -1,    -1,    89,    -1,
      -1,    92,  2027,    -1,    -1,    -1,    -1,    -1,    99,   100,
    2027,    -1,    -1,    76,    77,  1509,   107,   108,    81,    -1,
      -1,  1733,    -1,    -1,  2180,    88,  1738,    -1,    -1,   120,
      -1,    -1,   123,  2189,  2190,    -1,  2192,  2140,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   112,
     113,    -1,    -1,  2209,   145,    -1,  2140,    -1,    -1,   150,
     151,   124,   153,    -1,   529,   530,    -1,  1108,    -1,   160,
    1635,  2227,   135,   164,    -1,   166,   167,   168,   169,     3,
     171,    -1,    -1,    -1,    -1,    -1,    -1,   552,   553,    -1,
      -1,    -1,   557,   558,    -1,    -1,   561,   562,    -1,    -1,
      -1,    -1,  1814,    -1,    28,    -1,  1657,  1658,   199,   200,
      -1,    -1,    -1,    37,    -1,    -1,  1667,    -1,  1669,  1670,
      -1,    -1,  1673,   214,    -1,  1483,    -1,    -1,    -1,  1487,
    1681,  1072,    -1,  1684,    -1,    -1,   601,   228,   603,    -1,
      -1,    -1,    -1,    -1,    -1,  1857,   237,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
     292,   293,    -1,    -1,    88,    -1,    -1,     1,    -1,     3,
       4,     5,   578,    -1,    -1,   581,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,   112,   113,
      -1,  1756,  1550,    -1,    28,    -1,    -1,    -1,   289,    -1,
     124,   292,   293,   294,   128,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,  1571,    -1,   139,    -1,     3,    -1,    -1,
      -1,   312,   313,   314,    -1,    -1,    -1,    -1,   980,    -1,
      -1,    -1,    -1,    -1,    68,     3,    -1,    -1,    -1,    73,
      74,   332,    -1,   571,    -1,    76,    77,   338,    -1,    -1,
      81,  1963,    -1,    87,    -1,    -1,    -1,    88,   349,    -1,
      28,    -1,    -1,  1559,  1560,    -1,   100,  1019,    -1,  1210,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   112,   113,    -1,    -1,    -1,   120,    -1,  1853,    -1,
      76,    77,   132,   124,   128,    81,    -1,    -1,   704,   705,
     706,   707,    88,    -1,   138,   139,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,   406,    -1,  1613,  1614,   424,
      88,   426,    -1,     3,    -1,    -1,   112,   113,   734,    -1,
      -1,    -1,    -1,   424,    -1,   426,    -1,    -1,   124,    -1,
      -1,    -1,   128,    -1,   112,   113,    -1,    -1,    28,  1900,
    1901,  1902,  1903,    -1,    -1,  1906,   124,    37,    -1,  1910,
    1911,    -1,  1913,    -1,  1915,   456,    -1,   458,   459,    -1,
    1122,   462,   463,    -1,    -1,  1733,  1927,   468,    76,    77,
    1738,   472,   473,    81,   475,    -1,    -1,    -1,  1559,  1560,
      88,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
    1965,    81,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,   503,   504,   112,   113,    -1,   508,   509,     0,
      -1,   749,  1174,    -1,   515,    -1,   124,   125,    -1,   520,
     128,    -1,   112,   113,   525,    -1,    -1,    -1,   529,   530,
      -1,   139,  1613,  1614,   124,   125,   578,    -1,   128,   581,
      -1,    -1,    -1,   781,    -1,    -1,  1814,   137,   549,    -1,
     788,   552,   553,   791,    -1,    -1,   557,   558,  1509,    -1,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     571,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,
     581,  1532,    -1,    -1,   959,   960,    -1,    -1,    -1,  1857,
      -1,    -1,   607,  1255,    -1,   596,    -1,    -1,    89,  2060,
     601,    -1,   603,    -1,    -1,   606,   607,     1,  2069,   100,
    2071,    -1,    -1,    -1,    -1,  1277,   107,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   626,    -1,    -1,   629,    -1,
     631,    -1,   633,    -1,    -1,    -1,    -1,    -1,    -1,   640,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1025,    -1,    -1,    -1,    -1,    -1,   671,    -1,    -1,    -1,
     151,    -1,   704,   705,   706,   707,  2127,  2128,    -1,   160,
    2131,     1,  2133,   164,    -1,  2136,     3,   168,    -1,  2140,
      -1,    -1,    76,    77,  1635,    -1,    -1,    81,    -1,    -1,
      -1,    -1,   734,    -1,    88,  1963,    -1,    -1,    -1,    -1,
      -1,    28,    -1,   704,   705,   706,   707,    -1,    -1,    -1,
      -1,    -1,    -1,  2174,    -1,     3,    -1,    -1,   112,   113,
      -1,    -1,  1097,  1098,    -1,    -1,  1101,  1102,  1103,    -1,
     124,   732,   733,   734,    -1,    -1,   737,   131,   132,   133,
     741,    -1,  2203,    -1,    -1,    -1,    76,    77,   749,    76,
      77,    81,    -1,  1604,    81,   756,   757,   758,    88,   760,
     761,    88,    -1,    -1,    -1,    -1,   767,    -1,    -1,   770,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   778,    -1,    -1,
     781,    -1,   112,   113,    -1,   112,   113,   788,    76,    77,
     791,    -1,    -1,    81,   124,    -1,    -1,   124,  1649,    -1,
      88,   131,    -1,   133,    -1,    -1,    -1,    -1,   135,    -1,
      -1,   302,    -1,    -1,    -1,    -1,  1054,  1055,  1056,    -1,
      -1,   312,    -1,   314,   112,   113,    -1,    -1,  2034,  2035,
      -1,  2037,  2038,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,   119,  2048,  2049,  2050,  2051,    -1,   135,    -1,    -1,
    1166,    -1,    -1,  1169,    -1,  1230,  1231,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     871,    -1,    -1,   874,   875,   876,    -1,  1539,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
    1206,    -1,    88,  1555,    -1,    -1,  1212,  1213,  1214,  1215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   910,
     911,   912,  1763,    -1,  2120,  2121,   112,   113,   919,  1235,
      -1,  1237,    -1,    -1,  1775,  1163,   927,   928,   124,  1780,
      -1,    -1,  1783,   129,   935,    -1,   214,   938,    -1,   940,
      -1,   942,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,  2034,  2035,    -1,  2037,  2038,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   980,    -1,  2048,  2049,  2050,
    2051,   462,    28,    -1,    -1,    37,    -1,    -1,   126,   127,
      -1,    37,   473,    -1,   985,    47,    48,    -1,   136,    -1,
      -1,    -1,   993,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,    -1,    -1,  1019,    -1,    -1,  1858,  1009,  1010,
      -1,    -1,    -1,    -1,    76,    77,  1017,  1018,  1869,    81,
      76,    77,    -1,    -1,  1025,    81,    88,    -1,    -1,    -1,
    1031,    -1,    88,    -1,   525,    -1,    -1,    -1,    -1,  2120,
    2121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,    -1,  1054,  1055,  1056,   112,   113,    -1,  1297,
    1298,  1062,   124,   125,    -1,    -1,  1304,  1305,   124,   125,
    1308,  1309,   128,   129,   352,  1737,    -1,  1739,     7,    -1,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    47,
      48,  1753,  1754,    -1,    -1,    -1,  1097,  1098,    -1,    -1,
    1101,  1102,  1103,    76,    77,    -1,    -1,  1122,    81,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    76,    77,
    1121,  1122,    -1,    81,  1166,  1126,    -1,  1169,    -1,  1980,
      88,  1132,    -1,    -1,    -1,    -1,    -1,  1138,    -1,   112,
     113,    -1,    -1,  1144,   151,    -1,   424,    -1,   426,    -1,
      -1,   124,    -1,   160,   112,   113,   129,   164,    -1,  1174,
      -1,   168,  1163,    -1,  1206,  1166,   124,   125,  1169,    -1,
    1212,  1213,  1214,  1215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1559,  1560,    -1,    -1,    -1,    -1,
      -1,    -1,  2043,  1235,    -1,  1237,    -1,   126,   127,    -1,
      -1,    -1,    -1,     3,    -1,  1206,    -1,   136,    -1,    -1,
      -1,  1212,  1213,  1214,  1215,    -1,   145,   146,   147,   148,
     149,    76,    77,    -1,    -1,    -1,    81,    -1,    28,  1230,
    1231,    -1,     0,    88,  1235,    -1,  1237,    37,  1613,  1614,
    1255,  1242,    -1,    -1,    -1,    -1,   737,    -1,  1249,    -1,
      -1,  1252,  1253,  1254,    -1,    -1,    -1,   112,   113,    -1,
      -1,  2112,  1277,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      -1,  1272,    -1,  2124,   129,    -1,    76,    77,  1279,    -1,
      -1,    81,   289,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      58,  1529,    -1,   571,    -1,    -1,  1297,  1298,    -1,    -1,
      -1,    -1,  1964,  1304,  1305,    -1,    -1,  1308,  1309,    -1,
      -1,  1973,   112,   113,    -1,    47,    48,    -1,    -1,    -1,
      88,    89,    90,    -1,   124,   332,    -1,    -1,   128,   607,
      98,   338,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,  1657,  1658,    -1,    76,    77,    -1,    -1,  2199,    81,
     119,    -1,    -1,    -1,  1670,    -1,    88,  1673,    -1,    -1,
      -1,   639,    -1,    -1,    -1,  1681,  2217,    -1,    -1,  2031,
    2032,    -1,   140,   141,   142,   143,   144,    -1,  2229,    -1,
     112,   113,   150,    -1,     1,   153,     3,    -1,    -1,    -1,
      -1,    -1,   124,   671,    -1,    -1,   128,    47,    48,   167,
      -1,   169,    -1,   171,    76,    77,    -1,    -1,    -1,    81,
      -1,    28,    -1,  1651,  1652,    -1,    88,    -1,    -1,    -1,
      37,    38,    39,    40,    41,    -1,    76,    77,   196,   197,
     198,    81,    -1,    -1,    -1,    -1,   927,    -1,    88,    -1,
     112,   113,    -1,    -1,    -1,    -1,    -1,   938,    -1,  1450,
    1451,    -1,   124,    -1,    -1,   462,    -1,   129,    -1,    76,
      77,    -1,   112,   113,    81,    -1,   473,    -1,   236,   237,
      -1,    88,    -1,  1848,   124,  1850,    -1,    -1,   128,    -1,
      -1,    -1,  1483,    -1,   762,    -1,  1487,    -1,   766,    -1,
      -1,    -1,    -1,    76,    77,   112,   113,    -1,    81,  1874,
      -1,  1876,    -1,   781,    -1,    88,    -1,   124,   125,    -1,
     788,   128,    -1,   791,   131,    -1,   133,   134,   525,    -1,
      -1,   289,    -1,    -1,  1539,   294,    -1,    -1,  1529,   112,
     113,  1532,    -1,   811,   302,    -1,    -1,    -1,    -1,    -1,
    1555,   124,   125,    -1,   312,   128,   314,    -1,    -1,  1550,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1559,  1560,
     838,    -1,    -1,  1564,  1565,  1566,  1567,    -1,   846,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   866,    -1,
      -1,  1829,  1830,    -1,  1910,  1911,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,  1613,  1614,    -1,  1657,  1658,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1670,    -1,
      -1,  1673,    -1,    28,  1635,    -1,    -1,    -1,    -1,  1681,
      -1,    -1,    37,    38,    39,    40,    41,    -1,    -1,    -1,
    1651,  1652,    -1,    -1,    -1,    -1,  1657,  1658,    -1,  2034,
    2035,  2036,  2037,  2038,    -1,    -1,   434,   435,   436,  1670,
      -1,    -1,  1673,  2048,  2049,  2050,  2051,    -1,    -1,    -1,
    1681,    76,    77,    -1,    -1,    -1,    81,    -1,   456,    -1,
      -1,    -1,    -1,    88,    -1,   463,    -1,    -1,    -1,    -1,
     978,    -1,   980,    -1,    -1,    -1,   474,  1708,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,    -1,
      -1,    -1,  1737,    -1,  1739,    -1,    -1,    -1,    -1,   124,
     125,    -1,  1733,   128,  1735,   503,   504,  1738,  1753,  1754,
     508,  1019,    -1,    -1,   512,  2120,  2121,   515,    -1,   756,
     757,    -1,    -1,   760,   761,  1756,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1054,    -1,  1056,    -1,
      -1,   549,    -1,    -1,   552,   553,    -1,    -1,    -1,   557,
     558,    -1,    -1,   561,   562,    -1,    -1,   565,   566,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   577,    -1,
      -1,    -1,    -1,  1814,    -1,    -1,     0,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1829,  1830,
      -1,    -1,    -1,   601,    -1,   603,    -1,    -1,   606,    -1,
     608,    -1,    -1,    -1,  1122,    -1,    -1,  1848,    -1,  1850,
      -1,    -1,  1853,    -1,    -1,   623,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1910,  1911,
     639,    -1,    -1,  1874,    58,  1876,   119,    -1,    -1,    -1,
      -1,    -1,   125,    -1,    -1,  1163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,    -1,    -1,
      -1,    -1,   145,    -1,    -1,    89,    90,   676,    -1,  1910,
    1911,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,
     927,  1199,  1200,   107,   108,    -1,    -1,    -1,    -1,    -1,
      -1,   938,    -1,    -1,    -1,   704,   705,   706,   707,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1964,
      -1,    -1,    -1,    -1,    -1,    -1,   140,   141,  1973,    -1,
      -1,    -1,  1963,   731,  1965,    -1,    -1,    -1,    -1,   737,
      -1,   214,    -1,    -1,    -1,    -1,    -1,  1255,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,
      -1,    -1,   760,   762,    -1,    -1,    -1,   766,    -1,  1277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     778,    -1,   196,    -1,    -1,    -1,  2031,  2032,    -1,    -1,
    1298,    -1,    -1,  1301,    -1,    -1,    -1,  1305,   797,    -1,
      -1,  1309,    -1,  2034,  2035,  2036,  2037,  2038,  2039,    -1,
    2041,    -1,   811,    -1,    -1,     0,    -1,  2048,  2049,  2050,
    2051,    -1,    -1,    -1,    -1,  1062,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,   252,   838,
      -1,    -1,    -1,    -1,   843,    -1,    -1,   846,    -1,    -1,
      -1,   324,    -1,    -1,    -1,   328,   329,   330,    -1,    -1,
     333,    -1,    -1,    -1,    -1,    -1,   339,   866,    -1,    -1,
      -1,    -1,   345,    -1,    -1,   289,    -1,    -1,   877,   352,
       1,   880,     3,    -1,   883,    -1,   885,    -1,   302,  2120,
    2121,    -1,    -1,    -1,    -1,    -1,   369,    -1,   312,    -1,
     314,   374,    -1,    -1,    89,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,   912,   100,    37,    38,    39,    40,
      41,   919,   107,   108,     3,    -1,    -1,    -1,   926,   927,
     928,    -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,
     938,    -1,   940,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,   424,    -1,   426,    -1,    76,    77,    -1,    37,    -1,
      81,    -1,    -1,    -1,    -1,    -1,   151,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,
      -1,   979,    -1,   168,    -1,   458,    -1,    -1,    -1,    -1,
     988,   112,   113,    -1,    -1,   993,    -1,    76,    77,    -1,
      -1,   999,    81,   124,   125,    -1,    -1,   128,    -1,    88,
     131,  1009,   133,   134,    -1,  1252,    -1,    -1,    -1,    -1,
     434,  1529,    -1,    -1,    -1,    -1,    -1,  1025,    -1,    -1,
      -1,  1539,    -1,   112,   113,  1272,    -1,  1035,    -1,    -1,
      -1,    -1,  1279,    -1,    -1,   124,   125,  1555,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     474,    -1,    -1,    -1,  1062,  1573,    -1,    -1,    -1,    -1,
    1578,    -1,  1580,  1072,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1597,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   571,  1097,
    1098,    -1,    -1,  1101,  1102,  1103,    -1,    -1,    -1,    -1,
    1108,  1109,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,
      -1,  1119,    -1,    -1,    -1,    -1,    -1,   312,    -1,   314,
      -1,    -1,    -1,    -1,   607,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1652,    -1,    -1,    -1,    -1,    -1,
       3,   565,   566,   567,   568,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,    -1,   639,  1166,   150,    -1,
    1169,   153,   586,   587,   588,    28,    -1,    -1,    -1,  1178,
      -1,    -1,    -1,    -1,    37,   167,    -1,   169,    -1,   171,
      -1,    -1,   606,    -1,    -1,    -1,    -1,    -1,   671,    -1,
    1199,  1200,    -1,    -1,    -1,    -1,    -1,  1206,    -1,    -1,
      -1,  1210,    -1,  1212,  1213,  1214,  1215,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,  1737,
      -1,  1739,  1230,  1231,    -1,    88,    -1,    -1,    -1,    -1,
    1748,    -1,    -1,    -1,    -1,  1753,  1754,    -1,    -1,    -1,
      -1,  1249,  1760,    -1,  1252,    -1,  1254,    -1,    -1,   112,
     113,    -1,    -1,    -1,    -1,   738,    -1,    -1,    -1,    -1,
      -1,   124,   125,    -1,  1272,   128,    -1,   462,    -1,    -1,
      -1,  1279,    -1,    -1,    -1,    -1,    -1,    -1,   473,   762,
      -1,    -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1301,    -1,    -1,    -1,    -1,    -1,   781,    -1,
      -1,    -1,    -1,    -1,    -1,   788,    -1,   731,   791,    -1,
      -1,    -1,  1830,   737,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   811,    -1,
     525,    -1,    -1,    -1,   817,   818,   819,   820,   821,   822,
     823,    -1,    -1,   826,   827,    -1,   829,   830,   831,   832,
     833,   834,   835,   836,    -1,   838,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     863,   864,    -1,   866,    -1,    -1,    -1,    -1,   150,    -1,
      -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,    -1,   169,    -1,   171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1937,
    1938,    -1,    -1,    -1,    -1,    -1,     0,   910,   911,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1964,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1973,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1495,    -1,    -1,
      -1,    -1,    -1,    -1,  1502,   978,    -1,   980,    -1,    -1,
      -1,  1509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,   504,  2031,  2032,    89,   940,    -1,    -1,    -1,
      -1,    -1,  1530,   515,  1532,    -1,   100,  1010,    -1,    -1,
      -1,    -1,    -1,   107,   108,    -1,  1019,   529,   530,    -1,
      -1,    -1,   737,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1559,  1560,    -1,    -1,   979,    -1,    -1,    -1,    -1,
     552,   553,    -1,    -1,  1573,   557,   558,    -1,    -1,   561,
     562,  1054,    -1,  1056,    -1,   999,    -1,   151,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,
     164,    -1,    -1,    -1,   168,  1604,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1613,  1614,    -1,  1616,   601,
      -1,   603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1635,    -1,  2147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1122,
    1649,    -1,    -1,    -1,    -1,    -1,    -1,  2165,  1657,  1658,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1667,    -1,
    1669,  1670,    -1,    -1,  1673,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1681,    -1,    -1,  1684,    -1,    -1,    -1,    -1,
    1163,    -1,    -1,    -1,  1108,  1109,    -1,    -1,    -1,    -1,
      -1,  1174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1199,  1200,    -1,  1727,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,   927,    -1,    -1,    -1,    -1,    -1,   312,  1748,
     314,   503,   504,   938,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1760,    -1,   515,  1763,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1775,   529,   530,    -1,
    1253,  1780,  1255,    -1,  1783,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     552,   553,    -1,    -1,  1277,   557,   558,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1232,    -1,
    1234,  1294,    -1,    -1,    -1,  1298,    -1,    -1,  1301,    -1,
      -1,    -1,  1305,    -1,    -1,    -1,  1309,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   601,
    1848,   603,  1850,    -1,    -1,  1853,    -1,    -1,    -1,  1858,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1869,    -1,    -1,    -1,    -1,    -1,  1874,    -1,  1876,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1886,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,   462,     8,
       9,  1900,  1901,  1902,  1903,    -1,    -1,  1906,    -1,   473,
      -1,  1910,  1911,    -1,  1913,    -1,  1915,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1927,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1937,  1938,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,   525,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      -1,  1980,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   145,
    1483,   120,   121,    -1,  1487,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
     139,   140,   141,   142,   143,   144,  2034,  2035,  2036,  2037,
    2038,    -1,    -1,  1025,  2043,    -1,    -1,    -1,    -1,    -1,
    2048,  2049,  2050,  2051,    -1,    -1,  1529,    -1,    -1,    -1,
      -1,  2060,    -1,    -1,    -1,    -1,  1539,    -1,    -1,    -1,
    2069,    -1,  2071,    -1,    -1,    -1,    -1,  1550,   214,    -1,
      -1,    -1,  1555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1509,    -1,    -1,  1571,    -1,
    1573,    -1,    -1,    -1,    -1,  1578,    -1,  1580,    -1,    -1,
      -1,    -1,    -1,  2112,    -1,  1097,  1098,    -1,    -1,  1101,
    1102,  1103,  2120,  2121,  1597,  2124,    -1,    -1,  2127,  2128,
      -1,    -1,  2131,    -1,  2133,    -1,    -1,  2136,    -1,    -1,
      -1,  2140,    -1,    -1,    -1,    -1,    -1,    -1,  2147,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2165,    -1,    -1,    -1,
      -1,    -1,    -1,   737,    -1,  2174,    -1,    -1,    -1,  1652,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,
      -1,    -1,   328,   329,   330,    -1,    -1,   333,    -1,    -1,
    2199,    -1,  1616,   339,  2203,    -1,    -1,    -1,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,   352,    -1,  2217,    -1,
    2219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2229,    -1,    -1,   369,    -1,    -1,    -1,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,  1231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1733,    -1,    -1,    -1,  1737,  1738,  1739,    -1,    -1,    -1,
      -1,    -1,    -1,  1025,    -1,  1748,    -1,    -1,    -1,    -1,
    1753,  1754,    -1,    -1,    -1,    -1,   352,  1760,   424,    -1,
     426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,  1781,  1782,
      -1,  1784,  1785,    -1,    -1,    -1,  1789,  1790,  1791,  1792,
      -1,    -1,   458,    -1,    -1,    -1,    -1,    -1,    -1,  1802,
    1803,  1804,  1805,  1806,  1807,  1808,  1809,    -1,    -1,    -1,
      -1,  1814,    -1,    -1,    -1,  1097,  1098,    -1,    -1,  1101,
    1102,  1103,    -1,    -1,    -1,    -1,    -1,  1830,    -1,    -1,
      -1,    -1,    -1,   927,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   938,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1857,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,    -1,    -1,   153,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,   167,
      -1,   169,    58,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   571,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,  1877,  1937,  1938,    -1,    -1,    -1,    -1,
      -1,   607,    -1,    -1,    -1,    -1,    -1,    68,  1230,  1231,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
    1963,  1964,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,
    1973,    -1,    -1,   639,   140,   141,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,   671,    -1,   128,   141,   130,
      -1,    -1,   133,   134,   135,    -1,   294,   138,   139,    -1,
     141,   142,   143,   144,  2027,    -1,    -1,    -1,  2031,  2032,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1559,  1560,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,   681,   252,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   762,    -1,    -1,    -1,
     766,  1613,  1614,    -1,   237,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   781,    -1,    -1,    -1,    -1,
      -1,    -1,   788,   289,    -1,   791,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2147,   811,    -1,    -1,    -1,    -1,
      -1,   817,   818,   819,   820,   821,   822,   823,    -1,    -1,
     826,   827,  2165,   829,   830,   831,   832,   833,   834,   835,
     836,    -1,   838,    -1,    -1,    -1,    -1,    -1,    -1,   312,
     846,   847,   848,   849,   850,   851,   852,   853,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   864,    -1,
     866,   797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   811,  2219,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   830,   831,   832,   833,   834,    -1,
      -1,   837,   838,    -1,   910,   911,    -1,   843,    -1,    -1,
     846,   529,   530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   858,   859,   860,   861,   862,    -1,   434,   865,
     866,    -1,    -1,    -1,   552,   553,    -1,  1559,  1560,   557,
     558,   877,    -1,   561,   562,    -1,    -1,   883,    -1,    -1,
      -1,   887,   888,   571,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   434,    -1,    -1,    -1,    -1,    -1,   440,   474,    -1,
      -1,    -1,   978,    -1,   980,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   601,    -1,   603,    -1,    -1,    -1,    -1,
      -1,  1613,  1614,    -1,    -1,    -1,  1848,    -1,  1850,    -1,
      -1,    -1,    -1,    -1,  1010,    -1,   512,    -1,    -1,    -1,
      -1,    -1,    -1,  1019,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1874,    -1,  1876,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,  1054,    -1,
    1056,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   676,   565,
     566,   567,   568,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,    -1,    -1,   704,   705,   706,   707,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   572,
     606,    -1,   575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   588,  1122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   608,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   621,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1163,    -1,    -1,
      -1,    -1,    -1,   781,    -1,    -1,    -1,    -1,  1174,    -1,
     788,    -1,    -1,   791,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2034,  2035,  2036,  2037,  2038,    -1,    -1,    -1,
      -1,    -1,    -1,  1199,  1200,    -1,  2048,  2049,  2050,  2051,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   731,  1848,    -1,  1850,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1181,    -1,  1253,    -1,  1255,
      -1,    -1,  1874,    -1,  1876,    -1,    -1,    -1,   731,    -1,
      -1,    -1,    -1,    -1,   737,    -1,    -1,    -1,  2120,  2121,
      -1,  1277,   349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,  1294,     8,
       9,    -1,  1298,    -1,    -1,  1301,    -1,    -1,    -1,  1305,
      -1,    -1,    -1,  1309,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   411,    -1,    -1,    -1,   415,    -1,
      -1,   959,   960,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,  1301,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,    -1,   474,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,   125,  1025,    -1,   128,
     129,   130,  2034,  2035,  2036,  2037,  2038,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,  2048,  2049,  2050,  2051,
      -1,    -1,    -1,    -1,   940,    -1,  1054,    -1,  1056,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   928,    -1,    -1,    -1,    -1,
      -1,    -1,   935,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   979,    -1,    -1,    -1,  1483,    -1,  1097,
    1098,  1487,    -1,  1101,  1102,  1103,    -1,    -1,    -1,    -1,
     996,    -1,   998,   999,    -1,    -1,    -1,    -1,  2120,  2121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,    -1,
     993,    -1,    -1,  1529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1539,    -1,    -1,  1009,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1550,  1163,    -1,    -1,  1166,  1555,
      -1,  1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1178,    -1,    -1,    -1,   641,  1571,    -1,  1573,    -1,    -1,
      -1,    -1,  1578,    -1,  1580,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1206,  1062,
      -1,  1597,    -1,    -1,  1212,  1213,  1214,  1215,    -1,    -1,
      -1,    -1,  1108,  1109,   681,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1230,  1231,    -1,    -1,    -1,    -1,    -1,   696,
     697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1118,  1652,  1120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1298,   758,    -1,    -1,    -1,    -1,    -1,  1305,    -1,    -1,
     767,  1309,    -1,    -1,    -1,   772,   773,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   799,    -1,    -1,    -1,  1232,  1733,  1234,    -1,
      -1,  1737,  1738,  1739,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1748,    -1,    -1,    -1,    -1,  1753,  1754,    -1,
      -1,    -1,    -1,    -1,  1760,    -1,    -1,    -1,    -1,  1232,
     837,  1234,    -1,    -1,    -1,    -1,    -1,    -1,   845,    -1,
      -1,    -1,    -1,    -1,    -1,  1781,  1782,    -1,  1784,  1785,
      -1,    -1,    -1,  1789,  1790,  1791,  1792,    -1,   865,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,   881,   882,    -1,    -1,  1814,   886,
     887,   888,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1830,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1775,
      -1,    -1,    -1,    -1,  1780,  1781,  1782,  1783,  1784,  1785,
      -1,  1857,    -1,  1789,  1790,  1791,  1792,    -1,     1,    -1,
      -1,    -1,    -1,   940,    -1,    -1,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1809,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,  1529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,  1937,  1938,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,  1559,  1560,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1963,  1964,   102,
    1578,    -1,  1580,    -1,    -1,    -1,    -1,  1973,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,    -1,    -1,  1613,  1614,    -1,    -1,    -1,
      -1,    -1,    -1,  1509,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2027,  1495,     0,    -1,  2031,  2032,    -1,    -1,  1502,
      -1,    -1,    -1,    -1,  1652,    -1,    -1,    -1,    -1,  1657,
    1658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1667,
      -1,  1669,  1670,    -1,    -1,  1673,    -1,  1530,    -1,  1532,
      -1,    -1,  1535,  1681,    -1,  1538,  1684,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    -1,  1161,    -1,    -1,    -1,    -1,    92,
      -1,    -1,    -1,  1170,  1171,    -1,  1173,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1181,    -1,    -1,    -1,    -1,    -1,
    1616,  1188,    89,    -1,    -1,    -1,    -1,    -1,  1195,  1196,
      -1,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
      -1,  2147,   145,  1616,    -1,    -1,    -1,    -1,    -1,    -1,
     127,  1624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2165,
      -1,    -1,  1635,   166,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,    -1,
      -1,   168,    -1,    -1,    -1,    -1,  1273,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,  1830,  2219,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   199,   200,    -1,    -1,    -1,    -1,    -1,    -1,
    1848,    -1,  1850,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1319,  1320,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1874,    -1,  1876,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1900,  1901,  1902,  1903,    -1,    -1,  1906,    -1,
      -1,    -1,  1910,  1911,  1371,  1913,  1373,  1915,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1384,  1385,  1927,
      -1,    -1,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1818,  1819,    -1,  1821,    -1,
      -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,  1435,    -1,
    1437,   338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1877,   349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1461,    -1,  1463,    -1,  1465,    -1,
    1467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   406,  1877,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2034,  2035,  2036,  2037,
    2038,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2048,  2049,  2050,  2051,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2060,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2069,    -1,  2071,    -1,   458,   459,    -1,    -1,    -1,
     463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   472,
      -1,    -1,   475,    -1,    -1,    -1,    -1,    -1,    -1,   456,
      -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,  2120,  2121,    -1,    -1,   509,    -1,    -1,  2127,
    2128,    -1,   515,  2131,    -1,  2133,    -1,   681,  2136,    -1,
      -1,    -1,  2140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   525,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1641,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   549,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2203,  1663,  1664,  1665,  1666,
      -1,  1668,  1669,   596,   571,    -1,    -1,  1674,  1675,    -1,
    1677,   578,  1679,   606,   581,    -1,    -1,    -1,    -1,    -1,
    1687,  1688,  1689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   626,    -1,    -1,   629,    -1,   631,    -1,
     633,    -1,    -1,   797,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   830,   831,   832,   833,
     834,    -1,    -1,   837,    -1,    -1,    -1,    -1,    -1,   843,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   858,   859,   860,   861,   862,    -1,
      -1,   865,    -1,    -1,    -1,    -1,   683,    -1,    -1,    -1,
      -1,    -1,    -1,   877,    -1,    57,    58,    -1,    -1,   883,
      -1,    -1,    -1,   887,   888,    -1,    -1,   704,   705,   706,
     707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    -1,
      -1,    -1,    94,    -1,    -1,   732,   733,   734,   100,    -1,
     737,    -1,    -1,    -1,   741,   107,   108,    -1,    -1,    -1,
      -1,    -1,   749,    -1,    -1,    -1,    -1,    -1,    -1,   756,
     757,   758,    -1,   760,   761,   127,    -1,    -1,    -1,    -1,
     767,    -1,    -1,   770,    -1,    -1,    -1,   125,   140,    -1,
      -1,   778,    -1,    -1,   781,    -1,    -1,    -1,    -1,    -1,
    1887,   788,    -1,    -1,   791,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1907,    -1,    -1,    -1,    -1,  1912,    -1,  1914,  1915,    -1,
    1917,  1918,    -1,  1920,    -1,  1922,    -1,    -1,    -1,    -1,
      -1,  1928,  1929,   195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
      -1,   874,   875,   876,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,  1965,    -1,
      -1,    -1,    -1,    -1,   871,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   910,   911,   912,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   919,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     927,   928,    -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,
     302,   938,   939,   940,    -1,   942,    -1,    -1,    -1,    -1,
     312,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   985,    -1,  2061,  2062,    -1,  2064,  2065,  2066,
      -1,    -1,    -1,  2070,  2071,    -1,   324,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   333,    -1,  1010,    -1,    -1,
      -1,   339,    -1,    -1,  1017,  1018,   993,  1181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1031,    -1,
      -1,    -1,  1009,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2129,  2130,    -1,  2132,  2133,    -1,    -1,    -1,
    2137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1054,  1055,  1056,
      -1,    -1,    -1,    -1,    -1,  1062,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   424,    -1,   426,    -1,
    2177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   456,    -1,    -1,    -1,  1121,    -1,
      -1,    -1,    -1,  1126,    -1,    -1,    -1,    -1,    -1,  1132,
      -1,    -1,   474,    -1,    -1,  1138,    -1,    -1,    -1,    -1,
      -1,  1144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,   511,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1163,    -1,    -1,  1166,
      -1,    -1,  1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1182,    -1,   549,    -1,    -1,
      -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   565,   566,   567,   568,   569,   570,  1206,
      -1,    -1,    -1,    -1,    -1,  1212,  1213,  1214,  1215,    -1,
      -1,    -1,    -1,   571,   586,   587,    -1,    -1,    -1,    -1,
    1253,  1254,    -1,    -1,    -1,    -1,    -1,    -1,  1235,    -1,
    1237,    -1,    -1,    -1,   606,    -1,   608,    -1,    -1,    -1,
      -1,    -1,  1249,   411,    -1,  1252,    -1,   619,    -1,   607,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1272,    -1,    -1,    -1,    -1,
      -1,    -1,  1279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   659,    -1,    -1,
    1297,  1298,    -1,    -1,    -1,    -1,    -1,  1304,  1305,    -1,
      -1,  1308,  1309,    -1,    -1,    -1,   474,    -1,    -1,    -1,
      -1,    -1,    -1,   671,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   730,    -1,
      -1,    -1,    -1,    28,    -1,   737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     738,    -1,    -1,    -1,   756,    -1,    -1,    -1,   760,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,   778,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,  1450,  1451,    -1,
      -1,    86,    87,   781,    -1,    -1,    -1,    -1,    -1,    -1,
     788,    -1,    -1,   791,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
    1483,    -1,    -1,    -1,  1487,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   681,    -1,    -1,    -1,  1550,    -1,    -1,
      -1,    -1,  1529,    -1,    -1,  1532,    -1,    -1,   696,    -1,
      -1,  1564,  1565,  1566,  1567,    -1,   704,   705,   706,   707,
     912,   913,    -1,    -1,    -1,    -1,    -1,   919,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   927,   928,    -1,    -1,    -1,
      -1,    -1,    -1,   935,    -1,    -1,   938,   939,   940,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,
      -1,  1775,    -1,    -1,    -1,    -1,  1780,  1781,  1782,  1783,
    1784,  1785,    -1,    -1,    -1,  1789,  1790,  1791,  1792,   767,
      -1,    -1,    -1,    -1,   772,    -1,    -1,   979,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   987,    -1,    -1,    -1,    -1,
     978,   993,   980,    -1,    -1,    -1,    -1,   999,  1635,    -1,
      -1,   799,    -1,    -1,    -1,    -1,    -1,  1009,    -1,    -1,
      -1,    -1,    99,    -1,  1651,  1652,    -1,    -1,    -1,    -1,
    1657,  1658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1019,    -1,  1670,    -1,    -1,  1673,    -1,    -1,   837,
      -1,    -1,    -1,    -1,  1681,  1708,    -1,   845,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1062,    -1,    -1,    -1,    -1,    -1,  1054,   865,  1056,    -1,
    1733,    -1,  1735,    -1,    -1,  1738,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   881,    -1,    -1,    -1,    -1,   886,   887,
     888,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,  1108,    -1,    -1,    -1,
      -1,    -1,   199,   200,    -1,  1117,    -1,    -1,    28,  1756,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   940,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,  1814,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1163,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,    -1,    -1,
     100,    -1,  1829,  1830,   104,   105,   106,   107,   108,   109,
     110,   111,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,  1853,    -1,   128,   129,
     130,    -1,    -1,   133,    -1,    -1,   313,    -1,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   332,    -1,  1249,    -1,    -1,
    1252,   338,  1254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1262,    -1,   349,    -1,    -1,    -1,    -1,  1255,    -1,    -1,
    1272,    -1,    -1,  1910,  1911,    -1,    -1,  1279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1298,    -1,    -1,    -1,    -1,    -1,    -1,  1305,    -1,    -1,
      -1,  1309,    -1,    -1,    -1,    -1,    -1,     1,  1965,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1161,    -1,    -1,    -1,    -1,  1166,   456,
      -1,  1169,  1170,  1171,    -1,  1173,  2039,    -1,  2041,    -1,
      -1,    -1,    -1,  1181,    -1,    -1,    -1,    -1,    -1,    -1,
    1188,    -1,    -1,    -1,    68,    -1,    -1,  1195,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,  1206,    -1,
      -1,    -1,    86,    87,  1212,  1213,  1214,  1215,    -1,    -1,
      -1,   508,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
      -1,    -1,   549,   137,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,  1273,    -1,    -1,  1480,    -1,
      -1,    -1,    -1,    -1,   571,    -1,    -1,    -1,    -1,    -1,
      -1,   578,  1494,    -1,   581,    -1,    -1,    -1,    -1,  1501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1509,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1319,    -1,    -1,    -1,    -1,    -1,    -1,  1530,    -1,
    1532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1539,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1555,    -1,    -1,
      -1,    -1,    -1,  1371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1384,    -1,    -1,    -1,
    1578,    -1,  1580,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1597,
      -1,    -1,    -1,  1615,    -1,    -1,    -1,   704,   705,   706,
     707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1635,    -1,    -1,    -1,  1435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   732,   733,   734,    -1,    -1,
      -1,    -1,    -1,    -1,   741,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   749,  1461,  1652,    -1,    -1,  1465,    -1,   756,
     757,   758,    -1,   760,   761,    -1,    -1,    -1,    -1,    -1,
     767,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   778,    -1,    -1,   781,    -1,    -1,    -1,    -1,    -1,
      -1,   788,    -1,    -1,   791,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1727,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1737,
      -1,  1739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1753,  1754,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   871,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1781,  1782,    -1,  1784,  1785,    -1,    -1,
      -1,  1789,  1790,  1791,  1792,    -1,    -1,    -1,  1810,    -1,
      -1,    -1,    -1,    -1,  1802,  1803,  1804,  1805,  1806,  1807,
    1808,  1809,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
    1832,    -1,   919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   928,  1830,    -1,    -1,    -1,    -1,    -1,   935,    -1,
      -1,  1853,    -1,   940,    -1,   942,    -1,    -1,    -1,  1657,
    1658,    -1,    -1,    -1,    -1,  1663,    -1,  1665,    -1,    -1,
    1668,  1669,    -1,    -1,    -1,    -1,  1674,  1675,    -1,  1677,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1687,
      -1,  1689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   993,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1009,    -1,   199,   200,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1945,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,  1054,  1055,  1056,
      -1,    -1,    -1,    -1,    -1,  1062,  1964,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1973,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   313,  2027,
      -1,    -1,    -1,  2031,  2032,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,   332,    -1,   133,
     134,   135,    -1,   338,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,   349,    -1,  1163,    -1,    -1,  1166,
      -1,    -1,  1169,    -1,    -1,    -1,    -1,    -1,    -1,  1887,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1906,  1907,
      -1,    -1,    -1,    -1,    -1,    -1,  1914,    -1,    -1,  1206,
    1918,    -1,  1920,    -1,    -1,  1212,  1213,  1214,  1215,    -1,
      -1,  1929,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1235,    -1,
    1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1249,    -1,    -1,  1252,    -1,  1965,    -1,    -1,
      -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   456,    -1,    -1,    -1,  1272,    -1,    -1,    -1,    -1,
      -1,    -1,  1279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    90,    -1,    -1,    -1,    -1,
    1297,  1298,    -1,    -1,    -1,    -1,    -1,  1304,  1305,    -1,
      -1,  1308,  1309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,  2061,  2062,    -1,  2064,    -1,  2066,    -1,
      -1,  2069,  2070,  2071,   549,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,    -1,
      -1,    -1,    -1,   578,    -1,    -1,   581,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,   141,    -1,
      -1,  2129,    -1,    -1,  2132,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2140,    -1,   157,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2177,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,   312,    -1,   704,
     705,   706,   707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1529,    -1,    -1,  1532,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   732,   733,   734,
      -1,    -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   749,    -1,   289,    -1,    -1,    -1,
      -1,   756,   757,   758,    -1,   760,   761,    -1,    -1,   302,
      -1,    -1,   767,    -1,     3,   770,    -1,    -1,    -1,   312,
      -1,    -1,    -1,   778,    -1,    -1,   781,    -1,    -1,    -1,
      -1,    -1,    -1,   788,    -1,    -1,   791,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,  1635,   434,
      -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,  1651,  1652,    -1,    76,    77,    -1,
    1657,  1658,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,  1670,    -1,    -1,  1673,    -1,    -1,   474,
      -1,    -1,    -1,   102,  1681,    -1,   871,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   434,    -1,   508,    -1,    -1,    -1,   440,    -1,    -1,
     139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   928,    -1,    -1,    -1,    -1,    -1,    -1,
     935,   474,    -1,    -1,    -1,   940,    -1,   942,    -1,  1756,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     565,   566,   567,   568,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,    -1,
      -1,   586,   587,   588,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,   993,    -1,
      -1,   606,    -1,   608,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1009,    -1,   621,    -1,    -1,    -1,
      -1,    -1,  1829,  1830,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   565,   566,   567,   568,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,  1853,    -1,    -1,    -1,
      -1,    -1,    -1,   586,   587,   588,    -1,    -1,    -1,  1054,
    1055,  1056,    -1,    -1,    -1,    -1,    -1,  1062,    -1,    -1,
      -1,   604,    -1,   606,    -1,   608,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,   621,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1910,  1911,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   731,    -1,    -1,    -1,
      -1,    -1,   737,    -1,    -1,    -1,    -1,   151,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,
     164,    -1,    -1,    -1,   168,    -1,    -1,    -1,  1965,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1163,    -1,
      -1,  1166,    -1,    -1,  1169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,    -1,    -1,
     723,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   731,    -1,
      -1,    -1,    -1,    -1,   737,    -1,    -1,    -1,    -1,    -1,
      -1,  1206,    -1,    -1,   676,    -1,    -1,  1212,  1213,  1214,
    1215,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1235,    -1,  1237,    -1,   706,   707,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1249,    -1,    -1,  1252,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,  1272,   292,   293,
     294,    -1,    -1,    -1,  1279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,
      -1,    -1,  1297,  1298,    -1,    -1,    -1,    -1,    -1,  1304,
    1305,     1,    -1,  1308,  1309,    -1,    -1,    -1,   332,    -1,
      -1,    -1,    -1,   928,   338,    -1,    -1,    -1,    -1,    -1,
     935,    -1,    -1,    -1,    -1,   940,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,   988,    -1,    -1,    76,    77,   993,    -1,
      -1,    81,    -1,   926,   999,   928,    -1,    87,    88,    89,
      -1,    -1,   935,    -1,  1009,    -1,    -1,   940,    -1,    -1,
      -1,    -1,   102,     1,    -1,    -1,     4,     5,     6,    -1,
       8,     9,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   456,   133,   134,    -1,   979,    -1,   462,    -1,
      -1,    -1,    -1,    -1,    -1,   988,    -1,  1062,    -1,   473,
     993,    -1,    -1,    -1,    -1,    -1,   999,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1009,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,    86,    -1,
      -1,    -1,    -1,  1108,  1109,    -1,    -1,    -1,    -1,    -1,
      -1,   525,   100,  1118,    -1,  1120,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,  1062,
      -1,    -1,   120,   121,  1529,   549,    -1,  1532,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,   571,    -1,    -1,
      -1,    -1,    -1,    -1,   578,    -1,    -1,   581,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1108,  1109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1118,    -1,  1120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1232,    -1,  1234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1651,  1652,    -1,    -1,
      -1,    -1,  1657,  1658,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,  1670,    -1,    -1,  1673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1681,    -1,    -1,    -1,
     704,   705,   706,   707,    -1,    -1,    -1,    -1,    -1,  1232,
      -1,  1234,    -1,    -1,  1166,    -1,    -1,  1169,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1178,    -1,   732,   733,
     734,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,    -1,    -1,   164,   749,    -1,    -1,   168,    -1,
      -1,    -1,   756,   757,  1206,    -1,   760,   761,    -1,    -1,
    1212,  1213,  1214,  1215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1756,    -1,    -1,    -1,    -1,     3,   781,    -1,   199,
     200,    -1,    -1,    -1,   788,    -1,    -1,   791,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,  1829,  1830,    -1,    -1,    -1,    76,
      77,    78,    79,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,   871,  1853,   289,
      -1,    -1,   292,   293,   294,   102,    -1,    -1,    -1,    -1,
     107,    99,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   313,    -1,    -1,    -1,   124,   125,    -1,
    1495,   128,    -1,    -1,    -1,    -1,    -1,  1502,    -1,    -1,
     137,    -1,   332,    -1,  1509,   919,    -1,    -1,   338,    -1,
      -1,    -1,    -1,   927,   928,  1910,  1911,    -1,    -1,    -1,
      -1,   935,    -1,   151,   938,  1530,    -1,  1532,   942,    -1,
    1535,    -1,   160,  1538,    -1,    -1,   164,    -1,    -1,    -1,
     168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1495,    -1,    -1,    -1,    -1,    -1,    -1,  1502,
    1965,   199,   200,    -1,    -1,    -1,  1509,    -1,    -1,   993,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1009,    -1,  1530,    -1,  1532,
      -1,    -1,  1535,    -1,    -1,  1538,    -1,    -1,    -1,    -1,
      -1,  1616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1624,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1635,    -1,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1054,  1055,  1056,   473,    -1,    -1,    -1,    -1,  1062,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1616,    -1,   313,    -1,    -1,    -1,    -1,
      -1,  1624,    -1,    -1,    -1,   525,    -1,    -1,    -1,    -1,
      -1,    -1,  1635,    -1,   332,    -1,    -1,    -1,    -1,    -1,
     338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   571,    -1,    -1,    -1,    -1,    -1,    -1,   578,  1163,
      -1,   581,  1166,    -1,    -1,  1169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1206,    -1,    -1,  1657,  1658,    -1,  1212,  1213,
    1214,  1215,    -1,    -1,    -1,  1667,    -1,  1669,  1670,    -1,
      -1,  1673,    -1,  1818,  1819,    -1,  1821,    -1,    -1,  1681,
      -1,  1235,  1684,  1237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,  1252,    -1,
      -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1272,    -1,
      -1,    -1,    -1,    -1,    -1,  1279,    -1,    -1,    -1,    -1,
      -1,    -1,  1877,    -1,   704,   705,   706,   707,    -1,    -1,
      -1,    -1,    -1,  1297,  1298,  1818,  1819,    -1,  1821,    -1,
    1304,  1305,    -1,    -1,  1308,  1309,    -1,   525,    -1,    -1,
      -1,    -1,   732,   733,   734,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   749,
      -1,    -1,    -1,    -1,    -1,    -1,   756,   757,    -1,    -1,
     760,   761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   571,  1877,     1,    -1,     3,    -1,    -1,
     578,   781,    -1,   581,    -1,    -1,    -1,    -1,   788,    -1,
      -1,   791,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,  1900,  1901,
    1902,  1903,    -1,    -1,  1906,    -1,   102,    -1,  1910,  1911,
      -1,  1913,    -1,  1915,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,  1927,    -1,    -1,   124,   125,
      -1,    -1,   128,   129,    -1,    -1,   704,   705,   706,   707,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   927,    -1,    -1,
      -1,    -1,    -1,    -1,   732,   733,   734,    -1,   938,    -1,
      -1,    -1,    -1,    -1,    -1,  1529,    -1,    -1,  1532,    -1,
      -1,   749,    -1,    -1,    -1,    -1,    -1,    -1,   756,   757,
      -1,    -1,   760,   761,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   781,    -1,    -1,    -1,    -1,    -1,    -1,
     788,    -1,    -1,   791,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2060,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,  2069,    -1,  2071,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1635,    -1,    -1,  1054,  1055,  1056,    -1,    -1,    -1,
      -1,    -1,  1062,    -1,    -1,    -1,    -1,  1651,  1652,    -1,
      -1,    -1,    -1,  1657,  1658,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,  1670,    -1,    -1,  1673,
      -1,    -1,    -1,    86,    87,  2127,  2128,  1681,    -1,  2131,
      -1,  2133,    -1,    -1,  2136,    -1,    -1,   100,  2140,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   927,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,   131,    -1,
     938,    -1,  2174,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1163,    -1,    -1,  1166,    -1,    -1,  1169,
      -1,  2203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1206,    -1,    -1,    -1,
      -1,    -1,  1212,  1213,  1214,  1215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1235,    -1,  1237,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1829,  1830,    -1,    -1,    -1,
      -1,    -1,  1252,    -1,    -1,    -1,  1054,  1055,  1056,    -1,
      -1,    -1,    -1,    -1,  1062,    -1,    -1,    -1,    -1,  1853,
      -1,    -1,  1272,    -1,    -1,    -1,    -1,    -1,    -1,  1279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1297,  1298,    -1,
      -1,    -1,    -1,    -1,  1304,  1305,    -1,    -1,  1308,  1309,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1910,  1911,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    -1,    -1,  1163,    -1,    -1,  1166,    -1,
      -1,  1169,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1206,    -1,
      -1,    -1,    -1,    69,  1212,  1213,  1214,  1215,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,  1235,    -1,  1237,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1252,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
     126,   127,   128,    -1,  1272,   131,   132,   133,   134,    -1,
     136,  1279,    -1,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,  1297,
    1298,    -1,    -1,    -1,    -1,    -1,  1304,  1305,    -1,    -1,
    1308,  1309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1529,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,  1651,  1652,    73,    74,    75,    -1,  1657,  1658,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
    1670,    -1,    -1,  1673,    -1,    -1,    -1,    -1,    -1,    -1,
     100,  1681,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,   132,   133,    -1,    -1,   136,    -1,   138,   139,
      -1,   141,   142,   143,   144,   145,   146,   147,   148,   149,
      -1,  1529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1829,
    1830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1651,  1652,    -1,    -1,    -1,    -1,  1657,
    1658,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,  1670,    -1,    -1,  1673,    -1,    -1,    -1,    86,
      87,    -1,    -1,  1681,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
    1910,  1911,    -1,   120,   121,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,    -1,   132,   133,    -1,    -1,   136,
      -1,   138,   139,    -1,   141,   142,   143,   144,   145,   146,
     147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,  1829,  1830,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1910,  1911,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,   133,   134,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,   133,   134,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,     1,   130,     3,
       4,     5,     6,    -1,     8,     9,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,     1,   130,     3,     4,     5,
       6,    -1,     8,     9,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,     1,   130,     3,     4,     5,     6,   135,     8,     9,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    -1,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,   131,    -1,   133,    -1,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    90,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
     120,   121,    73,    74,    75,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,    -1,    86,    87,   137,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,    -1,    -1,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,   120,   121,    73,    74,    75,   125,    -1,
      -1,   128,   129,   130,   131,    -1,   133,    -1,    86,    87,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,   120,   121,    73,    74,
      75,   125,    -1,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    86,    87,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,   120,
     121,    73,    74,    75,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,    -1,    86,    87,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
      -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    68,     8,
       9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    68,
     130,   131,    -1,   133,    73,    74,    75,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    68,     8,     9,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    68,   130,
     131,    -1,   133,    73,    74,    75,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    68,     8,     9,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,    68,   130,    -1,    -1,
     133,    73,    74,    75,    -1,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,    -1,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    68,     8,     9,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    68,   130,    -1,    -1,   133,    73,
      74,    75,    -1,   138,   139,   140,   141,   142,   143,   144,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    68,     8,     9,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    68,   130,    -1,    -1,   133,    73,    74,    75,
     137,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    -1,   130,    -1,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    68,     8,     9,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    68,   130,   131,    -1,   133,
      73,    74,    75,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,   134,   135,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    68,
       8,     9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      68,   130,    -1,    -1,    -1,    73,    74,    75,    -1,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    68,     8,     9,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    68,   130,
      -1,    -1,    -1,    73,    74,    75,    -1,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,    -1,   135,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    68,     8,     9,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    68,   130,    -1,    -1,    -1,    73,    74,
      75,    -1,   138,   139,   140,   141,   142,   143,   144,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,
      -1,    -1,   137,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    68,     8,     9,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    68,   130,    -1,    -1,    -1,
      73,    74,    75,    -1,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    68,     8,     9,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    68,   130,    -1,    -1,    -1,    73,    74,
      75,   137,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,    -1,   135,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    68,     8,     9,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    68,   130,    -1,    -1,    -1,    73,
      74,    75,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    68,     8,     9,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    68,   130,    -1,    -1,    -1,    73,    74,    75,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    -1,   130,     0,     1,    -1,     3,     4,
       5,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,   133,   134,
      -1,    -1,    -1,   138,   139,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,
      -1,    -1,    -1,   138,   139,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,     0,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,     0,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,     0,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,     1,   134,     3,     4,     5,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,   130,   131,    -1,     1,   134,     3,     4,     5,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,     1,   134,     3,     4,
       5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,
       3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
       1,   134,     3,     4,     5,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,
     131,     1,    -1,     3,     4,     5,    -1,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,     1,    -1,     3,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
       3,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,     3,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,     3,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,     3,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
     139,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,     3,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,     3,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,     3,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   139,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   139,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,     3,    -1,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      70,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      80,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
       3,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,     3,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,     0,
       1,    -1,     3,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,    -1,    -1,    -1,   107,     3,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,   123,   124,   125,    -1,    -1,   128,    -1,    -1,
     131,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,   109,     3,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
     109,     3,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,     1,   109,     3,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,   103,    -1,     0,     1,   107,     3,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,   123,   124,   125,    -1,    -1,   128,
      -1,    -1,   131,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,   129,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,   129,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,    -1,   129,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,   128,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,   128,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,   128,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    28,    -1,    -1,    -1,   124,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
     123,   124
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    56,    68,
      69,    76,    77,    78,    79,    81,    82,    83,    84,    85,
      87,    88,    89,   102,   103,   107,   112,   113,   114,   115,
     116,   117,   118,   119,   122,   123,   124,   125,   128,   131,
     151,   152,   153,   155,   180,   217,   218,   219,   220,   221,
     222,   274,   277,   278,   281,   282,   283,   284,   285,   286,
     287,   289,   293,   296,   297,   298,   299,   300,   301,   306,
     307,   316,   317,   318,   325,   326,   330,   331,   334,   339,
     369,   372,   373,   391,   392,   394,   395,   396,   397,   398,
     399,    79,   137,     5,    31,   222,   393,   222,   128,   128,
     128,   155,   222,   393,   128,   128,   287,   288,   325,   334,
      37,   153,   222,   315,   316,   318,   320,   321,   322,   324,
     325,   334,   337,   338,   343,   126,   131,   152,   153,   222,
     135,   137,   131,   135,   134,   125,   126,   217,   222,   135,
     137,   155,   222,   135,   137,   134,   126,   135,   137,   135,
     134,   135,   153,   222,   325,     1,    31,    37,    38,    39,
      40,    41,   131,   151,   153,   219,   221,   222,   274,   284,
     285,   287,   289,   318,   322,   325,   334,   337,   338,   339,
     341,   350,   351,   352,   353,    37,    38,    39,    40,    41,
     153,   325,   352,   128,   139,     1,    29,    30,    31,    32,
      33,    68,   118,   119,   129,   151,   222,   273,   277,   279,
     280,   287,   289,   293,   294,   295,   301,   305,   313,   314,
     356,   357,   358,   359,   360,   361,    76,    77,   334,   128,
     330,   318,   325,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    49,    50,    69,    87,
      89,   102,   114,   115,   116,   117,   122,   123,   135,   155,
     176,   177,   273,   278,   279,   287,   290,   294,   296,   304,
     371,   374,   375,   376,   381,   382,   383,    31,    78,   137,
     219,   221,   306,   372,   373,   391,   392,   399,     1,   219,
     283,   300,   306,   339,   369,   395,     1,   394,   395,     0,
     222,   393,   393,     5,   132,   393,     1,     4,     6,     8,
       9,    68,    73,    74,    75,    86,    87,   100,   104,   105,
     106,   107,   108,   109,   110,   111,   120,   121,   125,   128,
     130,   138,   139,   141,   142,   143,   144,   155,   181,   182,
     222,   223,   224,   225,   226,   229,   230,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   393,
     405,   406,   407,   408,   152,   222,   135,   155,   222,   234,
     249,   251,   255,   267,   268,   269,   234,   247,   248,   255,
     266,   271,   287,   334,   139,   128,   139,   129,   313,   314,
     360,   361,    76,    77,   334,   337,   338,   315,   320,   324,
     325,   129,   325,   129,   325,   325,    87,   155,   207,   209,
     211,   215,   216,   222,   239,   259,   305,   131,   126,   126,
     131,     1,    70,    80,    82,    83,    90,    93,    94,    95,
      96,    98,   100,   101,   128,   130,   131,   134,   156,   157,
     158,   159,   160,   161,   162,   163,   178,   179,   181,   182,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     198,   202,   203,   204,   205,   222,   230,   253,   305,   317,
     319,   325,   334,   339,   340,   370,    82,    83,   222,   273,
     277,   287,   290,   293,   301,   308,   309,     1,   134,   204,
     205,   153,   222,     1,   222,   275,   276,   309,     1,   134,
     276,   309,    68,   208,   210,   212,   213,   214,   222,   305,
       1,   134,   204,   205,   309,     1,   134,   204,   205,     1,
     134,   204,   205,   153,   222,   133,   133,   133,   133,   133,
     133,   135,   334,   318,   322,   325,     1,   132,   375,   382,
     383,   375,   382,   383,     1,   131,   133,   133,   334,   131,
     140,   152,   222,   267,   271,   272,   133,   135,   155,   222,
     134,   135,   134,   135,   325,    37,   128,   139,   141,   151,
     153,   222,   273,   279,   287,   289,   294,   315,   316,   325,
     332,   334,   335,   338,     1,   129,   133,     1,   129,   133,
       1,   133,     1,   133,   129,   129,   318,   128,   318,   128,
     128,   128,     1,   131,     1,   134,     1,    37,    38,    39,
      40,    41,   131,   222,   273,   279,   287,   290,   294,   325,
     352,   353,     1,   131,     1,   371,   374,   382,   383,   371,
     374,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    87,    88,    90,    91,    92,   131,   137,   155,
     199,   200,   201,   222,   230,   249,   251,   269,   330,   362,
     363,   366,   367,   368,   375,   376,   377,   378,   379,   380,
     382,   383,   385,   386,   387,   388,   389,   390,   134,    31,
     222,   393,   222,   217,   218,   220,   221,   315,   316,   322,
     325,   334,   339,   341,   375,   383,   219,   306,   132,   248,
     129,   128,   234,   255,   128,   234,   255,   234,   255,   128,
     222,   273,   279,   287,   290,   294,   312,   271,   128,   128,
     312,   271,   128,   128,   128,   128,   128,   128,   234,   255,
     128,   129,   251,   269,   279,   287,   289,   294,   302,   354,
     393,   135,   140,   183,   184,   227,   231,   249,   135,     1,
     134,   135,   222,     1,     7,     8,     9,   128,   136,   139,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
     132,   250,   184,   227,   228,   236,   256,   125,   145,   146,
     142,   143,    10,    11,   239,   259,    12,    13,   126,   127,
      14,    15,   141,   147,   148,    16,    17,   149,   250,   129,
       7,     8,     9,   128,   136,   139,   250,   125,   145,   146,
     142,   143,    10,    11,    12,    13,   126,   127,    14,    15,
     141,   147,   148,    16,    17,   149,   250,   129,   129,   109,
     222,   305,   400,   403,   404,   135,   135,   250,     1,   129,
     133,   251,   269,   250,   129,   133,   251,   149,   149,   129,
     140,   152,   271,   272,   140,   152,   271,   272,   129,   129,
     129,   129,   315,   320,   324,   129,   129,   315,    11,   127,
     133,   132,   128,   325,   334,   335,    68,   214,   222,   305,
     214,     1,   222,   273,   287,   290,   301,   310,   305,   339,
     340,   128,   155,   222,   222,   305,     1,   128,   310,   125,
     128,   222,   305,   131,   330,   382,   383,   382,   383,   382,
     131,   382,   383,   131,     1,   134,     1,     1,   131,   133,
     133,    71,    72,    93,    97,    99,   134,    71,    72,   134,
     131,     1,   202,   203,     1,   202,   203,     1,   132,   128,
     137,   222,   291,   292,   315,   321,   323,   325,   334,   341,
     342,   343,     1,   305,   313,   358,   334,   319,   325,   128,
     137,   162,   163,   178,   179,   181,   182,   191,   222,   305,
     126,   155,   222,   222,   273,   287,   290,   126,   126,   132,
     330,   331,   133,   135,     1,   131,   135,    28,   154,   222,
     127,   133,   132,   222,   335,   337,   350,   350,   350,   350,
     350,   350,   131,   133,   134,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   227,   228,   230,
     248,   267,   304,   347,   348,   315,   318,   320,   322,   324,
     315,   322,   135,   249,   268,   344,   346,   382,   383,   382,
     383,   350,   351,   350,   351,   140,   140,   140,    54,   356,
     357,     1,   276,   135,   135,     1,   134,   204,   205,     1,
     134,   204,   205,   135,   129,   222,   313,   314,   325,   334,
     335,   360,   361,   140,   152,   271,   272,   325,   334,   338,
     334,   128,   139,   332,     1,     1,   133,     1,    54,   222,
     356,   357,   133,     1,    54,   222,   356,   357,   133,     1,
      54,   222,   356,   357,   133,    54,   222,   356,   357,     3,
      28,    47,    76,    77,   129,   327,   328,   329,   249,   152,
     222,   251,   134,   135,   131,   131,   137,   271,   272,   137,
     128,   128,     1,   128,    55,    56,    57,    59,    60,    61,
      62,    65,    88,   222,   330,   362,   385,   389,   128,   222,
     131,   131,   131,   227,   228,   251,   269,   128,   287,   128,
     128,   195,   222,   131,   131,   131,   137,   136,   136,   131,
     133,     1,   377,   378,   377,   378,   362,   363,   371,   374,
     362,   363,   371,   374,     1,     1,   393,   393,   153,   222,
     135,   135,   334,   322,   325,   375,   383,   375,   383,   383,
     248,   131,    68,   151,   222,   279,   287,   289,   294,   303,
     355,   222,   304,   126,   128,   139,   222,   273,   279,   287,
     290,   294,   325,   333,   334,   336,   222,   273,   279,   287,
     290,   294,   311,   251,   354,   382,   222,   139,   336,   311,
     249,   393,   393,   393,   249,   355,   355,   129,   222,   279,
     287,   289,   294,   335,   129,   136,     1,   174,   175,     1,
     134,   133,   140,     1,   174,   175,   134,     1,   174,   175,
       1,   222,   129,   228,   231,   232,   268,     1,   222,   251,
     269,   227,   249,     1,   236,   256,   236,   256,   236,   256,
     237,   257,   237,   257,   238,   258,   238,   258,   239,   259,
     239,   259,   239,   259,   227,   228,   241,   260,   227,   228,
     241,   260,   227,   228,   242,   261,   227,   228,   243,   262,
     227,   228,   244,   263,   245,   264,   246,   265,   137,   227,
     228,   251,   252,   269,   270,   227,   249,     1,   222,   129,
     231,   232,     1,   222,   251,   269,   227,   249,   236,   256,
     236,   256,   236,   256,   237,   257,   237,   257,   238,   258,
     238,   258,   239,   259,   239,   259,   239,   259,   239,   259,
     227,   228,   241,   260,   227,   228,   241,   260,   227,   228,
     242,   261,   227,   228,   243,   262,   227,   228,   244,   263,
     245,   264,   246,   265,   137,   251,   252,   269,   270,   227,
     249,   126,   127,   222,   401,   402,   222,   134,   400,   403,
     404,   404,   228,   268,   249,   268,   393,   228,   268,   249,
     268,   251,   252,   269,   270,   251,   252,   269,   270,   140,
     140,   140,   140,   140,   140,   215,   207,   209,   211,   222,
     325,   334,   127,   132,   335,   127,   135,   126,   135,   222,
     273,   287,   290,   335,   325,   334,   341,   342,   195,   292,
     315,   325,   334,   135,   222,   135,   222,   335,   222,   325,
     128,   131,   134,   185,   186,   185,   186,   382,   382,   382,
     224,   382,   382,     1,   347,   348,   129,   271,   272,   135,
     133,     1,   305,   313,   358,   334,   315,   323,   325,   137,
     330,   222,   128,   319,   319,   222,     1,     1,   292,   216,
     126,   214,   214,   271,   272,   132,   275,     1,   276,   204,
     205,     1,   134,   276,   132,   137,   132,   137,   213,   209,
     222,   132,   222,   132,   382,   383,     1,   131,   133,   131,
     133,   131,   166,   167,   170,   171,   172,   134,   164,   167,
     131,   134,   166,   167,   170,   171,   172,   132,    37,   341,
     342,   343,   344,   346,   349,     1,   134,   276,     1,   134,
     276,     1,   134,   204,   205,   325,   334,   335,   129,   129,
     129,   140,   140,   140,   334,   332,   129,   360,   361,   140,
     152,   271,   272,   356,   357,   305,   356,   356,   356,   357,
     129,   128,   129,   133,   328,   129,   129,   129,   129,   133,
       1,   174,   175,   362,   363,   371,   374,   137,   137,   362,
     363,   371,   374,   251,   269,   251,   269,   129,   251,   269,
     137,   271,   272,   137,   128,   128,   362,   128,   228,   269,
     128,   137,    59,     1,   129,   131,   222,   251,   269,   384,
     131,   131,   131,   131,   131,   393,   128,   249,   249,   222,
     362,   363,   371,   374,    92,    90,    91,    92,   126,   322,
     383,   383,   131,   151,   152,   151,   279,   287,   289,   294,
     335,   129,   129,   129,   335,   216,   129,   325,   336,   360,
     361,   271,   272,   126,   334,   128,   333,   139,   126,   139,
     222,   273,   279,   287,   290,   294,   336,   129,   129,   129,
     129,   271,   272,   139,   139,   336,   133,   129,   133,   133,
     133,   129,   133,   135,   236,   256,   345,   393,     1,   134,
     227,   249,     1,     1,   129,   133,   129,   140,   140,     1,
     133,   137,   137,   133,   137,   137,   129,   140,   140,   137,
     137,   137,   137,   222,   222,   131,   133,   222,   393,   134,
     134,   129,   137,   137,   137,   137,   137,   137,   137,   137,
     325,   334,   209,   216,   126,   135,   135,   222,   334,   325,
     129,   334,   315,   129,   135,   135,   222,   129,     1,   174,
     175,   291,   325,   222,   128,   315,   323,   323,   271,   272,
     128,   129,   127,   216,   127,   127,   271,   272,   131,     1,
     131,   207,   206,   305,   207,   206,   211,   132,   135,     1,
     168,   169,     1,   168,   169,   383,     1,   347,   348,   133,
     134,   344,   346,     1,   131,     1,   131,   334,   332,   129,
     129,   129,   140,   140,   140,   335,   338,   251,   129,   328,
     393,     1,   362,   363,   371,   374,   362,   363,   371,   374,
     129,   129,   129,   129,     1,   362,   129,   251,   362,   363,
     137,   137,   269,   129,   251,   269,    59,   269,   384,   393,
     128,   362,   137,   131,     1,   131,     1,   129,   269,   384,
       3,   129,   137,   393,   129,   129,   133,   128,   128,   195,
     129,   129,     1,   129,   127,   325,   334,   336,   129,   129,
     129,   140,   140,   216,   333,   129,   360,   361,   271,   272,
     216,   271,   272,   126,   139,   128,   344,   140,   140,   271,
     272,   271,   272,   139,   354,   222,   222,   249,     1,   222,
     349,   228,   268,   227,   228,   227,   228,   248,   266,   227,
     228,   248,   266,   227,   228,   227,   228,   248,   266,   227,
     228,   248,   266,   227,   228,   248,   266,   227,   228,   248,
     266,   227,   228,   248,   266,   227,   228,   248,   266,   401,
     131,   131,   127,   216,   135,   382,   315,   132,   135,     1,
     128,   137,   137,   127,   204,   205,   131,   204,   205,   132,
     335,   132,   211,   349,   134,   344,   346,     1,   204,   205,
     204,   205,   129,   129,   362,   362,   362,   362,   362,   363,
     129,   128,   384,   129,   251,   269,   251,   362,     1,   129,
     251,   269,   139,   364,   365,   393,   131,   365,     3,   129,
     137,   135,   195,   249,   249,     1,     1,   333,   129,   127,
     129,   129,   140,   140,   127,   140,   140,   216,   271,   272,
     354,   140,   140,   140,   140,   271,   272,   129,   129,   129,
     129,   129,   133,   134,   127,   347,   271,   272,   271,   272,
     204,   205,   207,   207,   133,   134,     1,    67,    67,   251,
     269,   129,   251,   269,   129,   131,   129,   131,   362,   363,
     129,   362,   363,   222,   129,   133,   137,   128,     3,   129,
     137,   365,   131,   365,    75,   195,   196,   197,   129,   129,
     129,   133,   127,   140,   140,   129,   140,   140,   134,   131,
     134,   362,   362,   129,   129,   131,   362,   251,   362,   363,
     140,   131,   364,   365,   249,   365,   131,   365,   129,   137,
       3,   129,   137,   382,   382,   134,   196,   135,   195,   135,
     236,   256,   344,   129,   393,   129,   129,   129,   129,   137,
     131,   365,   365,   131,   365,   197,   129,   349,   362,   128,
     131,   131,   131,   365,   129,   129,   129,   137,   134,   133,
     134,   249,   129,   131,   131,   131,   365,   134,   129,   131,
     129,   131
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 151: /* guess_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12048 "grammar.ec"
        break;
      case 152: /* type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12055 "grammar.ec"
        break;
      case 153: /* base_strict_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12062 "grammar.ec"
        break;
      case 154: /* base_strict_type_name */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 12069 "grammar.ec"
        break;
      case 155: /* strict_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12076 "grammar.ec"
        break;
      case 156: /* class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12083 "grammar.ec"
        break;
      case 157: /* constructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12090 "grammar.ec"
        break;
      case 158: /* destructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12097 "grammar.ec"
        break;
      case 159: /* virtual_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12104 "grammar.ec"
        break;
      case 160: /* class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12111 "grammar.ec"
        break;
      case 161: /* virtual_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12118 "grammar.ec"
        break;
      case 162: /* class_function_definition */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12125 "grammar.ec"
        break;
      case 163: /* class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12132 "grammar.ec"
        break;
      case 164: /* instance_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12139 "grammar.ec"
        break;
      case 165: /* instance_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12146 "grammar.ec"
        break;
      case 166: /* instance_class_function_definition */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12153 "grammar.ec"
        break;
      case 167: /* instance_class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12160 "grammar.ec"
        break;
      case 168: /* data_member_initialization */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12167 "grammar.ec"
        break;
      case 169: /* data_member_initialization_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12174 "grammar.ec"
        break;
      case 170: /* data_member_initialization_list */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12181 "grammar.ec"
        break;
      case 171: /* data_member_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12188 "grammar.ec"
        break;
      case 172: /* data_member_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12195 "grammar.ec"
        break;
      case 173: /* members_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12202 "grammar.ec"
        break;
      case 174: /* members_initialization_list */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12209 "grammar.ec"
        break;
      case 175: /* members_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12216 "grammar.ec"
        break;
      case 176: /* instantiation_named */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12223 "grammar.ec"
        break;
      case 177: /* instantiation_named_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12230 "grammar.ec"
        break;
      case 181: /* instantiation_unnamed */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12237 "grammar.ec"
        break;
      case 182: /* instantiation_unnamed_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12244 "grammar.ec"
        break;
      case 185: /* default_property */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12251 "grammar.ec"
        break;
      case 186: /* default_property_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12258 "grammar.ec"
        break;
      case 187: /* default_property_list */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12265 "grammar.ec"
        break;
      case 188: /* default_property_list_error */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12272 "grammar.ec"
        break;
      case 191: /* property */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1393 of yacc.c  */
#line 12279 "grammar.ec"
        break;
      case 202: /* struct_declaration */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12286 "grammar.ec"
        break;
      case 203: /* struct_declaration_error */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12293 "grammar.ec"
        break;
      case 204: /* struct_declaration_list */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12300 "grammar.ec"
        break;
      case 205: /* struct_declaration_list_error */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12307 "grammar.ec"
        break;
      case 206: /* template_datatype */
/* Line 1393 of yacc.c  */
#line 273 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1393 of yacc.c  */
#line 12314 "grammar.ec"
        break;
      case 207: /* template_type_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12321 "grammar.ec"
        break;
      case 208: /* template_type_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12328 "grammar.ec"
        break;
      case 209: /* template_identifier_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12335 "grammar.ec"
        break;
      case 210: /* template_identifier_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12342 "grammar.ec"
        break;
      case 211: /* template_expression_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12349 "grammar.ec"
        break;
      case 212: /* template_expression_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12356 "grammar.ec"
        break;
      case 213: /* template_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12363 "grammar.ec"
        break;
      case 214: /* template_parameters_list */
/* Line 1393 of yacc.c  */
#line 274 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1393 of yacc.c  */
#line 12370 "grammar.ec"
        break;
      case 215: /* template_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12377 "grammar.ec"
        break;
      case 216: /* template_arguments_list */
/* Line 1393 of yacc.c  */
#line 275 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1393 of yacc.c  */
#line 12384 "grammar.ec"
        break;
      case 217: /* class_entry */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12391 "grammar.ec"
        break;
      case 218: /* class_decl */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12398 "grammar.ec"
        break;
      case 219: /* class */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12405 "grammar.ec"
        break;
      case 220: /* class_head */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12412 "grammar.ec"
        break;
      case 221: /* class_error */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12419 "grammar.ec"
        break;
      case 222: /* identifier */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1393 of yacc.c  */
#line 12426 "grammar.ec"
        break;
      case 223: /* primary_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12433 "grammar.ec"
        break;
      case 224: /* i18n_string */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12440 "grammar.ec"
        break;
      case 229: /* primary_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12447 "grammar.ec"
        break;
      case 230: /* postfix_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12454 "grammar.ec"
        break;
      case 231: /* argument_expression_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12461 "grammar.ec"
        break;
      case 232: /* argument_expression_list_error */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12468 "grammar.ec"
        break;
      case 234: /* unary_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12475 "grammar.ec"
        break;
      case 236: /* cast_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12482 "grammar.ec"
        break;
      case 237: /* multiplicative_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12489 "grammar.ec"
        break;
      case 238: /* additive_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12496 "grammar.ec"
        break;
      case 239: /* shift_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12503 "grammar.ec"
        break;
      case 241: /* relational_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12510 "grammar.ec"
        break;
      case 242: /* equality_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12517 "grammar.ec"
        break;
      case 243: /* and_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12524 "grammar.ec"
        break;
      case 244: /* exclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12531 "grammar.ec"
        break;
      case 245: /* inclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12538 "grammar.ec"
        break;
      case 246: /* logical_and_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12545 "grammar.ec"
        break;
      case 247: /* logical_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12552 "grammar.ec"
        break;
      case 248: /* conditional_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12559 "grammar.ec"
        break;
      case 249: /* assignment_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12566 "grammar.ec"
        break;
      case 251: /* expression */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12573 "grammar.ec"
        break;
      case 253: /* postfix_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12580 "grammar.ec"
        break;
      case 255: /* unary_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12587 "grammar.ec"
        break;
      case 256: /* cast_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12594 "grammar.ec"
        break;
      case 257: /* multiplicative_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12601 "grammar.ec"
        break;
      case 258: /* additive_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12608 "grammar.ec"
        break;
      case 259: /* shift_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12615 "grammar.ec"
        break;
      case 260: /* relational_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12622 "grammar.ec"
        break;
      case 261: /* equality_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12629 "grammar.ec"
        break;
      case 262: /* and_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12636 "grammar.ec"
        break;
      case 263: /* exclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12643 "grammar.ec"
        break;
      case 264: /* inclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12650 "grammar.ec"
        break;
      case 265: /* logical_and_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12657 "grammar.ec"
        break;
      case 266: /* logical_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12664 "grammar.ec"
        break;
      case 267: /* conditional_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12671 "grammar.ec"
        break;
      case 268: /* assignment_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12678 "grammar.ec"
        break;
      case 269: /* expression_error */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12685 "grammar.ec"
        break;
      case 271: /* constant_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12692 "grammar.ec"
        break;
      case 272: /* constant_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12699 "grammar.ec"
        break;
      case 273: /* storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12706 "grammar.ec"
        break;
      case 274: /* external_storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12713 "grammar.ec"
        break;
      case 275: /* enumerator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1393 of yacc.c  */
#line 12720 "grammar.ec"
        break;
      case 276: /* enumerator_list */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1393 of yacc.c  */
#line 12727 "grammar.ec"
        break;
      case 278: /* enum_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12734 "grammar.ec"
        break;
      case 279: /* enum_specifier_compound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12741 "grammar.ec"
        break;
      case 280: /* enum_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12748 "grammar.ec"
        break;
      case 282: /* enum_class */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12755 "grammar.ec"
        break;
      case 283: /* enum_class_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12762 "grammar.ec"
        break;
      case 284: /* class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12769 "grammar.ec"
        break;
      case 285: /* class_specifier_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12776 "grammar.ec"
        break;
      case 286: /* ext_storage */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12783 "grammar.ec"
        break;
      case 287: /* type_qualifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12790 "grammar.ec"
        break;
      case 288: /* type_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12797 "grammar.ec"
        break;
      case 289: /* type_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12804 "grammar.ec"
        break;
      case 290: /* strict_type_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12811 "grammar.ec"
        break;
      case 291: /* struct_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12818 "grammar.ec"
        break;
      case 292: /* struct_declarator_list */
/* Line 1393 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1393 of yacc.c  */
#line 12825 "grammar.ec"
        break;
      case 293: /* struct_entry */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12832 "grammar.ec"
        break;
      case 294: /* struct_or_union_specifier_compound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12839 "grammar.ec"
        break;
      case 295: /* struct_or_union_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12846 "grammar.ec"
        break;
      case 296: /* struct_or_union_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12853 "grammar.ec"
        break;
      case 297: /* struct_decl */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12860 "grammar.ec"
        break;
      case 298: /* struct_head */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12867 "grammar.ec"
        break;
      case 299: /* struct_class */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12874 "grammar.ec"
        break;
      case 300: /* struct_class_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12881 "grammar.ec"
        break;
      case 302: /* specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12888 "grammar.ec"
        break;
      case 303: /* guess_specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12895 "grammar.ec"
        break;
      case 304: /* declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12902 "grammar.ec"
        break;
      case 305: /* guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12909 "grammar.ec"
        break;
      case 306: /* external_guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12916 "grammar.ec"
        break;
      case 307: /* external_guess_declaration_specifiers_error */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12923 "grammar.ec"
        break;
      case 308: /* _inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12930 "grammar.ec"
        break;
      case 309: /* inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12937 "grammar.ec"
        break;
      case 313: /* identifier_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12944 "grammar.ec"
        break;
      case 314: /* identifier_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12951 "grammar.ec"
        break;
      case 315: /* direct_declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12958 "grammar.ec"
        break;
      case 316: /* direct_declarator_nofunction */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12965 "grammar.ec"
        break;
      case 317: /* direct_declarator_function_start */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12972 "grammar.ec"
        break;
      case 318: /* direct_declarator_function */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12979 "grammar.ec"
        break;
      case 319: /* direct_declarator_function_error */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12986 "grammar.ec"
        break;
      case 320: /* direct_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12993 "grammar.ec"
        break;
      case 321: /* direct_declarator_function_start_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13000 "grammar.ec"
        break;
      case 322: /* direct_declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13007 "grammar.ec"
        break;
      case 323: /* direct_declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13014 "grammar.ec"
        break;
      case 324: /* direct_declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13021 "grammar.ec"
        break;
      case 325: /* ext_decl */
/* Line 1393 of yacc.c  */
#line 278 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1393 of yacc.c  */
#line 13028 "grammar.ec"
        break;
      case 327: /* attribute_word */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13035 "grammar.ec"
        break;
      case 328: /* attribute */
/* Line 1393 of yacc.c  */
#line 279 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1393 of yacc.c  */
#line 13042 "grammar.ec"
        break;
      case 329: /* attribs_list */
/* Line 1393 of yacc.c  */
#line 280 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1393 of yacc.c  */
#line 13049 "grammar.ec"
        break;
      case 330: /* attrib */
/* Line 1393 of yacc.c  */
#line 277 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1393 of yacc.c  */
#line 13056 "grammar.ec"
        break;
      case 331: /* multi_attrib */
/* Line 1393 of yacc.c  */
#line 281 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1393 of yacc.c  */
#line 13063 "grammar.ec"
        break;
      case 332: /* direct_abstract_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13070 "grammar.ec"
        break;
      case 333: /* direct_abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13077 "grammar.ec"
        break;
      case 334: /* pointer */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1393 of yacc.c  */
#line 13084 "grammar.ec"
        break;
      case 335: /* abstract_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13091 "grammar.ec"
        break;
      case 336: /* abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13098 "grammar.ec"
        break;
      case 337: /* declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13105 "grammar.ec"
        break;
      case 338: /* declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13112 "grammar.ec"
        break;
      case 339: /* declarator_function */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13119 "grammar.ec"
        break;
      case 340: /* declarator_function_error */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13126 "grammar.ec"
        break;
      case 341: /* declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13133 "grammar.ec"
        break;
      case 342: /* declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13140 "grammar.ec"
        break;
      case 343: /* declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13147 "grammar.ec"
        break;
      case 344: /* initializer */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13154 "grammar.ec"
        break;
      case 346: /* initializer_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13161 "grammar.ec"
        break;
      case 347: /* initializer_condition */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13168 "grammar.ec"
        break;
      case 348: /* initializer_condition_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13175 "grammar.ec"
        break;
      case 349: /* initializer_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1393 of yacc.c  */
#line 13182 "grammar.ec"
        break;
      case 350: /* init_declarator */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13189 "grammar.ec"
        break;
      case 351: /* init_declarator_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13196 "grammar.ec"
        break;
      case 352: /* init_declarator_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13203 "grammar.ec"
        break;
      case 353: /* init_declarator_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13210 "grammar.ec"
        break;
      case 354: /* type_name */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13217 "grammar.ec"
        break;
      case 355: /* guess_type_name */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13224 "grammar.ec"
        break;
      case 356: /* parameter_declaration */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13231 "grammar.ec"
        break;
      case 357: /* parameter_declaration_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13238 "grammar.ec"
        break;
      case 358: /* parameter_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13245 "grammar.ec"
        break;
      case 359: /* parameter_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13252 "grammar.ec"
        break;
      case 360: /* parameter_type_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13259 "grammar.ec"
        break;
      case 361: /* parameter_type_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13266 "grammar.ec"
        break;
      case 362: /* statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13273 "grammar.ec"
        break;
      case 363: /* statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13280 "grammar.ec"
        break;
      case 367: /* labeled_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13287 "grammar.ec"
        break;
      case 368: /* labeled_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13294 "grammar.ec"
        break;
      case 369: /* declaration_mode */
/* Line 1393 of yacc.c  */
#line 276 "grammar.y"
        { };
/* Line 1393 of yacc.c  */
#line 13301 "grammar.ec"
        break;
      case 371: /* declaration */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1393 of yacc.c  */
#line 13308 "grammar.ec"
        break;
      case 375: /* declaration_list */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13315 "grammar.ec"
        break;
      case 376: /* declaration_list_error */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13322 "grammar.ec"
        break;
      case 377: /* statement_list */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13329 "grammar.ec"
        break;
      case 378: /* statement_list_error */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13336 "grammar.ec"
        break;
      case 379: /* compound_inside */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13343 "grammar.ec"
        break;
      case 380: /* compound_inside_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13350 "grammar.ec"
        break;
      case 381: /* compound_start */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1393 of yacc.c  */
#line 13357 "grammar.ec"
        break;
      case 382: /* compound_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13364 "grammar.ec"
        break;
      case 383: /* compound_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13371 "grammar.ec"
        break;
      case 384: /* expression_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13378 "grammar.ec"
        break;
      case 385: /* selection_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13385 "grammar.ec"
        break;
      case 386: /* selection_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13392 "grammar.ec"
        break;
      case 387: /* iteration_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13399 "grammar.ec"
        break;
      case 388: /* iteration_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13406 "grammar.ec"
        break;
      case 389: /* jump_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13413 "grammar.ec"
        break;
      case 390: /* jump_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13420 "grammar.ec"
        break;
      case 391: /* function_definition */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13427 "grammar.ec"
        break;
      case 392: /* function_definition_error */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13434 "grammar.ec"
        break;
      case 393: /* string_literal */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13441 "grammar.ec"
        break;
      case 394: /* external_declaration */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13448 "grammar.ec"
        break;
      case 395: /* external_declaration_error */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13455 "grammar.ec"
        break;
      case 396: /* translation_unit_error */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13462 "grammar.ec"
        break;
      case 397: /* translation_unit */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13469 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1787 of yacc.c  */
#line 289 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1787 of yacc.c  */
#line 308 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1787 of yacc.c  */
#line 346 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1787 of yacc.c  */
#line 348 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1787 of yacc.c  */
#line 427 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1787 of yacc.c  */
#line 431 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1787 of yacc.c  */
#line 435 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1787 of yacc.c  */
#line 437 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1787 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1787 of yacc.c  */
#line 478 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1787 of yacc.c  */
#line 483 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1787 of yacc.c  */
#line 488 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1787 of yacc.c  */
#line 493 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1787 of yacc.c  */
#line 495 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1787 of yacc.c  */
#line 500 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1787 of yacc.c  */
#line 502 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1787 of yacc.c  */
#line 507 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1787 of yacc.c  */
#line 509 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1787 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1787 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1787 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1787 of yacc.c  */
#line 520 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1787 of yacc.c  */
#line 522 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1787 of yacc.c  */
#line 526 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1787 of yacc.c  */
#line 530 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1787 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1787 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1787 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1787 of yacc.c  */
#line 549 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1787 of yacc.c  */
#line 551 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1787 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1787 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1787 of yacc.c  */
#line 564 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1787 of yacc.c  */
#line 569 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1787 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1787 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1787 of yacc.c  */
#line 578 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1787 of yacc.c  */
#line 582 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1787 of yacc.c  */
#line 583 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1787 of yacc.c  */
#line 587 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1787 of yacc.c  */
#line 589 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1787 of yacc.c  */
#line 599 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1787 of yacc.c  */
#line 603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1787 of yacc.c  */
#line 605 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1787 of yacc.c  */
#line 607 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1787 of yacc.c  */
#line 611 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1787 of yacc.c  */
#line 613 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1787 of yacc.c  */
#line 615 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1787 of yacc.c  */
#line 618 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1787 of yacc.c  */
#line 630 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1787 of yacc.c  */
#line 641 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1787 of yacc.c  */
#line 660 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1787 of yacc.c  */
#line 662 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1787 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1787 of yacc.c  */
#line 667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1787 of yacc.c  */
#line 668 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1787 of yacc.c  */
#line 669 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1787 of yacc.c  */
#line 670 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1787 of yacc.c  */
#line 671 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1787 of yacc.c  */
#line 674 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1787 of yacc.c  */
#line 686 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1787 of yacc.c  */
#line 691 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1787 of yacc.c  */
#line 692 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1787 of yacc.c  */
#line 693 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1787 of yacc.c  */
#line 697 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1787 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1787 of yacc.c  */
#line 699 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 700 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1787 of yacc.c  */
#line 701 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1787 of yacc.c  */
#line 702 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1787 of yacc.c  */
#line 703 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1787 of yacc.c  */
#line 708 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 710 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1787 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1787 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1787 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1787 of yacc.c  */
#line 721 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1787 of yacc.c  */
#line 723 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1787 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1787 of yacc.c  */
#line 755 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1787 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1787 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1787 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1787 of yacc.c  */
#line 766 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1787 of yacc.c  */
#line 768 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1787 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1787 of yacc.c  */
#line 799 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1787 of yacc.c  */
#line 801 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1787 of yacc.c  */
#line 806 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1787 of yacc.c  */
#line 808 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1787 of yacc.c  */
#line 813 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1787 of yacc.c  */
#line 815 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1787 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1787 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1787 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1787 of yacc.c  */
#line 825 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1787 of yacc.c  */
#line 830 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1787 of yacc.c  */
#line 833 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 836 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 839 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 904 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 906 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1787 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1787 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1787 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1787 of yacc.c  */
#line 917 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1787 of yacc.c  */
#line 919 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1787 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1787 of yacc.c  */
#line 953 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1787 of yacc.c  */
#line 954 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1787 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1787 of yacc.c  */
#line 959 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1787 of yacc.c  */
#line 960 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1787 of yacc.c  */
#line 961 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1787 of yacc.c  */
#line 965 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1787 of yacc.c  */
#line 966 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1787 of yacc.c  */
#line 967 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1787 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1787 of yacc.c  */
#line 976 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1787 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1787 of yacc.c  */
#line 982 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1787 of yacc.c  */
#line 985 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1787 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1787 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1787 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1787 of yacc.c  */
#line 997 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1787 of yacc.c  */
#line 999 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1787 of yacc.c  */
#line 1003 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1787 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1787 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1787 of yacc.c  */
#line 1014 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1787 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1787 of yacc.c  */
#line 1020 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1787 of yacc.c  */
#line 1026 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1787 of yacc.c  */
#line 1028 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1787 of yacc.c  */
#line 1032 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 1037 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 1039 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 1044 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1787 of yacc.c  */
#line 1051 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1787 of yacc.c  */
#line 1053 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1787 of yacc.c  */
#line 1058 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1787 of yacc.c  */
#line 1063 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1787 of yacc.c  */
#line 1065 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1787 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1787 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1787 of yacc.c  */
#line 1074 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1787 of yacc.c  */
#line 1076 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1787 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1787 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1787 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1787 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1787 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1787 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1787 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1787 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1787 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1787 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1787 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1787 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1787 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1787 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1787 of yacc.c  */
#line 1101 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1787 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1787 of yacc.c  */
#line 1104 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1787 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1787 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1787 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1787 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1787 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1787 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1787 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1787 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1787 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1787 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1787 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1787 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1787 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1787 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1787 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1787 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1787 of yacc.c  */
#line 1128 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1787 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1787 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1787 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1787 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1787 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1787 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1787 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1787 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1787 of yacc.c  */
#line 1149 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1787 of yacc.c  */
#line 1152 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1787 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1787 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1787 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1787 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1787 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1787 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1787 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1787 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1787 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1787 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1787 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1787 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1787 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1787 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1787 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1787 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1787 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1787 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1787 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1787 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1787 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1787 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1787 of yacc.c  */
#line 1223 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1787 of yacc.c  */
#line 1224 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1787 of yacc.c  */
#line 1264 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1787 of yacc.c  */
#line 1265 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1787 of yacc.c  */
#line 1270 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1787 of yacc.c  */
#line 1277 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1787 of yacc.c  */
#line 1279 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1787 of yacc.c  */
#line 1286 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1787 of yacc.c  */
#line 1287 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1787 of yacc.c  */
#line 1289 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1787 of yacc.c  */
#line 1291 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1787 of yacc.c  */
#line 1299 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1787 of yacc.c  */
#line 1300 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1787 of yacc.c  */
#line 1305 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1787 of yacc.c  */
#line 1312 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1787 of yacc.c  */
#line 1319 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1787 of yacc.c  */
#line 1325 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1787 of yacc.c  */
#line 1332 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1787 of yacc.c  */
#line 1338 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1787 of yacc.c  */
#line 1347 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1787 of yacc.c  */
#line 1354 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1787 of yacc.c  */
#line 1360 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1787 of yacc.c  */
#line 1366 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1787 of yacc.c  */
#line 1372 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1787 of yacc.c  */
#line 1378 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1787 of yacc.c  */
#line 1384 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1787 of yacc.c  */
#line 1395 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 1401 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1787 of yacc.c  */
#line 1405 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1787 of yacc.c  */
#line 1406 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1787 of yacc.c  */
#line 1407 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1787 of yacc.c  */
#line 1411 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1787 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1787 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1787 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1787 of yacc.c  */
#line 1418 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1787 of yacc.c  */
#line 1419 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1787 of yacc.c  */
#line 1420 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1787 of yacc.c  */
#line 1422 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1787 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1787 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1787 of yacc.c  */
#line 1437 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1787 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1787 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1787 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1787 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1787 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1787 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1787 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1787 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1787 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1787 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1787 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1787 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1787 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1787 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1787 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1787 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1787 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1787 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1787 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1787 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1787 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1787 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1787 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1787 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1787 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1787 of yacc.c  */
#line 1477 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1787 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1787 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1787 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1787 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1787 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1787 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1787 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1787 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1787 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1787 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1787 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1787 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1787 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1787 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1787 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1787 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1787 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1787 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1787 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1787 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1787 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1787 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1787 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1787 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1787 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1787 of yacc.c  */
#line 1539 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1787 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1787 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1787 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1787 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1787 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1787 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1787 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1787 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1787 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1787 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1787 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1787 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1787 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1787 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1787 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1787 of yacc.c  */
#line 1578 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1787 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 356:
/* Line 1787 of yacc.c  */
#line 1584 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1787 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1787 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1787 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1787 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1787 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 363:
/* Line 1787 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1787 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1787 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1787 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 368:
/* Line 1787 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1787 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1787 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1787 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1787 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 374:
/* Line 1787 of yacc.c  */
#line 1615 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 376:
/* Line 1787 of yacc.c  */
#line 1623 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1787 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1787 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1787 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1787 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1787 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1787 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 383:
/* Line 1787 of yacc.c  */
#line 1630 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1787 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1787 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1787 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1787 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1787 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1787 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1787 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 392:
/* Line 1787 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1787 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1787 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1787 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 397:
/* Line 1787 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1787 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1787 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1787 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 402:
/* Line 1787 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1787 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1787 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1787 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 407:
/* Line 1787 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1787 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 410:
/* Line 1787 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1787 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 413:
/* Line 1787 of yacc.c  */
#line 1682 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1787 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1787 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1787 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1787 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1787 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1787 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1787 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1787 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1787 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1787 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1787 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1787 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1787 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1787 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1787 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 430:
/* Line 1787 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1787 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1787 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1787 of yacc.c  */
#line 1712 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1787 of yacc.c  */
#line 1713 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1787 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1787 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1787 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1787 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 440:
/* Line 1787 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 441:
/* Line 1787 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 442:
/* Line 1787 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 443:
/* Line 1787 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 444:
/* Line 1787 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 445:
/* Line 1787 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 446:
/* Line 1787 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 447:
/* Line 1787 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 448:
/* Line 1787 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 449:
/* Line 1787 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 450:
/* Line 1787 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 451:
/* Line 1787 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 452:
/* Line 1787 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 453:
/* Line 1787 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 455:
/* Line 1787 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 456:
/* Line 1787 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 457:
/* Line 1787 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 459:
/* Line 1787 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 461:
/* Line 1787 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1787 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1787 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 464:
/* Line 1787 of yacc.c  */
#line 1757 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1787 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 466:
/* Line 1787 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 467:
/* Line 1787 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 468:
/* Line 1787 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1787 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1787 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1787 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1787 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1787 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1787 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1787 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1787 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1787 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 478:
/* Line 1787 of yacc.c  */
#line 1809 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 482:
/* Line 1787 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1787 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1787 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1787 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1787 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1787 of yacc.c  */
#line 1833 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 489:
/* Line 1787 of yacc.c  */
#line 1834 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1787 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1787 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1787 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 494:
/* Line 1787 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1787 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1787 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1787 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 499:
/* Line 1787 of yacc.c  */
#line 1862 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 501:
/* Line 1787 of yacc.c  */
#line 1868 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 502:
/* Line 1787 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1787 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1787 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1787 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1787 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1787 of yacc.c  */
#line 1915 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 508:
/* Line 1787 of yacc.c  */
#line 1916 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1787 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1787 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1787 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1787 of yacc.c  */
#line 1924 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1787 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1787 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1787 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 517:
/* Line 1787 of yacc.c  */
#line 1934 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1787 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1787 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1787 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 522:
/* Line 1787 of yacc.c  */
#line 1943 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1787 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1787 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1787 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 527:
/* Line 1787 of yacc.c  */
#line 1952 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1787 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1787 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1787 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 532:
/* Line 1787 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1787 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 535:
/* Line 1787 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1787 of yacc.c  */
#line 1972 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 538:
/* Line 1787 of yacc.c  */
#line 1973 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1787 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1787 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1787 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1787 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 544:
/* Line 1787 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1787 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1787 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1787 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 548:
/* Line 1787 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1787 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1787 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1787 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 552:
/* Line 1787 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1787 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1787 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1787 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 556:
/* Line 1787 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1787 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1787 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1787 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1787 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1787 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1787 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1787 of yacc.c  */
#line 2004 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 564:
/* Line 1787 of yacc.c  */
#line 2007 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1787 of yacc.c  */
#line 2015 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 566:
/* Line 1787 of yacc.c  */
#line 2019 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 567:
/* Line 1787 of yacc.c  */
#line 2024 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 569:
/* Line 1787 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1787 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1787 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1787 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 573:
/* Line 1787 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 574:
/* Line 1787 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 575:
/* Line 1787 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1787 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 577:
/* Line 1787 of yacc.c  */
#line 2054 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1787 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1787 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 580:
/* Line 1787 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 581:
/* Line 1787 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 582:
/* Line 1787 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 583:
/* Line 1787 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 586:
/* Line 1787 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 587:
/* Line 1787 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 588:
/* Line 1787 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 589:
/* Line 1787 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 590:
/* Line 1787 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 591:
/* Line 1787 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 592:
/* Line 1787 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 593:
/* Line 1787 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 594:
/* Line 1787 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 595:
/* Line 1787 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 596:
/* Line 1787 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 597:
/* Line 1787 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 598:
/* Line 1787 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 599:
/* Line 1787 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 600:
/* Line 1787 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 601:
/* Line 1787 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1787 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 603:
/* Line 1787 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 604:
/* Line 1787 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1787 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 606:
/* Line 1787 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 607:
/* Line 1787 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 609:
/* Line 1787 of yacc.c  */
#line 2108 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 610:
/* Line 1787 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1787 of yacc.c  */
#line 2113 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 612:
/* Line 1787 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 613:
/* Line 1787 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1787 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1787 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1787 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1787 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1787 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1787 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1787 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1787 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1787 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1787 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1787 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1787 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1787 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1787 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1787 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 629:
/* Line 1787 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 630:
/* Line 1787 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 631:
/* Line 1787 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 632:
/* Line 1787 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1787 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1787 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1787 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1787 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1787 of yacc.c  */
#line 2178 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1787 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1787 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1787 of yacc.c  */
#line 2181 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1787 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1787 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1787 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1787 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1787 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1787 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1787 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1787 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1787 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1787 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1787 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1787 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 653:
/* Line 1787 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 654:
/* Line 1787 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 655:
/* Line 1787 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 660:
/* Line 1787 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 661:
/* Line 1787 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 662:
/* Line 1787 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 663:
/* Line 1787 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 664:
/* Line 1787 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 665:
/* Line 1787 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 666:
/* Line 1787 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 667:
/* Line 1787 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 668:
/* Line 1787 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 669:
/* Line 1787 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 670:
/* Line 1787 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 671:
/* Line 1787 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 672:
/* Line 1787 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 673:
/* Line 1787 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 674:
/* Line 1787 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 675:
/* Line 1787 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 676:
/* Line 1787 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 677:
/* Line 1787 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 678:
/* Line 1787 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 679:
/* Line 1787 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 680:
/* Line 1787 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 681:
/* Line 1787 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 685:
/* Line 1787 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 686:
/* Line 1787 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 687:
/* Line 1787 of yacc.c  */
#line 2251 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 688:
/* Line 1787 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 689:
/* Line 1787 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 690:
/* Line 1787 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 691:
/* Line 1787 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 692:
/* Line 1787 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 693:
/* Line 1787 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 694:
/* Line 1787 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 695:
/* Line 1787 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 696:
/* Line 1787 of yacc.c  */
#line 2263 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 697:
/* Line 1787 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 698:
/* Line 1787 of yacc.c  */
#line 2265 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 699:
/* Line 1787 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 700:
/* Line 1787 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 701:
/* Line 1787 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 702:
/* Line 1787 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 703:
/* Line 1787 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 704:
/* Line 1787 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 705:
/* Line 1787 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 706:
/* Line 1787 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 707:
/* Line 1787 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 708:
/* Line 1787 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 709:
/* Line 1787 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 710:
/* Line 1787 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 714:
/* Line 1787 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 715:
/* Line 1787 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 716:
/* Line 1787 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 717:
/* Line 1787 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 718:
/* Line 1787 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 719:
/* Line 1787 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 720:
/* Line 1787 of yacc.c  */
#line 2287 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 721:
/* Line 1787 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 722:
/* Line 1787 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1787 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1787 of yacc.c  */
#line 2299 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1787 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1787 of yacc.c  */
#line 2303 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1787 of yacc.c  */
#line 2305 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 728:
/* Line 1787 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 729:
/* Line 1787 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 730:
/* Line 1787 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 731:
/* Line 1787 of yacc.c  */
#line 2313 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 732:
/* Line 1787 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 733:
/* Line 1787 of yacc.c  */
#line 2318 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 734:
/* Line 1787 of yacc.c  */
#line 2323 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 735:
/* Line 1787 of yacc.c  */
#line 2329 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 736:
/* Line 1787 of yacc.c  */
#line 2335 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 737:
/* Line 1787 of yacc.c  */
#line 2342 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 738:
/* Line 1787 of yacc.c  */
#line 2351 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 739:
/* Line 1787 of yacc.c  */
#line 2352 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 740:
/* Line 1787 of yacc.c  */
#line 2353 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 741:
/* Line 1787 of yacc.c  */
#line 2354 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 742:
/* Line 1787 of yacc.c  */
#line 2358 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 743:
/* Line 1787 of yacc.c  */
#line 2359 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 744:
/* Line 1787 of yacc.c  */
#line 2360 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 745:
/* Line 1787 of yacc.c  */
#line 2362 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1787 of yacc.c  */
#line 2363 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 747:
/* Line 1787 of yacc.c  */
#line 2364 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 748:
/* Line 1787 of yacc.c  */
#line 2366 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 749:
/* Line 1787 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 750:
/* Line 1787 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 751:
/* Line 1787 of yacc.c  */
#line 2372 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 752:
/* Line 1787 of yacc.c  */
#line 2377 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 753:
/* Line 1787 of yacc.c  */
#line 2385 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 754:
/* Line 1787 of yacc.c  */
#line 2394 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 755:
/* Line 1787 of yacc.c  */
#line 2402 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 756:
/* Line 1787 of yacc.c  */
#line 2404 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 757:
/* Line 1787 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 758:
/* Line 1787 of yacc.c  */
#line 2406 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 759:
/* Line 1787 of yacc.c  */
#line 2411 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 760:
/* Line 1787 of yacc.c  */
#line 2418 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 761:
/* Line 1787 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 762:
/* Line 1787 of yacc.c  */
#line 2428 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           (yyval.specifier).ctx = (yyvsp[(1) - (3)].specifier).ctx;
           (yyvsp[(1) - (3)].specifier).ctx = null;

           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 763:
/* Line 1787 of yacc.c  */
#line 2444 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 764:
/* Line 1787 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 765:
/* Line 1787 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 766:
/* Line 1787 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 767:
/* Line 1787 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 768:
/* Line 1787 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 769:
/* Line 1787 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 770:
/* Line 1787 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 771:
/* Line 1787 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 772:
/* Line 1787 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 773:
/* Line 1787 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 774:
/* Line 1787 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 775:
/* Line 1787 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 776:
/* Line 1787 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 777:
/* Line 1787 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 778:
/* Line 1787 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 779:
/* Line 1787 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 780:
/* Line 1787 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 781:
/* Line 1787 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 782:
/* Line 1787 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 783:
/* Line 1787 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 784:
/* Line 1787 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 785:
/* Line 1787 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 786:
/* Line 1787 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 787:
/* Line 1787 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 788:
/* Line 1787 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 789:
/* Line 1787 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 790:
/* Line 1787 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 791:
/* Line 1787 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 792:
/* Line 1787 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 793:
/* Line 1787 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 794:
/* Line 1787 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 795:
/* Line 1787 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 796:
/* Line 1787 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 797:
/* Line 1787 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 798:
/* Line 1787 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 799:
/* Line 1787 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 800:
/* Line 1787 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 801:
/* Line 1787 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 802:
/* Line 1787 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 803:
/* Line 1787 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 804:
/* Line 1787 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 805:
/* Line 1787 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 806:
/* Line 1787 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 807:
/* Line 1787 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 808:
/* Line 1787 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 809:
/* Line 1787 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 810:
/* Line 1787 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 811:
/* Line 1787 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 812:
/* Line 1787 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 813:
/* Line 1787 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 814:
/* Line 1787 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 815:
/* Line 1787 of yacc.c  */
#line 2531 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 816:
/* Line 1787 of yacc.c  */
#line 2532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 817:
/* Line 1787 of yacc.c  */
#line 2533 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 818:
/* Line 1787 of yacc.c  */
#line 2534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 819:
/* Line 1787 of yacc.c  */
#line 2535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 820:
/* Line 1787 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 821:
/* Line 1787 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 822:
/* Line 1787 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 823:
/* Line 1787 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 824:
/* Line 1787 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 825:
/* Line 1787 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 826:
/* Line 1787 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 827:
/* Line 1787 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 828:
/* Line 1787 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 829:
/* Line 1787 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 830:
/* Line 1787 of yacc.c  */
#line 2553 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 831:
/* Line 1787 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 832:
/* Line 1787 of yacc.c  */
#line 2557 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 833:
/* Line 1787 of yacc.c  */
#line 2565 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 835:
/* Line 1787 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 836:
/* Line 1787 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 837:
/* Line 1787 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 838:
/* Line 1787 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 839:
/* Line 1787 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 840:
/* Line 1787 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 841:
/* Line 1787 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 842:
/* Line 1787 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 843:
/* Line 1787 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 844:
/* Line 1787 of yacc.c  */
#line 2588 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 845:
/* Line 1787 of yacc.c  */
#line 2596 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 846:
/* Line 1787 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 847:
/* Line 1787 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 848:
/* Line 1787 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 849:
/* Line 1787 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 850:
/* Line 1787 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 851:
/* Line 1787 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 852:
/* Line 1787 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 853:
/* Line 1787 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 854:
/* Line 1787 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 855:
/* Line 1787 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 856:
/* Line 1787 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 857:
/* Line 1787 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 858:
/* Line 1787 of yacc.c  */
#line 2617 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 859:
/* Line 1787 of yacc.c  */
#line 2625 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 860:
/* Line 1787 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 861:
/* Line 1787 of yacc.c  */
#line 2634 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 862:
/* Line 1787 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 863:
/* Line 1787 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 864:
/* Line 1787 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 865:
/* Line 1787 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 866:
/* Line 1787 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 867:
/* Line 1787 of yacc.c  */
#line 2640 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 868:
/* Line 1787 of yacc.c  */
#line 2641 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 869:
/* Line 1787 of yacc.c  */
#line 2642 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 870:
/* Line 1787 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 871:
/* Line 1787 of yacc.c  */
#line 2644 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 872:
/* Line 1787 of yacc.c  */
#line 2646 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 873:
/* Line 1787 of yacc.c  */
#line 2654 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 874:
/* Line 1787 of yacc.c  */
#line 2662 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 875:
/* Line 1787 of yacc.c  */
#line 2663 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 876:
/* Line 1787 of yacc.c  */
#line 2667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 877:
/* Line 1787 of yacc.c  */
#line 2668 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 878:
/* Line 1787 of yacc.c  */
#line 2669 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 879:
/* Line 1787 of yacc.c  */
#line 2670 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 880:
/* Line 1787 of yacc.c  */
#line 2671 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 882:
/* Line 1787 of yacc.c  */
#line 2677 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 883:
/* Line 1787 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 884:
/* Line 1787 of yacc.c  */
#line 2686 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 885:
/* Line 1787 of yacc.c  */
#line 2695 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 886:
/* Line 1787 of yacc.c  */
#line 2704 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 887:
/* Line 1787 of yacc.c  */
#line 2713 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 888:
/* Line 1787 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 889:
/* Line 1787 of yacc.c  */
#line 2722 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 890:
/* Line 1787 of yacc.c  */
#line 2723 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 891:
/* Line 1787 of yacc.c  */
#line 2724 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 892:
/* Line 1787 of yacc.c  */
#line 2728 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 893:
/* Line 1787 of yacc.c  */
#line 2729 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 894:
/* Line 1787 of yacc.c  */
#line 2730 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 895:
/* Line 1787 of yacc.c  */
#line 2731 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 896:
/* Line 1787 of yacc.c  */
#line 2732 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 897:
/* Line 1787 of yacc.c  */
#line 2733 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 898:
/* Line 1787 of yacc.c  */
#line 2734 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 899:
/* Line 1787 of yacc.c  */
#line 2735 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 900:
/* Line 1787 of yacc.c  */
#line 2736 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 902:
/* Line 1787 of yacc.c  */
#line 2744 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 903:
/* Line 1787 of yacc.c  */
#line 2745 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 904:
/* Line 1787 of yacc.c  */
#line 2746 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 905:
/* Line 1787 of yacc.c  */
#line 2747 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 906:
/* Line 1787 of yacc.c  */
#line 2748 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 907:
/* Line 1787 of yacc.c  */
#line 2754 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 908:
/* Line 1787 of yacc.c  */
#line 2763 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 909:
/* Line 1787 of yacc.c  */
#line 2772 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 910:
/* Line 1787 of yacc.c  */
#line 2781 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 914:
/* Line 1787 of yacc.c  */
#line 2804 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 915:
/* Line 1787 of yacc.c  */
#line 2805 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 916:
/* Line 1787 of yacc.c  */
#line 2806 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 917:
/* Line 1787 of yacc.c  */
#line 2807 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 918:
/* Line 1787 of yacc.c  */
#line 2808 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 919:
/* Line 1787 of yacc.c  */
#line 2814 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 920:
/* Line 1787 of yacc.c  */
#line 2823 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 921:
/* Line 1787 of yacc.c  */
#line 2832 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 922:
/* Line 1787 of yacc.c  */
#line 2841 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 925:
/* Line 1787 of yacc.c  */
#line 2904 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 926:
/* Line 1787 of yacc.c  */
#line 2905 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 927:
/* Line 1787 of yacc.c  */
#line 2908 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 928:
/* Line 1787 of yacc.c  */
#line 2919 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 929:
/* Line 1787 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 930:
/* Line 1787 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 931:
/* Line 1787 of yacc.c  */
#line 2932 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 932:
/* Line 1787 of yacc.c  */
#line 2941 "grammar.y"
    {
         TempFile f { };
         f.Puts("_Alignas(");
         OutputExpression((yyvsp[(3) - (4)].exp), f);
         f.Puts(")");
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExpression((yyvsp[(3) - (4)].exp));
         delete f;
      }
    break;

  case 933:
/* Line 1787 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 934:
/* Line 1787 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 935:
/* Line 1787 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 936:
/* Line 1787 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 937:
/* Line 1787 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 938:
/* Line 1787 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 939:
/* Line 1787 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 940:
/* Line 1787 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 941:
/* Line 1787 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 942:
/* Line 1787 of yacc.c  */
#line 2970 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 943:
/* Line 1787 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 944:
/* Line 1787 of yacc.c  */
#line 2975 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 945:
/* Line 1787 of yacc.c  */
#line 2976 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 946:
/* Line 1787 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 947:
/* Line 1787 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 948:
/* Line 1787 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 949:
/* Line 1787 of yacc.c  */
#line 2986 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 950:
/* Line 1787 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 951:
/* Line 1787 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 952:
/* Line 1787 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 953:
/* Line 1787 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 954:
/* Line 1787 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 955:
/* Line 1787 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 956:
/* Line 1787 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 957:
/* Line 1787 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 958:
/* Line 1787 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 959:
/* Line 1787 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 960:
/* Line 1787 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 961:
/* Line 1787 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 962:
/* Line 1787 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 963:
/* Line 1787 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 964:
/* Line 1787 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 965:
/* Line 1787 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 966:
/* Line 1787 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 967:
/* Line 1787 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 968:
/* Line 1787 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 969:
/* Line 1787 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 970:
/* Line 1787 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 971:
/* Line 1787 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 972:
/* Line 1787 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 973:
/* Line 1787 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 974:
/* Line 1787 of yacc.c  */
#line 3020 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 975:
/* Line 1787 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 976:
/* Line 1787 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 977:
/* Line 1787 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 978:
/* Line 1787 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 980:
/* Line 1787 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 981:
/* Line 1787 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 982:
/* Line 1787 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 983:
/* Line 1787 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 985:
/* Line 1787 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 986:
/* Line 1787 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 987:
/* Line 1787 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 989:
/* Line 1787 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 990:
/* Line 1787 of yacc.c  */
#line 3047 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 991:
/* Line 1787 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 992:
/* Line 1787 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 994:
/* Line 1787 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 995:
/* Line 1787 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 996:
/* Line 1787 of yacc.c  */
#line 3061 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 998:
/* Line 1787 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 999:
/* Line 1787 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1000:
/* Line 1787 of yacc.c  */
#line 3068 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1002:
/* Line 1787 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1003:
/* Line 1787 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1004:
/* Line 1787 of yacc.c  */
#line 3075 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1006:
/* Line 1787 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1007:
/* Line 1787 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1008:
/* Line 1787 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1010:
/* Line 1787 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1011:
/* Line 1787 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1012:
/* Line 1787 of yacc.c  */
#line 3089 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1014:
/* Line 1787 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1015:
/* Line 1787 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1016:
/* Line 1787 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1017:
/* Line 1787 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1018:
/* Line 1787 of yacc.c  */
#line 3101 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1019:
/* Line 1787 of yacc.c  */
#line 3103 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1020:
/* Line 1787 of yacc.c  */
#line 3119 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1021:
/* Line 1787 of yacc.c  */
#line 3121 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1022:
/* Line 1787 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1023:
/* Line 1787 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1024:
/* Line 1787 of yacc.c  */
#line 3139 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1025:
/* Line 1787 of yacc.c  */
#line 3141 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1026:
/* Line 1787 of yacc.c  */
#line 3154 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1027:
/* Line 1787 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1028:
/* Line 1787 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1029:
/* Line 1787 of yacc.c  */
#line 3176 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1030:
/* Line 1787 of yacc.c  */
#line 3177 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1031:
/* Line 1787 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1032:
/* Line 1787 of yacc.c  */
#line 3182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1033:
/* Line 1787 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1034:
/* Line 1787 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1035:
/* Line 1787 of yacc.c  */
#line 3187 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1036:
/* Line 1787 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1037:
/* Line 1787 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1038:
/* Line 1787 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1039:
/* Line 1787 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1040:
/* Line 1787 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1041:
/* Line 1787 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1042:
/* Line 1787 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1043:
/* Line 1787 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1044:
/* Line 1787 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1045:
/* Line 1787 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1046:
/* Line 1787 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1047:
/* Line 1787 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1048:
/* Line 1787 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("_Float16")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1049:
/* Line 1787 of yacc.c  */
#line 3214 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1050:
/* Line 1787 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1051:
/* Line 1787 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1052:
/* Line 1787 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1053:
/* Line 1787 of yacc.c  */
#line 3233 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1054:
/* Line 1787 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1055:
/* Line 1787 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1056:
/* Line 1787 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1057:
/* Line 1787 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1058:
/* Line 1787 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1059:
/* Line 1787 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1060:
/* Line 1787 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1061:
/* Line 1787 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1062:
/* Line 1787 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1063:
/* Line 1787 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1064:
/* Line 1787 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1065:
/* Line 1787 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1066:
/* Line 1787 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1067:
/* Line 1787 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1068:
/* Line 1787 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1069:
/* Line 1787 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1070:
/* Line 1787 of yacc.c  */
#line 3281 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1071:
/* Line 1787 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1072:
/* Line 1787 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1073:
/* Line 1787 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1074:
/* Line 1787 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1075:
/* Line 1787 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1076:
/* Line 1787 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1077:
/* Line 1787 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1078:
/* Line 1787 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1079:
/* Line 1787 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1080:
/* Line 1787 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1081:
/* Line 1787 of yacc.c  */
#line 3296 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1082:
/* Line 1787 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1083:
/* Line 1787 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1084:
/* Line 1787 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1086:
/* Line 1787 of yacc.c  */
#line 3305 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1087:
/* Line 1787 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1088:
/* Line 1787 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1089:
/* Line 1787 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1090:
/* Line 1787 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1092:
/* Line 1787 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1095:
/* Line 1787 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1097:
/* Line 1787 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1098:
/* Line 1787 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1099:
/* Line 1787 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1107:
/* Line 1787 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1108:
/* Line 1787 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1109:
/* Line 1787 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1110:
/* Line 1787 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1111:
/* Line 1787 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1112:
/* Line 1787 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1113:
/* Line 1787 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1114:
/* Line 1787 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1115:
/* Line 1787 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1116:
/* Line 1787 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1117:
/* Line 1787 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1118:
/* Line 1787 of yacc.c  */
#line 3353 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1119:
/* Line 1787 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1120:
/* Line 1787 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1787 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1787 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1787 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1787 of yacc.c  */
#line 3363 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1125:
/* Line 1787 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1126:
/* Line 1787 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1127:
/* Line 1787 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1128:
/* Line 1787 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1129:
/* Line 1787 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1130:
/* Line 1787 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1131:
/* Line 1787 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1132:
/* Line 1787 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1133:
/* Line 1787 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1134:
/* Line 1787 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1135:
/* Line 1787 of yacc.c  */
#line 3379 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1136:
/* Line 1787 of yacc.c  */
#line 3380 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1137:
/* Line 1787 of yacc.c  */
#line 3381 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1138:
/* Line 1787 of yacc.c  */
#line 3382 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1139:
/* Line 1787 of yacc.c  */
#line 3384 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1140:
/* Line 1787 of yacc.c  */
#line 3385 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1141:
/* Line 1787 of yacc.c  */
#line 3386 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1142:
/* Line 1787 of yacc.c  */
#line 3387 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1143:
/* Line 1787 of yacc.c  */
#line 3388 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1144:
/* Line 1787 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1145:
/* Line 1787 of yacc.c  */
#line 3393 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1146:
/* Line 1787 of yacc.c  */
#line 3394 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1147:
/* Line 1787 of yacc.c  */
#line 3395 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1148:
/* Line 1787 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1149:
/* Line 1787 of yacc.c  */
#line 3397 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1150:
/* Line 1787 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1151:
/* Line 1787 of yacc.c  */
#line 3400 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1152:
/* Line 1787 of yacc.c  */
#line 3401 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1153:
/* Line 1787 of yacc.c  */
#line 3402 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1154:
/* Line 1787 of yacc.c  */
#line 3403 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1155:
/* Line 1787 of yacc.c  */
#line 3404 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1156:
/* Line 1787 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1157:
/* Line 1787 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1158:
/* Line 1787 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1159:
/* Line 1787 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1160:
/* Line 1787 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1161:
/* Line 1787 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1162:
/* Line 1787 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1163:
/* Line 1787 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1164:
/* Line 1787 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1165:
/* Line 1787 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1166:
/* Line 1787 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1167:
/* Line 1787 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.declaration) = MkDeclarationPragma(yytext); (yyval.declaration).loc = (yyloc); }
    break;

  case 1168:
/* Line 1787 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1169:
/* Line 1787 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1170:
/* Line 1787 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1171:
/* Line 1787 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1172:
/* Line 1787 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1173:
/* Line 1787 of yacc.c  */
#line 3435 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1174:
/* Line 1787 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1175:
/* Line 1787 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1176:
/* Line 1787 of yacc.c  */
#line 3444 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1177:
/* Line 1787 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1178:
/* Line 1787 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1179:
/* Line 1787 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1180:
/* Line 1787 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1181:
/* Line 1787 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1182:
/* Line 1787 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1183:
/* Line 1787 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1184:
/* Line 1787 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1185:
/* Line 1787 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1186:
/* Line 1787 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1187:
/* Line 1787 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1188:
/* Line 1787 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1189:
/* Line 1787 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1190:
/* Line 1787 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1191:
/* Line 1787 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1192:
/* Line 1787 of yacc.c  */
#line 3473 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1193:
/* Line 1787 of yacc.c  */
#line 3474 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1194:
/* Line 1787 of yacc.c  */
#line 3475 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1195:
/* Line 1787 of yacc.c  */
#line 3476 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1196:
/* Line 1787 of yacc.c  */
#line 3480 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1197:
/* Line 1787 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1198:
/* Line 1787 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1199:
/* Line 1787 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1200:
/* Line 1787 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1201:
/* Line 1787 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1202:
/* Line 1787 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1203:
/* Line 1787 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1204:
/* Line 1787 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1205:
/* Line 1787 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1206:
/* Line 1787 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1207:
/* Line 1787 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1208:
/* Line 1787 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1209:
/* Line 1787 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1210:
/* Line 1787 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1787 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1787 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1787 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1787 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1215:
/* Line 1787 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1787 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1217:
/* Line 1787 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1787 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1787 of yacc.c  */
#line 3533 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1787 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1222:
/* Line 1787 of yacc.c  */
#line 3535 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1787 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1787 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1225:
/* Line 1787 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1787 of yacc.c  */
#line 3541 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1227:
/* Line 1787 of yacc.c  */
#line 3542 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1787 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1787 of yacc.c  */
#line 3544 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1787 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1787 of yacc.c  */
#line 3547 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1232:
/* Line 1787 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1787 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1234:
/* Line 1787 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1787 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1236:
/* Line 1787 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1787 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1787 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1787 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1787 of yacc.c  */
#line 3563 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1787 of yacc.c  */
#line 3564 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1242:
/* Line 1787 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1787 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1787 of yacc.c  */
#line 3567 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1245:
/* Line 1787 of yacc.c  */
#line 3568 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1787 of yacc.c  */
#line 3569 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1247:
/* Line 1787 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1787 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1249:
/* Line 1787 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1787 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1251:
/* Line 1787 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1252:
/* Line 1787 of yacc.c  */
#line 3586 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1253:
/* Line 1787 of yacc.c  */
#line 3587 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1254:
/* Line 1787 of yacc.c  */
#line 3588 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1255:
/* Line 1787 of yacc.c  */
#line 3589 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1256:
/* Line 1787 of yacc.c  */
#line 3590 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1257:
/* Line 1787 of yacc.c  */
#line 3591 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1258:
/* Line 1787 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1259:
/* Line 1787 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1260:
/* Line 1787 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1261:
/* Line 1787 of yacc.c  */
#line 3598 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1262:
/* Line 1787 of yacc.c  */
#line 3599 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1263:
/* Line 1787 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1264:
/* Line 1787 of yacc.c  */
#line 3606 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1265:
/* Line 1787 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1266:
/* Line 1787 of yacc.c  */
#line 3609 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1267:
/* Line 1787 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1268:
/* Line 1787 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1269:
/* Line 1787 of yacc.c  */
#line 3614 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1270:
/* Line 1787 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1271:
/* Line 1787 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1272:
/* Line 1787 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1273:
/* Line 1787 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1274:
/* Line 1787 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1275:
/* Line 1787 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1276:
/* Line 1787 of yacc.c  */
#line 3626 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1277:
/* Line 1787 of yacc.c  */
#line 3628 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1278:
/* Line 1787 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1279:
/* Line 1787 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1280:
/* Line 1787 of yacc.c  */
#line 3644 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1281:
/* Line 1787 of yacc.c  */
#line 3647 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1282:
/* Line 1787 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1283:
/* Line 1787 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1284:
/* Line 1787 of yacc.c  */
#line 3651 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1285:
/* Line 1787 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1286:
/* Line 1787 of yacc.c  */
#line 3662 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1287:
/* Line 1787 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1288:
/* Line 1787 of yacc.c  */
#line 3665 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1289:
/* Line 1787 of yacc.c  */
#line 3666 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1290:
/* Line 1787 of yacc.c  */
#line 3667 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1291:
/* Line 1787 of yacc.c  */
#line 3669 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1292:
/* Line 1787 of yacc.c  */
#line 3678 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1293:
/* Line 1787 of yacc.c  */
#line 3679 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1294:
/* Line 1787 of yacc.c  */
#line 3680 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1295:
/* Line 1787 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1296:
/* Line 1787 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1297:
/* Line 1787 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1298:
/* Line 1787 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.external) = MkExternalPragma(yytext); (yyval.external).loc = (yyloc); }
    break;

  case 1299:
/* Line 1787 of yacc.c  */
#line 3685 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1300:
/* Line 1787 of yacc.c  */
#line 3686 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1301:
/* Line 1787 of yacc.c  */
#line 3690 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1302:
/* Line 1787 of yacc.c  */
#line 3692 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1303:
/* Line 1787 of yacc.c  */
#line 3700 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1304:
/* Line 1787 of yacc.c  */
#line 3702 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1305:
/* Line 1787 of yacc.c  */
#line 3703 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1306:
/* Line 1787 of yacc.c  */
#line 3706 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1307:
/* Line 1787 of yacc.c  */
#line 3707 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1308:
/* Line 1787 of yacc.c  */
#line 3711 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1309:
/* Line 1787 of yacc.c  */
#line 3712 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1310:
/* Line 1787 of yacc.c  */
#line 3713 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1313:
/* Line 1787 of yacc.c  */
#line 3719 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1314:
/* Line 1787 of yacc.c  */
#line 3720 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1315:
/* Line 1787 of yacc.c  */
#line 3722 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1316:
/* Line 1787 of yacc.c  */
#line 3724 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1319:
/* Line 1787 of yacc.c  */
#line 3730 "grammar.y"
    { ast = MkList(); }
    break;

  case 1320:
/* Line 1787 of yacc.c  */
#line 3734 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1321:
/* Line 1787 of yacc.c  */
#line 3735 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1322:
/* Line 1787 of yacc.c  */
#line 3736 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1323:
/* Line 1787 of yacc.c  */
#line 3740 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1324:
/* Line 1787 of yacc.c  */
#line 3744 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1325:
/* Line 1787 of yacc.c  */
#line 3745 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1326:
/* Line 1787 of yacc.c  */
#line 3746 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1327:
/* Line 1787 of yacc.c  */
#line 3750 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1328:
/* Line 1787 of yacc.c  */
#line 3751 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1329:
/* Line 1787 of yacc.c  */
#line 3755 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1330:
/* Line 1787 of yacc.c  */
#line 3756 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1331:
/* Line 1787 of yacc.c  */
#line 3760 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1332:
/* Line 1787 of yacc.c  */
#line 3761 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1333:
/* Line 1787 of yacc.c  */
#line 3762 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1334:
/* Line 1787 of yacc.c  */
#line 3763 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1335:
/* Line 1787 of yacc.c  */
#line 3767 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1336:
/* Line 1787 of yacc.c  */
#line 3771 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1337:
/* Line 1787 of yacc.c  */
#line 3775 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1338:
/* Line 1787 of yacc.c  */
#line 3779 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1787 of yacc.c  */
#line 21796 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2050 of yacc.c  */
#line 3782 "grammar.y"

